%% This suite contains cases that cannot be written
%% in Erlang itself and must be done via the abstract
%% format or possibly Core.

-module(generated_SUITE).

-include_lib("common_test/include/ct.hrl").
-include("dialyzer_test_constants.hrl").

-export([suite/0, all/0, generated_patterns/1]).

suite() ->
    [{timetrap, ?plt_timeout}].
all() ->
    [generated_patterns].

generated_patterns(Config) when is_list(Config) ->
    %% Equivalent to:
    %%
    %% -module(foo).
    %% -export(bar).
    %% bar() ->
    %%     Arg = sample,
    %%     case Arg of
    %%         #{} -> map;
    %%         _ -> not_a_map
    %%     end.
    %%
    %% Except the patterns in case are marked as autogenerated.
    Prog = [{attribute,1,module,foo},
	    {attribute,2,export,[{bar,0}]},
            {function,3,bar,0,
		[{clause,3,
		    [],
		    [],
		    [{match,4,{var,4,'Arg'},{atom,4,sample}},
		     {'case',5,{var,5,'Arg'},
			[{clause,6,[{map,[{location,6},{generated,true}],[]}],[],[{atom,6,map}]},
			 {clause,7,[{var,[{location,7},{generated,true}],'_'}],[],[{atom,7,not_a_map}]}]}]}]}],

    {ok, BeamFile} = compile(Config, Prog, foo, []),
    [] = run_dialyzer(succ_typings, [BeamFile], []),
    ok.

compile(Config, Prog, Module, CompileOpts) ->
    PrivDir = ?config(priv_dir,Config),
    Opts = [{outdir, PrivDir}, debug_info, return_errors | CompileOpts],
    {ok, Module, Source} = compile:forms(Prog, Opts),
    BeamFile = filename:join([PrivDir, lists:concat([Module, ".beam"])]),
    ok = file:write_file(BeamFile, Source),
    {ok, BeamFile}.

run_dialyzer(Analysis, Files, Opts) ->
    dialyzer:run([{analysis_type, Analysis},
		  {files, Files},
		  {from, byte_code} |
		  Opts]).
