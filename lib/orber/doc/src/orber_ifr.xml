<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>orber_ifr</title>
    <prepared></prepared>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-10-13</date>
    <rev>A</rev>
  </header>
  <module>orber_ifr</module>
  <modulesummary>The Interface Repository stores representations of IDL information</modulesummary>
  <description>
    <p>This module contains functions for managing the Interface
      Repository (IFR). This documentation should be used in conjunction
      with the documentation in chapter 6 of <term id="CORBA"></term>2.3.
      Whenever the term IFR object is used in this manual page, it
      refers to a pseudo object used only for interaction with the IFR
      rather than a CORBA object.</p>
  </description>

  <section>
    <title>Initialization of the IFR</title>
    <p>The following functions are used to initialize the Interface
      Repository and to obtain the initial reference to the
      repository.</p>
  </section>
  <funcs>
    <func>
      <name>init(Nodes,Timeout) -> ok</name>
      <fsummary>Intialize the IFR</fsummary>
      <type>
        <v>Nodes = list()</v>
        <v>Timeout = integer() | infinity</v>
      </type>
      <desc>
        <p>This function should be called to initialize the IFR. It
          creates the necessary mnesia-tables. A mnesia schema should
          exist, and mnesia must be running.</p>
      </desc>
    </func>
    <func>
      <name>find_repository() -> #IFR_Repository_objref</name>
      <fsummary>Find the IFR object reference for the Repository</fsummary>
      <desc>
        <p>Find the IFR object reference for the Repository. This
          reference should be used when adding objects to the IFR, and
          when extracting information from the IFR.
          The first time this function is called, it will create the
          repository and all the primitive definitions.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>General methods</title>
    <p>The following functions are the methods of the IFR. The first
      argument is always an #IFR_objref, i.e. the IFR (pseudo)object
      on which to apply this method. These functions are useful when
      the type of IFR object is not know, but they are somewhat slower
      than the specific functions listed below which only accept a
      particular type of IFR object as the first argument.</p>
  </section>
  <funcs>
    <func>
      <name>get_def_kind(Objref) -> Return</name>
      <fsummary>Return the definition kind of the IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = atom() (one of dk_none, dk_all, dk_Attribute, dk_Constant, dk_Exception, dk_Interface, dk_Module, dk_Operation, dk_Typedef, dk_Alias, dk_Struct, dk_Union, dk_Enum, dk_Primitive, dk_String, dk_Wstring, dk_Fixed, dk_Sequence, dk_Array, dk_Repository)</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind. Returns the definition
          kind of the IFR object.</p>
      </desc>
    </func>
    <func>
      <name>destroy(Objref) -> Return</name>
      <fsummary>Destroy, except IRObject, Contained and Container, target object and its contents</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = tuple()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind except IRObject,
          Contained and Container. Destroys that object and its
          contents (if any). Returns whatever mnesia:transaction
          returns.</p>
      </desc>
    </func>
    <func>
      <name>get_id(Objref) -> Return</name>
      <fsummary>Return the target object's repository id</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns the repository id of that object.</p>
      </desc>
    </func>
    <func>
      <name>set_id(Objref,Id) -> ok</name>
      <fsummary>Set the target object's repository id</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Id = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Sets the repository id of that object.</p>
      </desc>
    </func>
    <func>
      <name>get_name(Objref) -> Return</name>
      <fsummary>Return the name of the target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns the name of that object.</p>
      </desc>
    </func>
    <func>
      <name>set_name(Objref,Name) -> ok</name>
      <fsummary>Set given name to target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Name = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Sets the name of that object.</p>
      </desc>
    </func>
    <func>
      <name>get_version(Objref) -> Return</name>
      <fsummary>Return the version of the target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns the version of that object.</p>
      </desc>
    </func>
    <func>
      <name>set_version(Objref,Version) -> ok</name>
      <fsummary>Set given version of the target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Version = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Sets the version of that object.</p>
      </desc>
    </func>
    <func>
      <name>get_defined_in(Objref) -> Return</name>
      <fsummary>Return the Container the target object is contained in</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = #IFR_Container_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns the Container object that the object is
          defined in.</p>
      </desc>
    </func>
    <func>
      <name>get_absolute_name(Objref) -> Return</name>
      <fsummary>Return the absolute name of the target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = string()</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns the absolute (scoped) name of that
          object.</p>
      </desc>
    </func>
    <func>
      <name>get_containing_repository(Objref) -> Return</name>
      <fsummary>Get the most derived Contained object associated  with the target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = #IFR_Repository_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns the Repository that is eventually reached
          by recursively following the object's defined_in attribute.</p>
      </desc>
    </func>
    <func>
      <name>describe(Objref) -> Return</name>
      <fsummary>Return a tuple which describe the target object</fsummary>
      <type>
        <v>Objref = #IFR_object</v>
        <v>Return = tuple() (a contained_description record) | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. Returns a tuple describing the object.</p>
      </desc>
    </func>
    <func>
      <name>move(Objref,New_container,New_name,New_version) -> Return</name>
      <fsummary>Move the target object from its current location to given  Container, name and version</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>New_container = #IFR_Container_objref</v>
        <v>New_name = string()</v>
        <v>New_version = string()</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Contained. New_container is an IFR object of any kind that
          inherits from Container. Removes Objref from its current 
          Container, and adds it to New_container. The name attribute
          is changed to New_name and the version attribute is changed
          to New_version.</p>
      </desc>
    </func>
    <func>
      <name>lookup(Objref,Search_name) -> Return</name>
      <fsummary>Return the IFR object identified by the given name</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Search_name = string()</v>
        <v>Return =  #IFR_object</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Returns an IFR object identified by search_name
          (a scoped name).</p>
      </desc>
    </func>
    <func>
      <name>contents(Objref,Limit_type,Exclude_inherited) -> Return</name>
      <fsummary>Return the content of the target object limited by the given constraints</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Limit_type = atom() (one of dk_none, dk_all, dk_Attribute, dk_Constant, dk_Exception, dk_Interface, dk_Module, dk_Operation, dk_Typedef, dk_Alias, dk_Struct, dk_Union, dk_Enum, dk_Primitive, dk_String, dk_Wstring, dk_Fixed, dk_Sequence, dk_Array, dk_Repository)</v>
        <v>Exclude_inherited = atom() (true or false)</v>
        <v>Return = list() (a list of IFR#_objects)</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Returns the contents of that IFR object.</p>
      </desc>
    </func>
    <func>
      <name>lookup_name(Objref,Search_name,Levels_to_search, Limit_type, Exclude_inherited) -> Return</name>
      <fsummary>Return a list of IFR objects matching the given name</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Search_name = string()</v>
        <v>Levels_to_search = integer()</v>
        <v>Limit_type = atom() (one of dk_none, dk_all, dk_Attribute, dk_Constant, dk_Exception, dk_Interface, dk_Module, dk_Operation, dk_Typedef, dk_Alias, dk_Struct, dk_Union, dk_Enum, dk_Primitive, dk_String, dk_Wstring, dk_Fixed, dk_Sequence,  dk_Array, dk_Repository)</v>
        <v>Exclude_inherited = atom() (true or false)</v>
        <v>Return = list() (a list of #IFR_objects)</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Returns a list of #IFR_objects with an id
          matching Search_name.</p>
      </desc>
    </func>
    <func>
      <name>describe_contents(Objref, Limit_type, Exclude_inherited, Max_returned_objs) -> Return</name>
      <fsummary>Return a list of descriptions of the IFR objects contained by the target Container object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Limit_type = atom() (one of dk_none, dk_all, dk_Attribute, dk_Constant, dk_Exception, dk_Interface, dk_Module, dk_Operation, dk_Typedef, dk_Alias, dk_Struct, dk_Union, dk_Enum, dk_Primitive, dk_String, dk_Wstring, dk_Fixed, dk_Sequence, dk_Array, dk_Repository)</v>
        <v>Exclude_inherited = atom() (true or false)</v>
        <v>Return = list() (a list of tuples (contained_description records) | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Returns a list of descriptions of the IFR objects
          in this Container's contents.</p>
      </desc>
    </func>
    <func>
      <name>create_module(Objref,Id,Name,Version) -> Return</name>
      <fsummary>Create an IFR object of given type</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Return = #IFR_ModuleDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type ModuleDef.</p>
      </desc>
    </func>
    <func>
      <name>create_constant(Objref,Id,Name,Version,Type,Value) -> Return</name>
      <fsummary>Create a ConstantDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Type = #IFR_IDLType_objref</v>
        <v>Value = any()</v>
        <v>Return = #IFR_ConstantDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type ConstantDef.</p>
      </desc>
    </func>
    <func>
      <name>create_struct(Objref,Id,Name,Version,Members) -> Return</name>
      <fsummary>Create a StructDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Members = list() (list of structmember records)</v>
        <v>Return = #IFR_StructDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type StructDef.</p>
      </desc>
    </func>
    <func>
      <name>create_union(Objref,Id,Name,Version,Discriminator_type,Members) -> Return</name>
      <fsummary>Create a UnionDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Discriminator_type = #IFR_IDLType_Objref</v>
        <v>Members = list() (list of unionmember records)</v>
        <v>Return = #IFR_UnionDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type UnionDef.</p>
      </desc>
    </func>
    <func>
      <name>create_enum(Objref,Id,Name,Version,Members) -> Return</name>
      <fsummary>Create a EnumDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Members = list() (list of strings)</v>
        <v>Return = #IFR_EnumDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type EnumDef.</p>
      </desc>
    </func>
    <func>
      <name>create_alias(Objref,Id,Name,Version,Original_type) -> Return</name>
      <fsummary>Create a AliasDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Original_type = #IFR_IDLType_Objref</v>
        <v>Return = #IFR_AliasDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type AliasDef.</p>
      </desc>
    </func>
    <func>
      <name>create_interface(Objref,Id,Name,Version,Base_interfaces) -> Return</name>
      <fsummary>Create a InterfaceDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Base_interfaces = list() (a list of IFR_InterfaceDef_objrefs that this interface inherits from</v>
        <v>Return = #IFR_InterfaceDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type InterfaceDef.</p>
      </desc>
    </func>
    <func>
      <name>create_exception(Objref,Id,Name,Version,Members) -> Return</name>
      <fsummary>Create a ExceptionDef IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Members = list() (list of structmember records)</v>
        <v>Return = #IFR_ExceptionDef_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          Container. Creates an IFR object of the type ExceptionDef.</p>
      </desc>
    </func>
    <func>
      <name>get_type(Objref) -> Return</name>
      <fsummary>Return the typecode of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = tuple() (a typecode tuple)</v>
      </type>
      <desc>
        <p>Objref is an IFR object of any kind that inherits from
          IDLType or an IFR object of the kind ConstantDef,
          ExceptionDef or AttributeDef. Returns the typecode of the
          IFR object.</p>
      </desc>
    </func>
    <func>
      <name>lookup_id(Objref,Search_id) -> Return</name>
      <fsummary>Return the IFR object matching the given id</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Search_id = string()</v>
        <v>Return = #IFR_objref</v>
      </type>
      <desc>
        <p>Returns an IFR object matching the Search_id.</p>
      </desc>
    </func>
    <func>
      <name>get_primitive(Objref,Kind) -> Return</name>
      <fsummary>Return a PrimitiveDef of the specified kind</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Kind = atom() (one of pk_null, pk_void, pk_short, pk_long, pk_ushort, pk_ulong, pk_float, pk_double, pk_boolean, pk_char, pk_octet, pk_any, pk_TypeCode, pk_Principal, pk_string, pk_wstring, pk_fixed, pk_objref)</v>
        <v>Return = #IFR_PrimitiveDef_objref</v>
      </type>
      <desc>
        <p>Returns a PrimitiveDef of the specified kind.</p>
      </desc>
    </func>
    <func>
      <name>create_string(Objref,Bound) -> Return</name>
      <fsummary>Create an IFR objref of the type StringDef</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Bound = integer() (unsigned long /= 0)</v>
        <v>Return = #IFR_StringDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR objref of the type StringDef.</p>
      </desc>
    </func>
    <func>
      <name>create_wstring(Objref,Bound) -> Return</name>
      <fsummary>Create an IFR objref of the type WstringDef</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Bound = integer() (unsigned long /= 0)</v>
        <v>Return = #IFR_WstringDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR objref of the type WstringDef.</p>
      </desc>
    </func>
    <func>
      <name>create_fixed(Objref,Digits,Scale) -> Return</name>
      <fsummary>Create an IFR objref of the type FixedDef</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Digits = Scale = integer()</v>
        <v>Return = #IFR_FixedDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR objref of the type FixedDef.</p>
      </desc>
    </func>
    <func>
      <name>create_sequence(Objref,Bound,Element_type) -> Return</name>
      <fsummary>Create an IFR objref of the type SequenceDef</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Bound = integer() (unsigned long)</v>
        <v>Element_type = #IFR_IDLType_objref</v>
        <v>Return = #IFR_SequenceDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR objref of the type SequenceDef.</p>
      </desc>
    </func>
    <func>
      <name>create_array(Objref,Length,Element_type) -> Return</name>
      <fsummary>Create an IFR objref of the type ArrayDef</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Bound = integer() (unsigned long)</v>
        <v>Element_type = #IFR_IDLType_objref</v>
        <v>Return = #IFR_ArrayDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR objref of the type ArrayDef.</p>
      </desc>
    </func>
    <func>
      <name>create_idltype(Objref,Typecode) -> Return</name>
      <fsummary>Create an IFR objref of the type IDLType</fsummary>
      <type>
        <v>Objref = #IFR_Repository_objref</v>
        <v>Typecode = tuple() (a typecode tuple)</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Creates an IFR objref of the type IDLType.</p>
      </desc>
    </func>
    <func>
      <name>get_type_def(Objref) -> Return</name>
      <fsummary>Return an IFR object of the type IDLType describing the  type of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object of the kind ConstantDef or
          AttributeDef. Returns an IFR object of the type IDLType
          describing the type of the IFR object.</p>
      </desc>
    </func>
    <func>
      <name>set_type_def(Objref,TypeDef) -> Return</name>
      <fsummary>Set given TypeDef of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>TypeDef = #IFR_IDLType_objref</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object of the kind ConstantDef or
          AttributeDef. Sets the type_def of the IFR Object.</p>
      </desc>
    </func>
    <func>
      <name>get_value(Objref) -> Return</name>
      <fsummary>Return the value attribute of the target ConstantDef object</fsummary>
      <type>
        <v>Objref = #IFR_ConstantDef_objref</v>
        <v>Return = any()</v>
      </type>
      <desc>
        <p>Returns the value attribute of an IFR Object of the type ConstantDef.</p>
      </desc>
    </func>
    <func>
      <name>set_value(Objref,Value) -> Return</name>
      <fsummary>Set the value attribute of the target ConstantDef object</fsummary>
      <type>
        <v>Objref = #IFR_ConstantDef_objref</v>
        <v>Value = any()</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the value attribute of an IFR Object of the type ConstantDef.</p>
      </desc>
    </func>
    <func>
      <name>get_members(Objref) -> Return</name>
      <fsummary>Return the members of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = list()</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind StructDef, UnionDef,
          EnumDef or ExceptionDef.
          For StructDef, UnionDef and ExceptionDef: Returns a list of
          structmember records that are the constituent parts of the
          object.
          For EnumDef: Returns a list of strings describing the
          enumerations.</p>
      </desc>
    </func>
    <func>
      <name>set_members(Objref,Members) -> Return</name>
      <fsummary>Set the members attribute of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Members = list()</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind StructDef, UnionDef,
          EnumDef or ExceptionDef.
          For StructDef, UnionDef and ExceptionDef: Members is a list
          of structmember records.
          For EnumDef: Members is a list of strings describing the
          enumerations.
          Sets the members attribute, which are the constituent parts of the
          exception.</p>
      </desc>
    </func>
    <func>
      <name>get_discriminator_type(Objref) -> Return</name>
      <fsummary>Get the discriminator typecode of the target object</fsummary>
      <type>
        <v>Objref = #IFR_UnionDef_objref</v>
        <v>Return = tuple() (a typecode tuple)</v>
      </type>
      <desc>
        <p>Returns the discriminator typecode of an IFR object of the type
          UnionDef.</p>
      </desc>
    </func>
    <func>
      <name>get_discriminator_type_def(Objref) -> Return</name>
      <fsummary>Return IDLType object describing the discriminator  type of the target object</fsummary>
      <type>
        <v>Objref = #IFR_UnionDef_objref</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Returns an IFR object of the type IDLType describing the
          discriminator type of an IFR object of the type UnionDef.</p>
      </desc>
    </func>
    <func>
      <name>set_discriminator_type_def(Objref,TypeDef) ->  Return</name>
      <fsummary>Set the attribute discriminator_type_def for the target object to the given TypeDef</fsummary>
      <type>
        <v>Objref = #IFR_UnionDef_objref</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Sets the attribute discriminator_type_def, an IFR object of
          the type IDLType describing the discriminator type of an IFR
          object of the type UnionDef.</p>
      </desc>
    </func>
    <func>
      <name>get_original_type_def(Objref) -> Return</name>
      <fsummary>Return an IFR object of the type IDLType describing the original type</fsummary>
      <type>
        <v>Objref = #IFR_AliasDef_objref</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Returns an IFR object of the type IDLType describing the
          original type.</p>
      </desc>
    </func>
    <func>
      <name>set_original_type_def(Objref,TypeDef) -> Return</name>
      <fsummary>Set the original_type_def attribute which describes the  original type</fsummary>
      <type>
        <v>Objref = #IFR_AliasDef_objref</v>
        <v>Typedef = #IFR_IDLType_objref</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the original_type_def attribute which describes the
          original type.</p>
      </desc>
    </func>
    <func>
      <name>get_kind(Objref) -> Return</name>
      <fsummary>Return an atom describing the primitive type</fsummary>
      <type>
        <v>Objref = #IFR_PrimitiveDef_objref</v>
        <v>Return = atom()</v>
      </type>
      <desc>
        <p>Returns an atom describing the primitive type (See CORBA 2.0
          p 6-21).</p>
      </desc>
    </func>
    <func>
      <name>get_bound(Objref) -> Return</name>
      <fsummary>Get the maximum size of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = integer (unsigned long)</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind StringDef or SequenceDef.
          For StringDef: returns the maximum number of characters in
          the string.
          For SequenceDef: Returns the maximum number of elements in
          the sequence. Zero indicates an unbounded sequence.</p>
      </desc>
    </func>
    <func>
      <name>set_bound(Objref,Bound) -> Return</name>
      <fsummary>Set the maximum size of the target object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Bound = integer (unsigned long)</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind StringDef or SequenceDef.
          For StringDef: Sets the maximum number of characters in the
          string. Bound must not be zero.
          For SequenceDef: Sets the maximum number of elements in the
          sequence. Zero indicates an unbounded sequence.</p>
      </desc>
    </func>
    <func>
      <name>get_element_type(Objref) -> Return</name>
      <fsummary>Return the typecode of the elements in the IFR object</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = tuple() (a typecode tuple)</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind SequenceDef or ArrayDef.
          Returns the typecode of the elements in the IFR object.</p>
      </desc>
    </func>
    <func>
      <name>get_element_type_def(Objref) -> Return</name>
      <fsummary>Return an IFR object of the type IDLType describing the  type of the elements in Objref</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind SequenceDef or ArrayDef.
          Returns an IFR object of the type IDLType describing the
          type of the elements in Objref.</p>
      </desc>
    </func>
    <func>
      <name>set_element_type_def(Objref,TypeDef) -> Return</name>
      <fsummary>Set the element_type_def attribute of the target object to the given TypeDef</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>TypeDef = #IFR_IDLType_objref</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind SequenceDef or ArrayDef.
          Sets the element_type_def attribute, an IFR object of the
          type IDLType describing the type of the elements in Objref.</p>
      </desc>
    </func>
    <func>
      <name>get_length(Objref) -> Return</name>
      <fsummary>Return the number of elements in the array</fsummary>
      <type>
        <v>Objref = #IFR_ArrayDef_objref</v>
        <v>Return = integer() (unsigned long)</v>
      </type>
      <desc>
        <p>Returns the number of elements in the array.</p>
      </desc>
    </func>
    <func>
      <name>set_length(Objref,Length) -> Return</name>
      <fsummary>Set the number of elements in the array</fsummary>
      <type>
        <v>Objref = #IFR_ArrayDef_objref</v>
        <v>Length = integer() (unsigned long)</v>
      </type>
      <desc>
        <p>Sets the number of elements in the array.</p>
      </desc>
    </func>
    <func>
      <name>get_mode(Objref) -> Return</name>
      <fsummary>Get the mode of the target object (AttributeDef or OperationDef)</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Return = atom()</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind AttributeDef or OperationDef.
          For AttributeDef: Return is an atom ('ATTR_NORMAL' or
          'ATTR_READONLY') specifying the read/write access for this
          attribute.
          For OperationDef: Return is an atom ('OP_NORMAL' or
          'OP_ONEWAY') specifying the mode of the operation.</p>
      </desc>
    </func>
    <func>
      <name>set_mode(Objref,Mode) -> Return</name>
      <fsummary>Set the mode of the target object (AttributeDef or OperationDef) to the given mode</fsummary>
      <type>
        <v>Objref = #IFR_objref</v>
        <v>Mode = atom()</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Objref is an IFR object the kind AttributeDef or OperationDef.
          For AttributeDef: Sets the read/write access for this
          attribute. Mode is an atom ('ATTR_NORMAL' or
          'ATTR_READONLY').
          For OperationDef: Sets the mode of the operation. Mode is an
          atom ('OP_NORMAL' or 'OP_ONEWAY').</p>
      </desc>
    </func>
    <func>
      <name>get_result(Objref) -> Return</name>
      <fsummary>Return typecode describing the type of the value returned by the operation</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Return = tuple() (a typecode tuple)</v>
      </type>
      <desc>
        <p>Returns a typecode describing the type of the value returned by the
          operation.</p>
      </desc>
    </func>
    <func>
      <name>get_result_def(Objref) -> Return</name>
      <fsummary>Return an IFR object of the type IDLType describing the  type of the result</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Return = #IFR_IDLType_objref</v>
      </type>
      <desc>
        <p>Returns an IFR object of the type IDLType describing the type of the
          result.</p>
      </desc>
    </func>
    <func>
      <name>set_result_def(Objref,ResultDef) -> Return</name>
      <fsummary>Set the type_def attribute of the target object to the given ResultDef</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>ResultDef = #IFR_IDLType_objref</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the type_def attribute, an IFR Object of the type IDLType
          describing the result.</p>
      </desc>
    </func>
    <func>
      <name>get_params(Objref) -> Return</name>
      <fsummary>Return a list of parameter description records describing the parameters of the target OperationDef</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Return = list() (list of parameter description records)</v>
      </type>
      <desc>
        <p>Returns a list of parameter description records, which describes the
          parameters of the OperationDef.</p>
      </desc>
    </func>
    <func>
      <name>set_params(Objref,Params) -> Return</name>
      <fsummary>Set the params attribute of the target object to the given parameter description records</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Params = list() (list of parameter description records)</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the params attribute, a list of parameter description records.</p>
      </desc>
    </func>
    <func>
      <name>get_contexts(Objref) -> Return</name>
      <fsummary>Return a list of context identifiers for the operation</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Return = list() (list of strings)</v>
      </type>
      <desc>
        <p>Returns a list of context identifiers for the operation.</p>
      </desc>
    </func>
    <func>
      <name>set_contexts(Objref,Contexts) -> Return</name>
      <fsummary>Set the context attribute for the operation</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Contexts = list() (list of strings)</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the context attribute for the operation.</p>
      </desc>
    </func>
    <func>
      <name>get_exceptions(Objref) -> Return</name>
      <fsummary>Return a list of exception types that can be raised  by the target object</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Return = list() (list of #IFR_ExceptionDef_objrefs)</v>
      </type>
      <desc>
        <p>Returns a list of exception types that can be raised by this
          operation.</p>
      </desc>
    </func>
    <func>
      <name>set_exceptions(Objref,Exceptions) -> Return</name>
      <fsummary>Set the exceptions attribute for the target object</fsummary>
      <type>
        <v>Objref = #IFR_OperationDef_objref</v>
        <v>Exceptions = list() (list of #IFR_ExceptionDef_objrefs)</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the exceptions attribute for this operation.</p>
      </desc>
    </func>
    <func>
      <name>get_base_interfaces(Objref) -> Return</name>
      <fsummary>Return a list of InterfaceDefs from which the  target InterfaceDef object inherit</fsummary>
      <type>
        <v>Objref = #IFR_InterfaceDef_objref</v>
        <v>Return = list() (list of #IFR_InterfaceDef_objrefs)</v>
      </type>
      <desc>
        <p>Returns a list of InterfaceDefs from which this InterfaceDef inherits.</p>
      </desc>
    </func>
    <func>
      <name>set_base_interfaces(Objref,BaseInterfaces) -> Return</name>
      <fsummary>Set the BaseInterfaces attribute</fsummary>
      <type>
        <v>Objref = #IFR_InterfaceDef_objref</v>
        <v>BaseInterfaces = list() (list of #IFR_InterfaceDef_objrefs)</v>
        <v>Return = ok | {exception, _}</v>
      </type>
      <desc>
        <p>Sets the BaseInterfaces attribute.</p>
      </desc>
    </func>
    <func>
      <name>is_a(Objref,Interface_id) -> Return</name>
      <fsummary>Return a boolean if the target InterfaceDef match or inherit from the given id</fsummary>
      <type>
        <v>Objref = #IFR_InterfaceDef_objref</v>
        <v>Interface_id = #IFR_InterfaceDef_objref</v>
        <v>Return = atom() (true or false)</v>
      </type>
      <desc>
        <p>Returns true if the InterfaceDef either is identical to or
          inherits from Interface_id.</p>
      </desc>
    </func>
    <func>
      <name>describe_interface(Objref) -> Return</name>
      <fsummary>Return a full inter face description record describing the InterfaceDef</fsummary>
      <type>
        <v>Objref = #IFR_InterfaceDef_objref</v>
        <v>Return = tuple() (a fullinterfacedescription record)</v>
      </type>
      <desc>
        <p>Returns a full inter face description record describing the InterfaceDef.</p>
      </desc>
    </func>
    <func>
      <name>create_attribute(Objref,Id,Name,Version,Type,Mode) -> Return</name>
      <fsummary>Create an IFR object of the type AttributeDef contained in  the target InterfaceDef object</fsummary>
      <type>
        <v>Objref = #IFR_InterfaceDef_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Type = #IFR_IDLType_objref</v>
        <v>Mode = atom() ('ATTR_NORMAL' or 'ATTR_READONLY')</v>
        <v>Return = #IFR_AttributeDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR object of the type AttributeDef contained in this
          InterfaceDef.</p>
      </desc>
    </func>
    <func>
      <name>create_operation(Objref,Id,Name,Version,Result,Mode,Params, Exceptions,Contexts) -> Return</name>
      <fsummary>Create an IFR object of the type OperationDef contained in the target InterfaceDef object</fsummary>
      <type>
        <v>Objref = #IFR_InterfaceDef_objref</v>
        <v>Id = string()</v>
        <v>Name = string()</v>
        <v>Version = string()</v>
        <v>Result = #IFR_IDLType_objref</v>
        <v>Mode = atom() ('OP_NORMAL' or 'OP_ONEWAY')</v>
        <v>Params = list() (list of parameter description records)</v>
        <v>Exceptions = list() (list of #IFR_ExceptionDef_objrefs)</v>
        <v>Contexts = list() (list of strings)</v>
        <v>Return = #IFR_OperationDef_objref</v>
      </type>
      <desc>
        <p>Creates an IFR object of the type OperationDef contained in this
          InterfaceDef.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

