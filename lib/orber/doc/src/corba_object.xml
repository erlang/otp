<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>corba_object</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-11-10</date>
    <rev>A</rev>
  </header>
  <module>corba_object</module>
  <modulesummary>The CORBA Object interface functions</modulesummary>
  <description>
    <p>This module contains the CORBA Object interface functions that can be 
      called for all objects.</p>
  </description>
  <funcs>
    <func>
      <name>get_interface(Object) -> InterfaceDef</name>
      <fsummary>Fetch the interface description</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>InterfaceDef = term()</v>
      </type>
      <desc>
        <p>This function returns the full interface description for an object.</p>
      </desc>
    </func>
    <func>
      <name>is_nil(Object) -> boolean()</name>
      <fsummary>Return true, if the given object is a NIL object reference, otherwise false</fsummary>
      <type>
        <v>Object = #objref</v>
      </type>
      <desc>
        <p>This function checks if the object reference has a nil object value,
          which denotes no object. It is the reference that is tested and no 
          object implementation is involved in the test. </p>
      </desc>
    </func>
    <func>
      <name>is_a(Object, Logical_type_id) -> Return</name>
      <name>is_a(Object, Logical_type_id, Contexts) -> Return</name>
      <fsummary>Return true if the target object is an, or inherit from, object of the given type</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Logical_type_id = string()</v>
        <v>Contexts = [Context]</v>
        <v>Context = #'IOP_ServiceContext'{context_id = CtxId, context_data = CtxData}</v>
        <v>CtxId = ?ORBER_GENERIC_CTX_ID</v>
        <v>CtxData = {interface, Interface} | {userspecific, term()} | {configuration, Options}</v>
        <v>Interface = string()</v>
        <v>Options = [{Key, Value}]</v>
        <v>Key = ssl_client_options</v>
        <v>Value = allowed value associated with the given key</v>
        <v>Return = boolean() | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>The <em>Logical_type_id</em> is a string that is a share type
          identifier (repository id). The function returns true if the object
          is an instance of that type or an ancestor of the "most derived"
          type of that object.</p>
        <p>The <em>configuration</em> context is used to override the global
           SSL client side 
           <seealso marker="ch_install#config">configuration</seealso>.</p>
        <p>Note: Other ORB suppliers may not support this function completely
          according to the OMG specification. Thus, a <em>is_a</em> call may
          raise an exception or respond unpredictable if the Object is
          located on a remote node.</p>
      </desc>
    </func>
    <func>
      <name>is_remote(Object) -> boolean()</name>
      <fsummary>Determine whether or not an object reference is remote</fsummary>
      <type>
        <v>Object = #objref</v>
      </type>
      <desc>
        <p>This function returns true if an object reference is remote 
          otherwise false. </p>
      </desc>
    </func>
    <func>
      <name>non_existent(Object) -> Return</name>
      <name>non_existent(Object, Contexts) -> Return</name>
      <fsummary>Return false if the target object do not exist, otherwise true</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Contexts = [Context]</v>
        <v>Context = #'IOP_ServiceContext'{context_id = CtxId, context_data = CtxData}</v>
        <v>CtxId = ?ORBER_GENERIC_CTX_ID</v>
        <v>CtxData = {interface, Interface} | {userspecific, term()} | {configuration, Options}</v>
        <v>Interface = string()</v>
        <v>Options = [{Key, Value}]</v>
        <v>Key = ssl_client_options</v>
        <v>Value = allowed value associated with the given key</v>
        <v>Return = boolean() | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This function can be used to test if the object has been destroyed. 
          It does this without invoking any application level code. The ORB 
          returns true if it knows that the object is destroyed otherwise 
          false.</p>
        <p>The <em>configuration</em> context is used to override the global
           SSL client side 
           <seealso marker="ch_install#config">configuration</seealso>.</p>
        <p>Note: The OMG have specified two different operators, <c>_not_existent</c> (CORBA version 2.0 and 2.2) and 
          <c>_non_existent</c> (CORBA version 2.3), to be used for this function. It is not mandatory to support
          both versions. Thus, a <em>non_existent</em> call may raise an exception or respond unpredictable 
          if the Object is located on a remote node. Depending on which version, ORB:s you intend to
          communicate with supports, you can either use this function or <c>not_existent/1</c>.</p>
      </desc>
    </func>
    <func>
      <name>not_existent(Object) -> Return</name>
      <name>not_existent(Object, Contexts) -> Return</name>
      <fsummary>Return false if the target object do not exist, otherwise true</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Contexts = [Context]</v>
        <v>Context = #'IOP_ServiceContext'{context_id = CtxId, context_data = CtxData}</v>
        <v>CtxId = ?ORBER_GENERIC_CTX_ID</v>
        <v>CtxData = {interface, Interface} | {userspecific, term()} | {configuration, Options}</v>
        <v>Interface = string()</v>
        <v>Options = [{Key, Value}]</v>
        <v>Key = ssl_client_options</v>
        <v>Value = allowed value associated with the given key</v>
        <v>Return = boolean() | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This function is implemented due to Interoperable purposes. Behaves as
          <c>non_existent</c> except the operator <c>_not_existent</c> is used when
          communicating with other ORB:s.</p>
        <p>The <em>configuration</em> context is used to override the global
           SSL client side 
           <seealso marker="ch_install#config">configuration</seealso>.</p>
      </desc>
    </func>
    <func>
      <name>is_equivalent(Object, OtherObject) -> boolean()</name>
      <fsummary>Return true if the target object and the supplied object easily can be determined to be equal, otherwise false</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>OtherObject = #objref</v>
      </type>
      <desc>
        <p>This function is used to determine if two object references are 
          equivalent so far the ORB easily can determine. It returns 
          <em>true</em> if the target object reference is equal to the 
          other object reference and <em>false</em> otherwise.</p>
      </desc>
    </func>
    <func>
      <name>hash(Object, Maximum) -> int()</name>
      <fsummary>Return a hash value based on the target object</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Maximum = int()</v>
      </type>
      <desc>
        <p>This function returns a hash value based on the object reference 
          that not will change during the lifetime of the object. 
          The <em>Maximum</em> parameter denotes the upper bound of the value.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

