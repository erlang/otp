<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>CosNaming</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>1997-06-10</date>
    <rev>A</rev>
  </header>
  <module>CosNaming</module>
  <modulesummary>The CosNaming service is a collection of interfaces that together define the naming service.</modulesummary>
  <description>
    <p>The naming service provides  the principal mechanism for clients to find 
      objects in an ORB based world. The naming service provides an initial naming
      context that functions as the root context for all names. Given this context 
      clients can navigate in the name space. </p>
    <p>Types that are declared on the CosNaming level are:</p>
    <code type="none"><![CDATA[
typedef string Istring;
struct NameComponent {
      Istring id;  
      Istring kind;
};
  
typedef sequence <NameComponent> Name;
  
enum BindingType {nobject, ncontext};
  
struct Binding {
      Name    binding_name;
      BindingType binding_type;
};

typedef sequence <Binding> BindingList;
    ]]></code>
    <p>To get access to the record definitions for the structs use:
      <c>-include_lib("orber/COSS/CosNaming.hrl").</c>.</p>
    <p>Names are not an ORB object but the can be structured in components as seen by 
      the definition above. There are no requirements on names so the service can support 
      many different conventions and standards.</p>
    <p>There are two different interfaces supported in the service:</p>
    <list type="bulleted">
      <item>NamingContext</item>
      <item>BindingIterator</item>
    </list>
  </description>
  
</erlref>

