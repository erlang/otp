<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNaming_NamingContextExt</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>2000-08-16</date>
    <rev>A</rev>
  </header>
  <module>CosNaming_NamingContextExt</module>
  <modulesummary>This interface contains operation for converting a Name sequence to a string and back.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
</p>
    <code type="none">
        -include_lib("orber/COSS/CosNaming/CosNaming.hrl").
    </code>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNaming_NamingContext">CosNaming_NamingContext</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>to_string(NamingContext, Name) -> Return</name>
      <fsummary>Stringify a <c>Name</c>sequence to a string</fsummary>
      <type>
        <v>NameContext = #objref</v>
        <v>Name = [NameComponent]</v>
        <v>Return = string() | {'EXCEPTION', NamingContext::InvalidName{}}</v>
      </type>
      <desc>
        <p>Stringifies a <c>Name</c> sequence to a string.</p>
      </desc>
    </func>
    <func>
      <name>to_name(NamingContext, NameString) -> Return</name>
      <fsummary>Convert a stringified <c>Name</c>to a <c>Name</c>sequence</fsummary>
      <type>
        <v>NameContext = #objref</v>
        <v>NameString = string()</v>
        <v>Return = [NameComponent] | {'EXCEPTION', NamingContext::InvalidName{}}</v>
      </type>
      <desc>
        <p>Converts a stringified <c>Name</c> to a <c>Name</c> sequence.</p>
      </desc>
    </func>
    <func>
      <name>to_url(NamingContext, AddressString, NameString) -> Return</name>
      <fsummary>Return an URL string constructed from the given Address and Name strings</fsummary>
      <type>
        <v>NameContext = #objref</v>
        <v>Address = NameString = string()</v>
        <v>Return =  URLString |  {'EXCEPTION', NamingContext::InvalidName{}} |  {'EXCEPTION', NamingContextExt::InvalidAddress{}}</v>
      </type>
      <desc>
        <p>This operation takes a <c>corbaloc</c> string and a stringified <c>Name</c>
          sequence as input and returns a fully formed URL string.</p>
      </desc>
    </func>
    <func>
      <name>resolve_str(NamingContext, NameString) -> Return</name>
      <fsummary>Return the object associated, if any, with the given name string</fsummary>
      <type>
        <v>NameContext = #objref</v>
        <v>NameString = string()</v>
        <v>Return =  #objref |  {'EXCEPTION', NamingContext::InvalidName{}} |  {'EXCEPTION', NamingContext::NotFound{why, rest_of_name}} | {'EXCEPTION', NamingContext::CannotProceed{cxt, rest_of_name}}</v>
      </type>
      <desc>
        <p>This operation takes a stringified <c>Name</c> sequence as input and
          returns the associated, if any, object.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

