<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1998</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>any</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>1998-04-20</date>
    <rev>A</rev>
  </header>
  <module>any</module>
  <modulesummary>the corba any type</modulesummary>
  <description>
    <p>This module contains functions that gives an interface to the CORBA any type.</p>
    <p>Note that the <c>any</c> interface in orber does not contain a destroy 
      function because the any type is represented as an Erlang record and 
      therefor will be removed by the garbage collector when not in use.</p>
    <p>The type <c>TC</c> used below describes an IDL type and is a tuple according 
      to the to the Erlang language mapping.</p>
    <p>The type <c>Any</c> used below is defined as:</p>
    <code type="none">
      -record(any, {typecode, value}).
    </code>
    <p>where <c>typecode</c> is a TC tuple and <c>value</c> is an Erlang term of 
      the type defined by the typecode field.</p>
  </description>
  <funcs>
    <func>
      <name>create() -> Result</name>
      <name>create(Typecode, Value) -> Result</name>
      <fsummary>Create an any record</fsummary>
      <type>
        <v>Typecode = TC</v>
        <v>Value = term()</v>
        <v>Result = Any</v>
      </type>
      <desc>
        <p>The create/0 function creates an empty any record and the create/2 
          function creates an initialized record.</p>
      </desc>
    </func>
    <func>
      <name>set_typecode(A, Typecode) -> Result</name>
      <fsummary>Set the typecode field</fsummary>
      <type>
        <v>A = Any</v>
        <v>Typecode = TC</v>
        <v>Result = Any</v>
      </type>
      <desc>
        <p>This function sets the typecode of <em>A</em> and returns a 
          new any record.</p>
      </desc>
    </func>
    <func>
      <name>get_typecode(A) -> Result</name>
      <fsummary>Fetch the typecode</fsummary>
      <type>
        <v>A = Any</v>
        <v>Result = TC</v>
      </type>
      <desc>
        <p>This function returns the typecode of <em>A</em>.</p>
      </desc>
    </func>
    <func>
      <name>set_value(A, Value) -> Result</name>
      <fsummary>Set the value field</fsummary>
      <type>
        <v>A = Any</v>
        <v>Value = term()</v>
        <v>Result = Any</v>
      </type>
      <desc>
        <p>This function sets the value of <em>A</em> and returns a 
          new any record.</p>
      </desc>
    </func>
    <func>
      <name>get_value(A) -> Result</name>
      <fsummary>Fetch the value</fsummary>
      <type>
        <v>A = Any</v>
        <v>Result = term()</v>
      </type>
      <desc>
        <p>This function returns the value of <em>A</em>.
          </p>
      </desc>
    </func>
  </funcs>
  
</erlref>

