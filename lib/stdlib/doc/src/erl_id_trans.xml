<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year>
      <year>2020</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>erl_id_trans</title>
    <prepared>Robert Virding</prepared>
    <responsible>Bjarne D&auml;cker</responsible>
    <docno>1</docno>
    <approved>Bjarne D&auml;cker</approved>
    <checked></checked>
    <date>1997-01-21</date>
    <rev>B</rev>
    <file>erl_id_trans.xml</file>
  </header>
  <module since="">erl_id_trans</module>
  <modulesummary>An identity parse transform.</modulesummary>
  <description>
    <p>This module performs an identity parse transformation of Erlang code.
      It is included as an example for users who wants to write their own
      parse transformers. If option <c>{parse_transform,Module}</c> is passed
      to the compiler, a user-written function <c>parse_transform/2</c>
      is called by the compiler before the code is checked for errors.</p>
    <p>Before the function <c>parse_transform</c> is called, the Erlang
      Compiler checks if the parse transformation can handle abstract code
      with column numbers: If the function <c>parse_transform_info/0</c>
      is implemented and returns a map where the key <c>error_location</c> is
      associated with the value <c>line</c>, the compiler removes
      column numbers from the abstract code before calling the parse
      transform. Otherwise, the compiler passes the abstract code on
      without modification.</p>
  </description>

  <funcs>
    <func>
      <name since="">parse_transform(Forms, Options) -> Forms</name>
      <fsummary>Transform Erlang forms.</fsummary>
      <type>
        <v>Forms = [<seetype marker="erl_parse#abstract_form">erl_parse:abstract_form()</seetype>
          | <seetype marker="erl_parse#form_info">erl_parse:form_info()</seetype>]</v>
        <v>Options = [<seetype marker="compile#option">compile:option()</seetype>]</v>
      </type>
      <desc>
        <p>Performs an identity transformation on Erlang forms, as an example.
        </p>
      </desc>
    </func>

    <func>
      <name since="OTP-24">parse_transform_info() -> Info</name>
      <fsummary>Return information about the parse transform itself.</fsummary>
      <type>
	<v>Info = #{'error_location' => 'column' | 'line'}</v>
      </type>
      <desc>
	<p>Returns information about the parse transform itself.</p>
      </desc>
    </func>

  </funcs>

  <section>
    <title>Parse Transformations</title>
    <p>Parse transformations are used if a programmer wants to use
      Erlang syntax, but with different semantics. The original Erlang
      code is then transformed into other Erlang code.</p>
    <note>
      <p>Programmers are strongly advised not to engage in parse
        transformations. No support is offered for problems encountered.</p>
    </note>
  </section>

  <section>
    <title>See Also</title>
    <p><seeerl marker="erl_parse"><c>erl_parse(3)</c></seeerl>,
      <seeerl marker="compiler:compile"><c>compile(3)</c></seeerl></p>
  </section>
</erlref>

