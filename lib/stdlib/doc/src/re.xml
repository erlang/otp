<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2007</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>re</title>
    <prepared>Patrik Nyblom</prepared>
    <responsible>Kenneth Lundin</responsible>
    <docno>1</docno>
    <approved></approved>
    <checked></checked>
    <date>2008-05-27</date>
    <rev>A</rev>
    <file>re.xml</file>
  </header>
  <module>re</module>
  <modulesummary>Perl like regular expressions for Erlang</modulesummary>
  <description>

    <p>This module contains regular expression matching functions for
    strings and binaries.</p>

    <p>The <seealso marker="#regexp_syntax">regular expression</seealso>
    syntax and semantics resemble that of Perl.</p>

    <p>The library's matching algorithms are currently based on the
    PCRE library, but not all of the PCRE library is interfaced and
    some parts of the library go beyond what PCRE offers. The sections of
    the PCRE documentation which are relevant to this module are included
    here.</p>

    <note>
    <p>The Erlang literal syntax for strings uses the &quot;\&quot;
    (backslash) character as an escape code. You need to escape
    backslashes in literal strings, both in your code and in the shell,
    with an additional backslash, i.e.: &quot;\\&quot;.</p>
    </note>


  </description>
  <datatypes>
    <datatype>
      <name name="mp"/>
      <desc>
        <p>Opaque datatype containing a compiled regular expression.
        The mp() is guaranteed to be a tuple() having the atom
	're_pattern' as its first element, to allow for matching in
        guards. The arity of the tuple() or the content of the other fields
	may change in future releases.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="nl_spec"/>
    </datatype>
    <datatype>
      <name name="compile_option"/>
    </datatype>
  </datatypes>
  <funcs>
    <func>
      <name name="compile" arity="1"/>
      <fsummary>Compile a regular expression into a match program</fsummary>
      <desc>
      <p>The same as <c>compile(<anno>Regexp</anno>,[])</c></p>
      </desc>
    </func> 
    <func>
      <name name="compile" arity="2"/>
      <fsummary>Compile a regular expression into a match program</fsummary>
      <desc>
      <p>This function compiles a regular expression with the syntax
      described below into an internal format to be used later as a
      parameter to the run/2,3 functions.</p>
      <p>Compiling the regular expression before matching is useful if
      the same expression is to be used in matching against multiple
      subjects during the program's lifetime. Compiling once and
      executing many times is far more efficient than compiling each
      time one wants to match.</p>
      <p>When the unicode option is given, the regular expression should be given as a valid Unicode <c>charlist()</c>, otherwise as any valid <c>iodata()</c>.</p>

      <p><marker id="compile_options"/>The options have the following meanings:</p>
      <taglist>
      <tag><c>unicode</c></tag>
      <item>The regular expression is given as a Unicode <c>charlist()</c> and the resulting regular expression code is to be run against a valid Unicode <c>charlist()</c> subject. Also consider the <c>ucp</c> option when using Unicode characters.</item>
      <tag><c>anchored</c></tag>
      <item>The pattern is forced to be "anchored", that is, it is constrained to match only at the first matching point in the string that is being searched (the "subject string"). This effect can also be achieved by appropriate constructs in the pattern itself.</item>
      <tag><c>caseless</c></tag>
      <item>Letters in the pattern match both upper and lower case letters. It is equivalent to Perl's /i option, and it can be changed within a pattern by a (?i) option setting. Uppercase and lowercase letters are defined as in the ISO-8859-1 character set.</item>
      <tag><c>dollar_endonly</c></tag>
      <item>A dollar metacharacter in the pattern matches only at the end of the subject string. Without this option, a dollar also matches immediately before a newline at the end of the string (but not before any other newlines). The <c>dollar_endonly</c> option is ignored if <c>multiline</c> is given. There is no equivalent option in Perl, and no way to set it within a pattern.</item>
      <tag><c>dotall</c></tag>
      <item>A dot in the pattern matches all characters, including those that indicate newline. Without it, a dot does not match when the current position is at a newline. This option is equivalent to Perl's /s option, and it can be changed within a pattern by a (?s) option setting. A negative class such as [^a] always matches newline characters, independent of this option's setting.</item>
      <tag><c>extended</c></tag>
      <item>Whitespace data characters in the pattern are ignored except when escaped or inside a character class. Whitespace does not include the VT character (ASCII 11). In addition, characters between an unescaped # outside a character class and the next newline, inclusive, are also ignored. This is equivalent to Perl's /x option, and it can be changed within a pattern by a (?x) option setting.

This option makes it possible to include comments inside complicated patterns. Note, however, that this applies only to data characters. Whitespace characters may never appear within special character sequences in a pattern, for example within the sequence <c>(?(</c> which introduces a conditional subpattern.</item>
      <tag><c>firstline</c></tag>
      <item>An unanchored pattern is required to match before or at the first newline in the subject string, though the matched text may continue over the newline.</item>
      <tag><c>multiline</c></tag>
      <item><p>By default, PCRE treats the subject string as consisting of a single line of characters (even if it actually contains newlines). The "start of line" metacharacter (^) matches only at the start of the string, while the "end of line" metacharacter ($) matches only at the end of the string, or before a terminating newline (unless <c>dollar_endonly</c> is given). This is the same as Perl.</p>

<p>When <c>multiline</c> is given, the "start of line" and "end of line" constructs match immediately following or immediately before internal newlines in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl's /m option, and it can be changed within a pattern by a (?m) option setting. If there are no newlines in a subject string, or no occurrences of ^ or $ in a pattern, setting <c>multiline</c> has no effect.</p> </item>
      <tag><c>no_auto_capture</c></tag>
      <item>Disables the use of numbered capturing parentheses in the pattern. Any opening parenthesis that is not followed by ? behaves as if it were followed by ?: but named parentheses can still be used for capturing (and they acquire numbers in the usual way). There is no equivalent of this option in Perl.
</item>
      <tag><c>dupnames</c></tag>
      <item>Names used to identify capturing subpatterns need not be unique. This can be helpful for certain types of pattern when it is known that only one instance of the named subpattern can ever be matched. There are more details of named subpatterns below</item>
      <tag><c>ungreedy</c></tag>
      <item>This option inverts the "greediness" of the quantifiers so that they are not greedy by default, but become greedy if followed by "?". It is not compatible with Perl. It can also be set by a (?U) option setting within the pattern.</item>
      <tag><c>{newline, NLSpec}</c></tag>
      <item>
      <p>Override the default definition of a newline in the subject string, which is LF (ASCII 10) in Erlang.</p>
      <taglist>
        <tag><c>cr</c></tag>
        <item>Newline is indicated by a single character CR (ASCII 13)</item>
        <tag><c>lf</c></tag>
        <item>Newline is indicated by a single character LF (ASCII 10), the default</item>
        <tag><c>crlf</c></tag>
        <item>Newline is indicated by the two-character CRLF (ASCII 13 followed by ASCII 10) sequence.</item>
        <tag><c>anycrlf</c></tag>
        <item>Any of the three preceding sequences should be recognized.</item>
        <tag><c>any</c></tag>
        <item>Any of the newline sequences above, plus the Unicode sequences VT (vertical tab, U+000B), FF (formfeed, U+000C), NEL (next line, U+0085), LS (line separator, U+2028), and PS (paragraph separator, U+2029). </item>
      </taglist>
      </item>
      <tag><c>bsr_anycrlf</c></tag>
      <item>Specifies specifically that \R is to match only the cr, lf or crlf sequences, not the Unicode specific newline characters.</item>
      <tag><c>bsr_unicode</c></tag>
      <item>Specifies specifically that \R is to match all the Unicode newline characters (including crlf etc, the default).</item>
      <tag><c>no_start_optimize</c></tag>
      <item>This option disables optimization that may malfunction if "Special start-of-pattern items" are present in the regular expression. A typical example would be when matching "DEFABC" against "(*COMMIT)ABC", where the start optimization of PCRE would skip the subject up to the "A" and would never realize that the (*COMMIT) instruction should have made the matching fail. This option is only relevant if you use "start-of-pattern items", as discussed in the section "PCRE regular expression details" below.</item>
      <tag><c>ucp</c></tag>
      <item>Specifies that Unicode Character Properties should be used when
        resolving \B, \b, \D, \d, \S, \s, \W and \w. Without this flag, only
        ISO-Latin-1 properties are used. Using Unicode properties hurts
        performance, but is semantically correct when working with Unicode
        characters beyond the ISO-Latin-1 range.</item>
      <tag><c>never_utf</c></tag>
      <item>Specifies that the (*UTF) and/or (*UTF8) "start-of-pattern items" are forbidden. This flag can not be combined with <c>unicode</c>. Useful if ISO-Latin-1 patterns from an external source are to be compiled.</item>
      </taglist>
    </desc>
    </func> 

    <func>
      <name name="inspect" arity="2"/>
      <fsummary>Inspects a compiled regular expression</fsummary>
      <desc>
      <p>This function takes a compiled regular expression and an item, returning the relevant data from the regular expression. Currently the only supported item is <c>namelist</c>, which returns the tuple <c>{namelist, [ binary()]}</c>, containing the names of all (unique) named subpatterns in the regular expression.</p>
      <p>Example:</p>
      <code type="none">
1&gt; {ok,MP} = re:compile("(?&lt;A&gt;A)|(?&lt;B&gt;B)|(?&lt;C&gt;C)").
{ok,{re_pattern,3,0,0,
                &lt;&lt;69,82,67,80,119,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,
                  255,255,...&gt;&gt;}}
2&gt; re:inspect(MP,namelist).
{namelist,[&lt;&lt;"A"&gt;&gt;,&lt;&lt;"B"&gt;&gt;,&lt;&lt;"C"&gt;&gt;]}
3&gt; {ok,MPD} = re:compile("(?&lt;C&gt;A)|(?&lt;B&gt;B)|(?&lt;C&gt;C)",[dupnames]).
{ok,{re_pattern,3,0,0,
                &lt;&lt;69,82,67,80,119,0,0,0,0,0,8,0,1,0,0,0,255,255,255,255,
                  255,255,...&gt;&gt;}}
4&gt; re:inspect(MPD,namelist).                                   
{namelist,[&lt;&lt;"B"&gt;&gt;,&lt;&lt;"C"&gt;&gt;]}</code>
      <p>Note specifically in the second example that the duplicate name only occurs once in the returned list, and that the list is in alphabetical order regardless of where the names are positioned in the regular expression. The order of the names is the same as the order of captured subexpressions if <c>{capture, all_names}</c> is given as an option to <c>re:run/3</c>. You can therefore create a name-to-value mapping from the result of <c>re:run/3</c> like this:</p>
<code>
1&gt; {ok,MP} = re:compile("(?&lt;A&gt;A)|(?&lt;B&gt;B)|(?&lt;C&gt;C)").
{ok,{re_pattern,3,0,0,
                &lt;&lt;69,82,67,80,119,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,
                  255,255,...&gt;&gt;}}
2&gt; {namelist, N} = re:inspect(MP,namelist).
{namelist,[&lt;&lt;"A"&gt;&gt;,&lt;&lt;"B"&gt;&gt;,&lt;&lt;"C"&gt;&gt;]}
3&gt; {match,L} = re:run("AA",MP,[{capture,all_names,binary}]).
{match,[&lt;&lt;"A"&gt;&gt;,&lt;&lt;&gt;&gt;,&lt;&lt;&gt;&gt;]}
4&gt; NameMap = lists:zip(N,L).
[{&lt;&lt;"A"&gt;&gt;,&lt;&lt;"A"&gt;&gt;},{&lt;&lt;"B"&gt;&gt;,&lt;&lt;&gt;&gt;},{&lt;&lt;"C"&gt;&gt;,&lt;&lt;&gt;&gt;}]</code>
      <p>More items are expected to be added in the future.</p>
      </desc>
    </func> 
    <func>
      <name name="run" arity="2"/>
      <fsummary>Match a subject against regular expression and capture subpatterns</fsummary>
      <desc>
      <p>The same as <c>run(<anno>Subject</anno>,<anno>RE</anno>,[])</c>.</p>
      </desc>
    </func> 
    <func>
      <name name="run" arity="3"/>
      <fsummary>Match a subject against regular expression and capture subpatterns</fsummary>
      <type_desc variable="CompileOpt">See <seealso marker="#compile_options">compile/2</seealso> above.</type_desc>
      <desc>

      <p>Executes a regexp matching, returning <c>match/{match,
      <anno>Captured</anno>}</c> or <c>nomatch</c>. The regular expression can be
      given either as <c>iodata()</c> in which case it is
      automatically compiled (as by <c>re:compile/2</c>) and executed,
      or as a pre-compiled <c>mp()</c> in which case it is executed
      against the subject directly.</p>

      <p>When compilation is involved, the exception <c>badarg</c> is
      thrown if a compilation error occurs. Call <c>re:compile/2</c>
      to get information about the location of the error in the
      regular expression.</p>

      <p>If the regular expression is previously compiled, the option
      list can only contain the options <c>anchored</c>,
      <c>global</c>, <c>notbol</c>, <c>noteol</c>, <c>report_errors</c>,
      <c>notempty</c>, <c>notempty_atstart</c>, <c>{offset, integer() >= 0}</c>,
      <c>{match_limit, integer() >= 0}</c>, 
      <c>{match_limit_recursion, integer() >= 0}</c>, 
      <c>{newline,
      <anno>NLSpec</anno>}</c> and 
      <c>{capture, <anno>ValueSpec</anno>}/{capture, <anno>ValueSpec</anno>,
      <anno>Type</anno>}</c>.  Otherwise all options valid for the
      <c>re:compile/2</c> function are allowed as well. Options
      allowed both for compilation and execution of a match, namely
      <c>anchored</c> and <c>{newline, <anno>NLSpec</anno>}</c>, 
      will affect both
      the compilation and execution if present together with a non
      pre-compiled regular expression.</p>

      <p>If the regular expression was previously compiled with the
      option <c>unicode</c>, the <c><anno>Subject</anno></c> should be provided as
      a valid Unicode <c>charlist()</c>, otherwise any <c>iodata()</c>
      will do. If compilation is involved and the option
      <c>unicode</c> is given, both the <c><anno>Subject</anno></c> and the regular
      expression should be given as valid Unicode
      <c>charlists()</c>.</p>

      <p>The <c>{capture, <anno>ValueSpec</anno>}/{capture, <anno>ValueSpec</anno>, <anno>Type</anno>}</c>
      defines what to return from the function upon successful
      matching. The <c>capture</c> tuple may contain both a
      value specification telling which of the captured
      substrings are to be returned, and a type specification, telling
      how captured substrings are to be returned (as index tuples,
      lists or binaries). The <c>capture</c> option makes the function
      quite flexible and powerful. The different options are described
      in detail below.</p>

      <p>If the capture options describe that no substring capturing
      at all is to be done (<c>{capture, none}</c>), the function will
      return the single atom <c>match</c> upon successful matching,
      otherwise the tuple
      <c>{match, <anno>ValueList</anno>}</c> is returned. Disabling capturing can
      be done either by specifying <c>none</c> or an empty list as
      <c><anno>ValueSpec</anno></c>.</p>

      <p>The <c>report_errors</c> option adds the possibility that an
      error tuple is returned. The tuple will either indicate a
      matching error (<c>match_limit</c> or
      <c>match_limit_recursion</c>) or a compilation error, where the
      error tuple has the format <c>{error, {compile,
      <anno>CompileErr</anno>}}</c>. Note that if the option
      <c>report_errors</c> is not given, the function never returns
      error tuples, but will report compilation errors as a badarg
      exception and failed matches due to exceeded match limits simply
      as <c>nomatch</c>.</p>

      <p>The options relevant for execution are:</p>

      <taglist>
      <tag><c>anchored</c></tag>

      <item>Limits <c>re:run/3</c> to matching at the first matching
      position. If a pattern was compiled with <c>anchored</c>, or
      turned out to be anchored by virtue of its contents, it cannot
      be made unanchored at matching time, hence there is no
      <c>unanchored</c> option.</item>

      <tag><c>global</c></tag>
      <item>

      <p>Implements global (repetitive) search (the <c>g</c> flag in
      Perl). Each match is returned as a separate
      <c>list()</c> containing the specific match as well as any
      matching subexpressions (or as specified by the <c>capture
      option</c>). The <c><anno>Captured</anno></c> part of the return value will
      hence be a <c>list()</c> of <c>list()</c>s when this
      option is given.</p>

      <p>The interaction of the global option with a regular
      expression which matches an empty string surprises some users.
      When the global option is given, <c>re:run/3</c> handles empty
      matches in the same way as Perl: a zero-length match at any
      point will be retried with the options <c>[anchored,
      notempty_atstart]</c> as well. If that search gives a result of length
      &gt; 0, the result is included.  For example:</p>
      
<code>    re:run("cat","(|at)",[global]).</code>

      <p>The following matching will be performed:</p>
      <taglist>
      <tag>At offset <c>0</c></tag>
      <item>The regexp <c>(|at)</c> will first match at the initial
      position of the string <c>cat</c>, giving the result set
      <c>[{0,0},{0,0}]</c> (the second <c>{0,0}</c> is due to the
      subexpression marked by the parentheses). As the length of the
      match is 0, we don't advance to the next position yet.</item>
      <tag>At offset <c>0</c> with <c>[anchored, notempty_atstart]</c></tag>
      <item> The search is retried
      with the options <c>[anchored, notempty_atstart]</c> at the same
      position, which does not give any interesting result of longer
      length, so the search position is now advanced to the next
      character (<c>a</c>).</item>
      <tag>At offset <c>1</c></tag>
      <item>This time, the search results in
      <c>[{1,0},{1,0}]</c>, so this search will also be repeated
      with the extra options.</item>
      <tag>At offset <c>1</c> with <c>[anchored, notempty_atstart]</c></tag>
      <item>Now the <c>ab</c> alternative
      is found and the result will be [{1,2},{1,2}]. The result is
      added to the list of results and the position in the
      search string is advanced two steps.</item>
      <tag>At offset <c>3</c></tag>
      <item>The search now once again
      matches the empty string, giving <c>[{3,0},{3,0}]</c>.</item>
      <tag>At offset <c>1</c> with <c>[anchored, notempty_atstart]</c></tag>
      <item>This will give no result of length &gt; 0 and we are at
      the last position, so the global search is complete.</item>
      </taglist>
      <p>The result of the call is:</p>

<code>     {match,[[{0,0},{0,0}],[{1,0},{1,0}],[{1,2},{1,2}],[{3,0},{3,0}]]}</code>
</item>

      <tag><c>notempty</c></tag>
      <item>
      <p>An empty string is not considered to be a valid match if this
      option is given. If there are alternatives in the pattern, they
      are tried. If all the alternatives match the empty string, the
      entire match fails. For example, if the pattern</p>
<code>    a?b?</code>
      <p>is applied to a string not beginning with "a" or "b", it
      would normally match the empty string at the start of the
      subject. With the <c>notempty</c> option, this match is not
      valid, so re:run/3 searches further into the string for
      occurrences of "a" or "b".</p>
      </item>
      <tag><c>notempty_atstart</c></tag>
      <item>
	<p>This is like <c>notempty</c>, except that an empty string
	match that is not at the start of the subject is permitted. If
	the pattern is anchored, such a match can occur only if the
	pattern contains \K.</p>
	<p>Perl has no direct equivalent of <c>notempty</c> or <c>notempty_atstart</c>, but it does
	make a special case of a pattern match of the empty string
	within its split() function, and when using the /g modifier. It
	is possible to emulate Perl's behavior after matching a null
	string by first trying the match again at the same offset with
	<c>notempty_atstart</c> and <c>anchored</c>, and then, if that fails, by
	advancing the starting offset (see below) and trying an ordinary
	match again.</p>
      </item>
      <tag><c>notbol</c></tag>

      <item>This option specifies that the first character of the subject
      string is not the beginning of a line, so the circumflex
      metacharacter should not match before it. Setting this without
      <c>multiline</c> (at compile time) causes circumflex never to
      match. This option only affects the behavior of the circumflex
      metacharacter. It does not affect \A.</item>

      <tag><c>noteol</c></tag>

      <item>This option specifies that the end of the subject string
      is not the end of a line, so the dollar metacharacter should not
      match it nor (except in multiline mode) a newline immediately
      before it. Setting this without <c>multiline</c> (at compile time)
      causes dollar never to match. This option affects only the
      behavior of the dollar metacharacter. It does not affect \Z or
      \z.</item>

      <tag><c>report_errors</c></tag>

      <item><p>This option gives better control of the error handling in <c>re:run/3</c>. When it is given, compilation errors (if the regular expression isn't already compiled) as well as run-time errors are explicitly returned as an error tuple.</p> 
      <p>The possible run-time errors are:</p>
      <taglist>
	<tag><c>match_limit</c></tag>

	<item>The PCRE library sets a limit on how many times the
	internal match function can be called. The default value for
	this is 10000000 in the library compiled for Erlang. If
	<c>{error, match_limit}</c> is returned, it means that the
	execution of the regular expression has reached this
	limit. Normally this is to be regarded as a <c>nomatch</c>,
	which is the default return value when this happens, but by
	specifying <c>report_errors</c>, you will get informed when
	the match fails due to to many internal calls.</item>

	<tag><c>match_limit_recursion</c></tag>

	<item>This error is very similar to <c>match_limit</c>, but
	occurs when the internal match function of PCRE is
	"recursively" called more times than the
	"match_limit_recursion" limit, which is by default 10000000 as
	well. Note that as long as the <c>match_limit</c> and
	<c>match_limit_default</c> values are kept at the default
	values, the <c>match_limit_recursion</c> error can not occur,
	as the <c>match_limit</c> error will occur before that (each
	recursive call is also a call, but not vice versa). Both
	limits can however be changed, either by setting limits
	directly in the regular expression string (see reference
	section below) or by giving options to <c>re:run/3</c></item>

      </taglist>
      <p>It is important to understand that what is referred to as
      "recursion" when limiting matches is not actually recursion on
      the C stack of the Erlang machine, neither is it recursion on
      the Erlang process stack. The version of PCRE compiled into the
      Erlang VM uses machine "heap" memory to store values that needs to be
      kept over recursion in regular expression matches.</p>
      </item>
      <tag><c>{match_limit, integer() >= 0}</c></tag>

      <item><p>This option limits the execution time of a match in an
      implementation-specific way. It is described in the following
      way by the PCRE documentation:</p>

      <code>
The match_limit field provides a means of preventing PCRE from using
up a vast amount of resources when running patterns that are not going
to match, but which have a very large number of possibilities in their
search trees. The classic example is a pattern that uses nested
unlimited repeats.

Internally, pcre_exec() uses a function called match(), which it calls
repeatedly (sometimes recursively). The limit set by match_limit is
imposed on the number of times this function is called during a match,
which has the effect of limiting the amount of backtracking that can
take place. For patterns that are not anchored, the count restarts
from zero for each position in the subject string.</code>

      <p>This means that runaway regular expression matches can fail
      faster if the limit is lowered using this option. The default
      value compiled into the Erlang virtual machine is 10000000</p>

      <note><p>This option does in no way affect the execution of the
      Erlang virtual machine in terms of "long running
      BIF's". <c>re:run</c> always give control back to the scheduler
      of Erlang processes at intervals that ensures the real time
      properties of the Erlang system.</p></note>
      </item>
      
      <tag><c>{match_limit_recursion, integer() >= 0}</c></tag>

      <item><p>This option limits the execution time and memory
      consumption of a match in an implementation-specific way, very
      similar to <c>match_limit</c>. It is described in the following
      way by the PCRE documentation:</p>

      <code>
The match_limit_recursion field is similar to match_limit, but instead
of limiting the total number of times that match() is called, it
limits the depth of recursion. The recursion depth is a smaller number
than the total number of calls, because not all calls to match() are
recursive. This limit is of use only if it is set smaller than
match_limit.

Limiting the recursion depth limits the amount of machine stack that
can be used, or, when PCRE has been compiled to use memory on the heap
instead of the stack, the amount of heap memory that can be
used.</code>

      <p>The Erlang virtual machine uses a PCRE library where heap
      memory is used when regular expression match recursion happens,
      why this limits the usage of machine heap, not C stack.</p>

      <p>Specifying a lower value may result in matches with deep recursion failing, when they should actually have matched:</p>
      <code type="none">
1&gt; re:run("aaaaaaaaaaaaaz","(a+)*z").
{match,[{0,14},{0,13}]}
2&gt; re:run("aaaaaaaaaaaaaz","(a+)*z",[{match_limit_recursion,5}]).
nomatch
3&gt; re:run("aaaaaaaaaaaaaz","(a+)*z",[{match_limit_recursion,5},report_errors]).
{error,match_limit_recursion}</code>

      <p>This option, as well as the <c>match_limit</c> option should
      only be used in very rare cases. Understanding of the PCRE
      library internals is recommended before tampering with these
      limits.</p>
      </item>

      <tag><c>{offset, integer() >= 0}</c></tag>

      <item>Start matching at the offset (position) given in the
      subject string. The offset is zero-based, so that the default is
      <c>{offset,0}</c> (all of the subject string).</item>

      <tag><c>{newline, <anno>NLSpec</anno>}</c></tag>
      <item>
      <p>Override the default definition of a newline in the subject string, which is LF (ASCII 10) in Erlang.</p>
      <taglist>
        <tag><c>cr</c></tag>
        <item>Newline is indicated by a single character CR (ASCII 13)</item>
        <tag><c>lf</c></tag>
        <item>Newline is indicated by a single character LF (ASCII 10), the default</item>
        <tag><c>crlf</c></tag>
        <item>Newline is indicated by the two-character CRLF (ASCII 13 followed by ASCII 10) sequence.</item>
        <tag><c>anycrlf</c></tag>
        <item>Any of the three preceding sequences should be recognized.</item>
        <tag><c>any</c></tag>
        <item>Any of the newline sequences above, plus the Unicode sequences VT (vertical tab, U+000B), FF (formfeed, U+000C), NEL (next line, U+0085), LS (line separator, U+2028), and PS (paragraph separator, U+2029). </item>
      </taglist>
      </item>
      <tag><c>bsr_anycrlf</c></tag>
      <item>Specifies specifically that \R is to match only the cr, lf or crlf sequences, not the Unicode specific newline characters. (overrides compilation option)</item>
      <tag><c>bsr_unicode</c></tag>
      <item>Specifies specifically that \R is to match all the Unicode newline characters (including crlf etc, the default).(overrides compilation option)</item>

      <tag><c>{capture, <anno>ValueSpec</anno>}</c>/<c>{capture, <anno>ValueSpec</anno>, <anno>Type</anno>}</c></tag>
      <item>

      <p>Specifies which captured substrings are returned and in what
      format. By default,
      <c>re:run/3</c> captures all of the matching part of the
      substring as well as all capturing subpatterns (all of the
      pattern is automatically captured). The default return type is
      (zero-based) indexes of the captured parts of the string, given as
      <c>{Offset,Length}</c> pairs (the <c>index</c> <c><anno>Type</anno></c> of
      capturing).</p>

      <p>As an example of the default behavior, the following call:</p>

      <code>    re:run("ABCabcdABC","abcd",[]).</code>
      
      <p>returns, as first and only captured string the matching part of the subject ("abcd" in the middle) as a index pair <c>{3,4}</c>, where character positions are zero based, just as in offsets. The return value of the call above would then be:</p>
      <code>    {match,[{3,4}]}</code>
      <p>Another (and quite common) case is where the regular expression matches all of the subject, as in:</p>
      <code>    re:run("ABCabcdABC",".*abcd.*",[]).</code>
      <p>where the return value correspondingly will point out all of the string, beginning at index 0 and being 10 characters long:</p>
      <code>    {match,[{0,10}]}</code>

      <p>If the regular expression contains capturing subpatterns,
      like in the following case:</p>

      <code>    re:run("ABCabcdABC",".*(abcd).*",[]).</code>
      
      <p>all of the matched subject is captured, as
      well as the captured substrings:</p>

      <code>    {match,[{0,10},{3,4}]}</code>

      <p>the complete matching pattern always giving the first return value in the
      list and the rest of the subpatterns being added in the
      order they occurred in the regular expression.</p>

      <p>The capture tuple is built up as follows:</p>
      <taglist>
      <tag><c><anno>ValueSpec</anno></c></tag>
      <item><p>Specifies which captured (sub)patterns are to be returned. The <c><anno>ValueSpec</anno></c> can either be an atom describing a predefined set of return values, or a list containing either the indexes or the names of specific subpatterns to return.</p>
      <p>The predefined sets of subpatterns are:</p>
        <taglist>
        <tag><c>all</c></tag>
        <item>All captured subpatterns including the complete matching string. This is the default.</item>
        <tag><c>all_names</c></tag>
        <item>All <em>named</em> subpatterns in the regular expression, as if a <c>list()</c> 
	of all the names <em>in alphabetical order</em> was given. The list of all names can also be retrieved with the <seealso marker="#inspect/2">inspect/2</seealso> function.</item>
        <tag><c>first</c></tag>
        <item>Only the first captured subpattern, which is always the complete matching part of the subject. All explicitly captured subpatterns are discarded.</item>
        <tag><c>all_but_first</c></tag>
        <item>All but the first matching subpattern, i.e. all explicitly captured subpatterns, but not the complete matching part of the subject string. This is useful if the regular expression as a whole matches a large part of the subject, but the part you're interested in is in an explicitly captured subpattern. If the return type is <c>list</c> or <c>binary</c>, not returning subpatterns you're not interested in is a good way to optimize.</item>
        <tag><c>none</c></tag>
        <item>Do not return matching subpatterns at all, yielding the single atom <c>match</c> as the return value of the function when matching successfully instead of the <c>{match, list()}</c> return. Specifying an empty list gives the same behavior.</item>
        </taglist>
      <p>The value list is a list of indexes for the subpatterns to return, where index 0 is for all of the pattern, and 1 is for the first explicit capturing subpattern in the regular expression, and so forth. When using named captured subpatterns (see below) in the regular expression, one can use <c>atom()</c>s or <c>string()</c>s to specify the subpatterns to be returned. For example, consider the regular expression:</p>
      <code>    ".*(abcd).*"</code>
      <p>matched against the string "ABCabcdABC", capturing only the "abcd" part (the first explicit subpattern):</p>
      <code>    re:run("ABCabcdABC",".*(abcd).*",[{capture,[1]}]).</code>
      <p>The call will yield the following result:</p>
      <code>    {match,[{3,4}]}</code>
      <p>as the first explicitly captured subpattern is "(abcd)", matching "abcd" in the subject, at (zero-based) position 3, of length 4.</p>
      <p>Now consider the same regular expression, but with the subpattern explicitly named 'FOO':</p>
      <code>    ".*(?&lt;FOO&gt;abcd).*"</code>
      <p>With this expression, we could still give the index of the subpattern with the following call:</p>
      <code>    re:run("ABCabcdABC",".*(?&lt;FOO&gt;abcd).*",[{capture,[1]}]).</code>
      <p>giving the same result as before. But, since the subpattern is named, we can also specify its name in the value list:</p>
      <code>    re:run("ABCabcdABC",".*(?&lt;FOO&gt;abcd).*",[{capture,['FOO']}]).</code>
      <p>which would yield the same result as the earlier examples, namely:</p>
      <code>    {match,[{3,4}]}</code>

      <p>The values list might specify indexes or names not present in
      the regular expression, in which case the return values vary
      depending on the type. If the type is <c>index</c>, the tuple
      <c>{-1,0}</c> is returned for values having no corresponding
      subpattern in the regexp, but for the other types
      (<c>binary</c> and <c>list</c>), the values are the empty binary
      or list respectively.</p>

      </item>      
      <tag><c><anno>Type</anno></c></tag>
      <item><p>Optionally specifies how captured substrings are to be returned. If omitted, the default of <c>index</c> is used. The <c><anno>Type</anno></c> can be one of the following:</p>
        <taglist>
        <tag><c>index</c></tag> 
        <item>Return captured substrings as pairs of byte indexes into the subject string and length of the matching string in the subject (as if the subject string was flattened with <c>iolist_to_binary/1</c> or <c>unicode:characters_to_binary/2</c> prior to matching). Note that the <c>unicode</c> option results in <em>byte-oriented</em> indexes in a (possibly virtual) <em>UTF-8 encoded</em> binary. A byte index tuple <c>{0,2}</c> might therefore represent one or two characters when <c>unicode</c> is in effect. This might seem counter-intuitive, but has been deemed the most effective and useful way to way to do it. To return lists instead might result in simpler code if that is desired. This return type is the default.</item>
        <tag><c>list</c></tag> 
        <item>Return matching substrings as lists of characters (Erlang <c>string()</c>s). It the <c>unicode</c> option is used in combination with the \C sequence in the regular expression, a captured subpattern can contain bytes that are not valid UTF-8 (\C matches bytes regardless of character encoding). In that case the <c>list</c> capturing may result in the same types of tuples that <c>unicode:characters_to_list/2</c> can return, namely three-tuples with the tag <c>incomplete</c> or <c>error</c>, the successfully converted characters and the invalid UTF-8 tail of the conversion as a binary. The best strategy is to avoid using the \C sequence when capturing lists.</item>
        <tag><c>binary</c></tag> 
        <item>Return matching substrings as binaries. If the <c>unicode</c> option is used, these binaries are in UTF-8. If the \C sequence is used together with <c>unicode</c> the binaries may be invalid UTF-8.</item>
        </taglist>
      </item>
      </taglist>
      <p>In general, subpatterns that were not assigned a value in the match are returned as the tuple <c>{-1,0}</c> when <c>type</c> is <c>index</c>. Unassigned subpatterns are returned as the empty binary or list, respectively, for other return types. Consider the regular expression:</p>
<code>    ".*((?&lt;FOO&gt;abdd)|a(..d)).*"</code>
      <p>There are three explicitly capturing subpatterns, where the opening parenthesis position determines the order in the result, hence <c>((?&lt;FOO&gt;abdd)|a(..d))</c> is subpattern index 1, <c>(?&lt;FOO&gt;abdd)</c> is subpattern index 2 and <c>(..d)</c> is subpattern index 3. When matched against the following string:</p>
<code>    "ABCabcdABC"</code>
      <p>the subpattern at index 2 won't match, as "abdd" is not present in the string, but the complete pattern matches (due to the alternative <c>a(..d)</c>. The subpattern at index 2 is therefore unassigned and the default return value will be:</p>
<code>    {match,[{0,10},{3,4},{-1,0},{4,3}]}</code>
      <p>Setting the capture <c><anno>Type</anno></c> to <c>binary</c> would give the following:</p>
<code>    {match,[&lt;&lt;"ABCabcdABC"&gt;&gt;,&lt;&lt;"abcd"&gt;&gt;,&lt;&lt;&gt;&gt;,&lt;&lt;"bcd"&gt;&gt;]}</code>
      <p>where the empty binary (<c>&lt;&lt;&gt;&gt;</c>) represents the unassigned subpattern. In the <c>binary</c> case, some information about the matching is therefore lost, the <c>&lt;&lt;&gt;&gt;</c> might just as well be an empty string captured.</p>
      <p>If differentiation between empty matches and non existing subpatterns is necessary, use the <c>type</c> <c>index</c>
      and do the conversion to the final type in Erlang code.</p>
      
      <p>When the option <c>global</c> is given, the <c>capture</c>
      specification affects each match separately, so that:</p>

      <code>    re:run("cacb","c(a|b)",[global,{capture,[1],list}]).</code>

      <p>gives the result:</p>

      <code>    {match,[["a"],["b"]]}</code>      

      </item>
      </taglist>
      <p>The options solely affecting the compilation step are described in the <c>re:compile/2</c> function.</p>
      </desc>
    </func>
   <func>
      <name name="replace" arity="3"/>
      <fsummary>Match a subject against regular expression and replace matching elements with Replacement</fsummary>
      <desc>
      <p>The same as <c>replace(<anno>Subject</anno>,<anno>RE</anno>,<anno>Replacement</anno>,[])</c>.</p>
      </desc>
    </func> 
    <func>
      <name name="replace" arity="4"/>
      <fsummary>Match a subject against regular expression and replace matching elements with Replacement</fsummary>
      <desc>
      <p>Replaces the matched part of the <c><anno>Subject</anno></c> string with the contents of <c><anno>Replacement</anno></c>.</p>
      <p>The permissible options are the same as for <c>re:run/3</c>, except that the <c>capture</c> option is not allowed.
      Instead a <c>{return, <anno>ReturnType</anno>}</c> is present. The default return type is <c>iodata</c>, constructed in a
      way to minimize copying. The <c>iodata</c> result can be used directly in many I/O-operations. If a flat <c>list()</c> is
      desired, specify <c>{return, list}</c> and if a binary is preferred, specify <c>{return, binary}</c>.</p>

      <p>As in the <c>re:run/3</c> function, an <c>mp()</c> compiled
      with the <c>unicode</c> option requires the <c><anno>Subject</anno></c> to be
      a Unicode <c>charlist()</c>. If compilation is done implicitly
      and the <c>unicode</c> compilation option is given to this
      function, both the regular expression and the <c><anno>Subject</anno></c>
      should be given as valid Unicode <c>charlist()</c>s.</p>

      <p>The replacement string can contain the special character
      <c>&amp;</c>, which inserts the whole matching expression in the
      result, and the special sequence <c>\</c>N (where N is an integer &gt; 0),
      <c>\g</c>N or <c>\g{</c>N<c>}</c> resulting in the subexpression number N will be
      inserted in the result. If no subexpression with that number is
      generated by the regular expression, nothing is inserted.</p>
      <p>To insert an <c>&amp;</c> or <c>\</c> in the result, precede it
      with a <c>\</c>. Note that Erlang already gives a special
      meaning to <c>\</c> in literal strings, so a single <c>\</c>
      has to be written as <c>"\\"</c> and therefore a double <c>\</c>
      as <c>"\\\\"</c>. Example:</p>
      <code>    re:replace("abcd","c","[&amp;]",[{return,list}]).</code>
      <p>gives</p>
      <code>    "ab[c]d"</code>
      <p>while</p>
      <code>    re:replace("abcd","c","[\\&amp;]",[{return,list}]).</code>
      <p>gives</p>
      <code>    "ab[&amp;]d"</code>
      <p>As with <c>re:run/3</c>, compilation errors raise the <c>badarg</c>
      exception, <c>re:compile/2</c> can be used to get more information
      about the error.</p>
      </desc>
    </func>
    <func>
      <name name="split" arity="2"/>
      <fsummary>Split a string by tokens specified as a regular expression</fsummary>
      <desc>
      <p>The same as <c>split(<anno>Subject</anno>,<anno>RE</anno>,[])</c>.</p>
      </desc>
    </func>

    <func>
      <name name="split" arity="3"/>
      <fsummary>Split a string by tokens specified as a regular expression</fsummary>
      <type_desc variable="CompileOpt">See <seealso marker="#compile_options">compile/2</seealso> above.</type_desc>
      <desc>
      <p>This function splits the input into parts by finding tokens
      according to the regular expression supplied.</p>

      <p>The splitting is done basically by running a global regexp match and 
      dividing the initial string wherever a match occurs. The matching part 
      of the string is removed from the output.</p>

      <p>As in the <c>re:run/3</c> function, an <c>mp()</c> compiled
      with the <c>unicode</c> option requires the <c><anno>Subject</anno></c> to be
      a Unicode <c>charlist()</c>. If compilation is done implicitly
      and the <c>unicode</c> compilation option is given to this
      function, both the regular expression and the <c><anno>Subject</anno></c>
      should be given as valid Unicode <c>charlist()</c>s.</p>

      <p>The result is given as a list of &quot;strings&quot;, the
      preferred datatype given in the <c>return</c> option (default iodata).</p> 
      <p>If subexpressions are given in the regular expression, the
      matching subexpressions are returned in the resulting list as
      well. An example:</p>

<code>    re:split("Erlang","[ln]",[{return,list}]).</code>

      <p>will yield the result:</p>

<code>    ["Er","a","g"]</code>

      <p>while</p>

<code>    re:split("Erlang","([ln])",[{return,list}]).</code>

      <p>will yield</p>

<code>    ["Er","l","a","n","g"]</code>

      <p>The text matching the subexpression (marked by the parentheses 
      in the regexp) is 
      inserted in the result list where it was found. In effect this means 
      that concatenating the result of a split where the whole regexp is a 
      single subexpression (as in the example above) will always result in 
      the original string.</p>

      <p>As there is no matching subexpression for the last part in
      the example (the &quot;g&quot;), there is nothing inserted after
      that. To make the group of strings and the parts matching the
      subexpressions more obvious, one might use the <c>group</c>
      option, which groups together the part of the subject string with the
      parts matching the subexpressions when the string was split:</p>

<code>    re:split("Erlang","([ln])",[{return,list},group]).</code>

      <p>gives:</p>

<code>    [["Er","l"],["a","n"],["g"]]</code>      

      <p>Here the regular expression matched first the &quot;l&quot;,
      causing &quot;Er&quot; to be the first part in the result. When
      the regular expression matched, the (only) subexpression was
      bound to the &quot;l&quot;, so the &quot;l&quot; is inserted
      in the group together with &quot;Er&quot;. The next match is of
      the &quot;n&quot;, making &quot;a&quot; the next part to be
      returned. Since the subexpression is bound to the substring
      &quot;n&quot; in this case, the &quot;n&quot; is inserted into
      this group. The last group consists of the rest of the string,
      as no more matches are found.</p>


      <p>By default, all parts of the string, including the empty
      strings, are returned from the function. For example:</p>

<code>    re:split("Erlang","[lg]",[{return,list}]).</code>

      <p>will return:</p>

<code>    ["Er","an",[]]</code>

      <p>since the matching of the &quot;g&quot; in the end of the string
      leaves an empty rest which is also returned. This behaviour
      differs from the default behaviour of the split function in
      Perl, where empty strings at the end are by default removed. To
      get the
      &quot;trimming&quot; default behavior of Perl, specify
      <c>trim</c> as an option:</p>

<code>    re:split("Erlang","[lg]",[{return,list},trim]).</code>

      <p>The result will be:</p>

<code>    ["Er","an"]</code>
      
      <p>The &quot;trim&quot; option in effect says; &quot;give me as
      many parts as possible except the empty ones&quot;, which might
      be useful in some circumstances. You can also specify how many
      parts you want, by specifying <c>{parts,</c>N<c>}</c>:</p>

<code>    re:split("Erlang","[lg]",[{return,list},{parts,2}]).</code>
          
      <p>This will give:</p>

<code>    ["Er","ang"]</code>

      <p>Note that the last part is &quot;ang&quot;, not
      &quot;an&quot;, as we only specified splitting into two parts,
      and the splitting stops when enough parts are given, which is
      why the result differs from that of <c>trim</c>.</p>

      <p>More than three parts are not possible with this indata, so</p>

<code>    re:split("Erlang","[lg]",[{return,list},{parts,4}]).</code>

      <p>will give the same result as the default, which is to be
      viewed as &quot;an infinite number of parts&quot;.</p> 

      <p>Specifying <c>0</c> as the number of parts gives the same
      effect as the option <c>trim</c>. If subexpressions are
      captured, empty subexpression matches at the end are also
      stripped from the result if <c>trim</c> or <c>{parts,0}</c> is
      specified.</p>

      <p>If you are familiar with Perl, the <c>trim</c>
      behaviour corresponds exactly to the Perl default, the
      <c>{parts,N}</c> where N is a positive integer corresponds
      exactly to the Perl behaviour with a positive numerical third
      parameter and the default behaviour of <c>re:split/3</c> corresponds
      to that when the Perl routine is given a negative integer as the
      third parameter.</p>

      <p>Summary of options not previously described for the <c>re:run/3</c> function:</p>
      <taglist>
      <tag>{return,<anno>ReturnType</anno>}</tag>
      <item><p>Specifies how the parts of the original string are presented in the result list. The possible types are:</p>
      <taglist>
        <tag>iodata</tag>
	<item>The variant of <c>iodata()</c> that gives the least copying of data with the current implementation (often a binary, but don't depend on it).</item>
	<tag>binary</tag>
	<item>All parts returned as binaries.</item>
	<tag>list</tag>
	<item>All parts returned as lists of characters (&quot;strings&quot;).</item>
	</taglist>
      </item>
      <tag>group</tag>
      <item>

      <p>Groups together the part of the string with
      the parts of the string matching the subexpressions of the
      regexp.</p>
      <p>The return value from the function will in this case be a
      <c>list()</c> of <c>list()</c>s.  Each sublist begins with the
      string picked out of the subject string, followed by the parts
      matching each of the subexpressions in order of occurrence in the
      regular expression.</p>

      </item>
      <tag>{parts,N}</tag>
      <item>

      <p>Specifies the number of parts the subject string is to be
      split into.</p>

      <p>The number of parts should be a positive integer for a specific maximum on the
      number of parts and <c>infinity</c> for the maximum number of
      parts possible (the default). Specifying <c>{parts,0}</c> gives as many parts as
      possible disregarding empty parts at the end, the same as
      specifying <c>trim</c></p>
      </item>
      <tag>trim</tag>
      <item>

      <p>Specifies that empty parts at the end of the result list are
      to be disregarded. The same as specifying <c>{parts,0}</c>. This
      corresponds to the default behaviour of the <c>split</c>
      built in function in Perl.</p>
      </item>
      </taglist>

      </desc>
    </func>     
    </funcs>
  
  <section>
    <title>PERL LIKE REGULAR EXPRESSIONS SYNTAX</title>
    <p><marker id="regexp_syntax"></marker>
    The following sections contain reference material for the
    regular expressions used by this module. The regular expression
    reference is based on the PCRE documentation, with changes in
    cases where the re module behaves differently to the PCRE library.</p>
  </section>

<section><title>PCRE regular expression details</title>

<p>The syntax and semantics of the regular expressions that are supported by PCRE
are described in detail below. Perl's regular expressions are described in its own documentation, and
regular expressions in general are covered in a number of books, some of which
have copious examples. Jeffrey Friedl's "Mastering Regular Expressions",
published by O'Reilly, covers regular expressions in great detail. This
description of PCRE's regular expressions is intended as reference material.</p>
<p>The reference material is divided into the following sections:</p>
<list>
<item><seealso marker="#sect1">Special start-of-pattern items</seealso></item>
<item><seealso marker="#sect2">Characters and metacharacters</seealso></item>
<item><seealso marker="#sect3">Backslash</seealso></item>
<item><seealso marker="#sect4">Circumflex and dollar</seealso></item>
<item><seealso marker="#sect5">Full stop (period, dot) and \N</seealso></item>
<item><seealso marker="#sect6">Matching a single data unit</seealso></item>
<item><seealso marker="#sect7">Square brackets and character classes</seealso></item>
<item><seealso marker="#sect8">POSIX character classes</seealso></item>
<item><seealso marker="#sect9">Vertical bar</seealso></item>
<item><seealso marker="#sect10">Internal option setting</seealso></item>
<item><seealso marker="#sect11">Subpatterns</seealso></item>
<item><seealso marker="#sect12">Duplicate subpattern numbers</seealso></item>
<item><seealso marker="#sect13">Named subpatterns</seealso></item>
<item><seealso marker="#sect14">Repetition</seealso></item>
<item><seealso marker="#sect15">Atomic grouping and possessive quantifiers</seealso></item>
<item><seealso marker="#sect16">Back references</seealso></item>
<item><seealso marker="#sect17">Assertions</seealso></item>
<item><seealso marker="#sect18">Conditional subpatterns</seealso></item>
<item><seealso marker="#sect19">Comments</seealso></item>
<item><seealso marker="#sect20">Recursive patterns</seealso></item>
<item><seealso marker="#sect21">Subpatterns as subroutines</seealso></item>
<item><seealso marker="#sect22">Oniguruma subroutine syntax</seealso></item>
<!-- XXX C Interface
<item><seealso marker="#sect22">Callouts</seealso></item>
-->
<item><seealso marker="#sect23">Backtracking control</seealso></item>
</list>

</section>


<section><marker id="sect1"></marker><title>Special start-of-pattern items</title>

<p>A number of options that can be passed to <c>re:compile/2</c> can also be set
by special items at the start of a pattern. These are not Perl-compatible, but
are provided to make these options accessible to pattern writers who are not
able to change the program that processes the pattern. Any number of these
items may appear, but they must all be together right at the start of the
pattern string, and the letters must be in upper case.</p>

<p><em>UTF support</em></p>
<p>
Unicode support is basically UTF-8 based. To use Unicode characters, you either
call <c>re:compile/2</c>/<c>re:run/3</c> with the <c>unicode</c> option, or the
 pattern must start with one of these special sequences:</p>
<quote>
<p>    (*UTF8)</p>
<p>    (*UTF)</p>
</quote>

<p>Both options give the same effect, the input string is interpreted
as UTF-8. Note that with these instructions, the automatic conversion
of lists to UTF-8 is not performed by the <c>re</c> functions, why
using these options is not recommended. Add the <c>unicode</c> option
when running <c>re:compile/2</c> instead.</p>

<p>
Some applications that allow their users to supply patterns may wish to
restrict them to non-UTF data for security reasons. If the <c>never_utf</c>
option is set at compile time, (*UTF) etc. are not allowed, and their
appearance causes an error.
</p>

<p><em>Unicode property support</em></p>
<p>Another special sequence that may appear at the start of a pattern is</p>
<quote>
<p>    (*UCP)</p>
</quote>
<p>This has the same effect as setting the <c>ucp</c> option: it causes sequences
such as \d and \w to use Unicode properties to determine character types,
instead of recognizing only characters with codes less than 256 via a lookup
table.
</p>

<p><em>Disabling start-up optimizations</em></p>
<p>
If a pattern starts with (*NO_START_OPT), it has the same effect as setting the
<c>no_Start_optimize</c> option at compile time.</p>

<p><em>Newline conventions</em></p>

<p>PCRE supports 
five 
different conventions for indicating line breaks in
strings: a single CR (carriage return) character, a single LF (linefeed)
character, the two-character sequence CRLF
, any of the three preceding, or any
Unicode newline sequence.</p> 

<p>It is also possible to specify a newline convention by starting a pattern
string with one of the following five sequences:</p>

<taglist>
  <tag>(*CR)</tag>        <item>carriage return</item>
  <tag>(*LF)</tag>        <item>linefeed</item>
  <tag>(*CRLF)</tag>      <item>carriage return, followed by linefeed</item>
  <tag>(*ANYCRLF)</tag>   <item>any of the three above</item>
  <tag>(*ANY)</tag>       <item>all Unicode newline sequences</item>
</taglist>

<p>These override the default and the options given to <c>re:compile/2</c>. For
example, the pattern:</p>

<quote>  
<p>    (*CR)a.b</p>
</quote>

<p>changes the convention to CR. That pattern matches "a\nb" because LF is no
longer a newline. If more than one of them is present, the last one
is used.</p>

<p>The newline convention affects where the circumflex and dollar assertions are
true. It also affects the interpretation of the dot metacharacter when
<c>dotall</c> is not set, and the behaviour of \N. However, it does not affect
what the \R escape sequence matches. By default, this is any Unicode newline
sequence, for Perl compatibility. However, this can be changed; see the
description of \R in the section entitled

<em>"Newline sequences"</em>

below. A change of \R setting can be combined with a change of newline
convention.</p>

<p><em>Setting match and recursion limits</em></p>

<p>The caller of <c>re:run/3</c> can set a limit on the number of times the internal match() function is called and on the maximum depth of recursive calls. These facilities are provided to catch runaway matches that are provoked by patterns with huge matching trees (a typical example is a pattern with nested unlimited repeats) and to avoid running out of system stack by too much recursion. When one of these limits is reached, pcre_exec() gives an error return. The limits can also be set by items at the start of the pattern of the form</p>
<quote>
<p>    (*LIMIT_MATCH=d)</p>
<p>    (*LIMIT_RECURSION=d)</p>
</quote>
<p>where d is any number of decimal digits. However, the value of the setting must be less than the value set by the caller of <c>re:run/3</c> for it to have any effect. In other words, the pattern writer can lower the limit set by the programmer, but not raise it. If there is more than one setting of one of these limits, the lower value is used.</p>

<p>The current default value for both the limits are 10000000 in the Erlang
VM. Note that the recursion limit does not actually affect the stack
depth of the VM, as PCRE for Erlang is compiled in such a way that the
match function never does recursion on the "C-stack".</p> 

</section>

<section><marker id="sect2"></marker><title>Characters and metacharacters</title>
<!-- .rs -->

<p>A regular expression is a pattern that is matched against a subject
string from left to right. Most characters stand for themselves in a
pattern, and match the corresponding characters in the subject. As a
trivial example, the pattern</p>

<quote>  
<p>    The quick brown fox</p>
</quote>

<p>matches a portion of a subject string that is identical to
itself. When caseless matching is specified (the <c>caseless</c>
option), letters are matched independently of case.</p>

<p>The power of regular expressions comes from the ability to include
alternatives and repetitions in the pattern. These are encoded in the
pattern by the use of <em>metacharacters</em>, which do not stand for
themselves but instead are interpreted in some special way.</p>

<p>There are two different sets of metacharacters: those that are recognized
anywhere in the pattern except within square brackets, and those that are
recognized within square brackets. Outside square brackets, the metacharacters
are as follows:</p>

<taglist>
  <tag>\</tag>      <item>general escape character with several uses</item>
  <tag>^</tag>      <item>assert start of string (or line, in multiline mode)</item>
  <tag>$</tag>      <item>assert end of string (or line, in multiline mode)</item>
  <tag>.</tag>      <item>match any character except newline (by default)</item>
  <tag>[</tag>      <item>start character class definition</item>
  <tag>|</tag>      <item>start of alternative branch</item>
  <tag>(</tag>      <item>start subpattern</item>
  <tag>)</tag>      <item>end subpattern</item>
  <tag>?</tag>      <item>extends the meaning of (,
                          also 0 or 1 quantifier,
                          also quantifier minimizer</item>
  <tag>*</tag>      <item>0 or more quantifier</item>
  <tag>+</tag>      <item>1 or more quantifier,
                          also "possessive quantifier"</item>
  <tag>{</tag>      <item>start min/max quantifier</item>
</taglist>

<p>Part of a pattern that is in square brackets is called a "character class". In
a character class the only metacharacters are:</p>

<taglist>
  <tag>\</tag>      <item>general escape character</item>
  <tag>^</tag>      <item>negate the class, but only if the first character</item>
  <tag>-</tag>      <item>indicates character range</item>
  <tag>[</tag>      <item>POSIX character class (only if followed by POSIX
           syntax)</item>
  <tag>]</tag>      <item>terminates the character class</item>
</taglist>

<p>The following sections describe the use of each of the metacharacters.</p>


</section>

<section><marker id="sect3"></marker><title>Backslash</title>


<p>The backslash character has several uses. Firstly, if it is followed by a
character that is not a number or a letter, it takes away any special meaning that character
may have. This use of backslash as an escape character applies both inside and
outside character classes.</p>

<p>For example, if you want to match a * character, you write \* in the pattern.
This escaping action applies whether or not the following character would
otherwise be interpreted as a metacharacter, so it is always safe to precede a
non-alphanumeric with backslash to specify that it stands for itself. In
particular, if you want to match a backslash, you write \\.</p>

<p>In <c>unicode</c> mode, only ASCII numbers and letters have any special meaning after a
backslash. All other characters (in particular, those whose codepoints are
greater than 127) are treated as literals.</p>

<p>If a pattern is compiled with the <c>extended</c> option, white space in the
pattern (other than in a character class) and characters between a # outside
a character class and the next newline are ignored. An escaping backslash can
be used to include a white space or # character as part of the pattern.</p>

<p>If you want to remove the special meaning from a sequence of characters, you
can do so by putting them between \Q and \E. This is different from Perl in 
that $ and @ are handled as literals in \Q...\E sequences in PCRE, whereas in
Perl, $ and @ cause variable interpolation. Note the following examples:</p>
<code type="none">
  Pattern           PCRE matches   Perl matches

  \Qabc$xyz\E       abc$xyz        abc followed by the contents of $xyz
  \Qabc\$xyz\E      abc\$xyz       abc\$xyz
  \Qabc\E\$\Qxyz\E  abc$xyz        abc$xyz</code>


<p>The \Q...\E sequence is recognized both inside and outside
character classes. An isolated \E that is not preceded by \Q is
ignored. If \Q is not followed by \E later in the pattern, the literal
interpretation continues to the end of the pattern (that is, \E is
assumed at the end). If the isolated \Q is inside a character class,
this causes an error, because the character class is not
terminated.</p>

<p><em>Non-printing characters</em></p>

<p>A second use of backslash provides a way of encoding non-printing characters
in patterns in a visible manner. There is no restriction on the appearance of
non-printing characters, apart from the binary zero that terminates a pattern,
but when a pattern is being prepared by text editing, it is often easier to use
one of the following escape sequences than the binary character it represents:</p>

<taglist>  
  <tag>\a</tag>        <item>alarm, that is, the BEL character (hex 07)</item>
  <tag>\cx</tag>       <item>"control-x", where x is any ASCII character</item>
  <tag>\e </tag>       <item>escape (hex 1B)</item>
  <tag>\f</tag>        <item>form feed (hex 0C)</item>
  <tag>\n</tag>        <item>linefeed (hex 0A)</item>
  <tag>\r</tag>        <item>carriage return (hex 0D)</item>
  <tag>\t </tag>       <item>tab (hex 09)</item>
  <tag>\ddd</tag>      <item>character with octal code ddd, or back reference</item>
  <tag>\xhh </tag>     <item>character with hex code hh</item>
  <tag>\x{hhh..}</tag> <item>character with hex code hhh..</item>
</taglist>

<p>The precise effect of \cx on ASCII characters is as follows: if x is a lower
case letter, it is converted to upper case. Then bit 6 of the character (hex
40) is inverted. Thus \cA to \cZ become hex 01 to hex 1A (A is 41, Z is 5A),
but \c{ becomes hex 3B ({ is 7B), and \c; becomes hex 7B (; is 3B). If the
data item (byte or 16-bit value) following \c has a value greater than 127, a
compile-time error occurs. This locks out non-ASCII characters in all modes.</p>

<p>The \c facility was designed for use with ASCII characters, but with the
extension to Unicode it is even less useful than it once was.</p>

<p>By default, after \x, from zero to two hexadecimal digits are read (letters
can be in upper or lower case). Any number of hexadecimal digits may appear
between \x{ and }, but the character code is constrained as follows:</p>
<taglist>
  <tag>8-bit non-Unicode mode</tag>    <item>less than 0x100</item>
  <tag>8-bit UTF-8 mode</tag>          <item>less than 0x10ffff and a valid codepoint</item>
</taglist>
<p>Invalid Unicode codepoints are the range 0xd800 to 0xdfff (the so-called
"surrogate" codepoints), and 0xffef.</p>

<p>If characters other than hexadecimal digits appear between \x{ and }, or if
there is no terminating }, this form of escape is not recognized. Instead, the
initial \x will be interpreted as a basic hexadecimal escape, with no
following digits, giving a character whose value is zero.</p>

<p>Characters whose value is less than 256 can be defined by either of the two
syntaxes for \x. There is no difference in the way they are handled. For
example, \xdc is exactly the same as \x{dc}.</p>

<p>After \0 up to two further octal digits are read. If there are fewer than two
digits, just those that are present are used. Thus the sequence \0\x\07
specifies two binary zeros followed by a BEL character (code value 7). Make
sure you supply two digits after the initial zero if the pattern character that
follows is itself an octal digit.</p>

<p>The handling of a backslash followed by a digit other than 0 is complicated.
Outside a character class, PCRE reads it and any following digits as a decimal
number. If the number is less than 10, or if there have been at least that many
previous capturing left parentheses in the expression, the entire sequence is
taken as a <em>back reference</em>. A description of how this works is given
later, following the discussion of parenthesized subpatterns.</p>


<p>Inside a character class, or if the decimal number is greater than 9 and there
have not been that many capturing subpatterns, PCRE re-reads up to three octal
digits following the backslash, and uses them to generate a data character. Any
subsequent digits stand for themselves. The value of the character is
constrained in the same way as characters specified in hexadecimal.
For example:</p>

<taglist>  
  <tag>\040</tag>   <item>is another way of writing a ASCII space</item>

  <tag>\40</tag>    <item>is the same, provided there are fewer than 40
            previous capturing subpatterns</item>
  <tag>\7</tag>     <item>is always a back reference</item>

  <tag>\11</tag>   <item> might be a back reference, or another way of
            writing a tab</item>
  <tag>\011</tag>   <item>is always a tab</item>
  <tag>\0113</tag>  <item>is a tab followed by the character "3"</item>

  <tag>\113</tag>   <item>might be a back reference, otherwise the
            character with octal code 113</item>

  <tag>\377</tag>   <item>might be a back reference, otherwise
            the value 255 (decimal)</item>

  <tag>\81</tag>    <item>is either a back reference, or a binary zero
            followed by the two characters "8" and "1"</item>
</taglist>

<p>Note that octal values of 100 or greater must not be introduced by
a leading zero, because no more than three octal digits are ever
read.</p>

<p>All the sequences that define a single character value can be used both inside
and outside character classes. In addition, inside a character class, \b is
interpreted as the backspace character (hex 08).</p>
<p>\N is not allowed in a character class. \B, \R, and \X are not special
inside a character class. Like other unrecognized escape sequences, they are
treated as the literal characters "B", "R", and "X". Outside a character class, these
sequences have different meanings.</p>

<p><em>Unsupported escape sequences</em></p>

<p>In Perl, the sequences \l, \L, \u, and \U are recognized by its string
handler and used to modify the case of following characters. PCRE
does not support these escape sequences.</p>

<p><em>Absolute and relative back references</em></p>

<p>The sequence \g followed by an unsigned or a negative number,
optionally enclosed in braces, is an absolute or relative back
reference. A named back reference can be coded as \g{name}. Back
references are discussed later, following the discussion of
parenthesized subpatterns.</p>

<p><em>Absolute and relative subroutine calls</em></p>
<p>For compatibility with Oniguruma, the non-Perl syntax \g followed by a name or
a number enclosed either in angle brackets or single quotes, is an alternative
syntax for referencing a subpattern as a "subroutine". Details are discussed
later.
Note that \g{...} (Perl syntax) and \g&lt;...&gt; (Oniguruma syntax) are <em>not</em>
synonymous. The former is a back reference; the latter is a
subroutine call.</p>

<p><em>Generic character types</em></p>

<p>Another use of backslash is for specifying generic character types:</p>

<taglist>  
  <tag>\d</tag>     <item>any decimal digit</item>
  <tag>\D</tag>     <item>any character that is not a decimal digit</item>
  <tag>\h</tag>     <item>any horizontal white space character</item>
  <tag>\H</tag>     <item>any character that is not a horizontal white space character</item>
  <tag>\s</tag>     <item>any white space character</item>
  <tag>\S</tag>     <item>any character that is not a white space character</item>
  <tag>\v</tag>     <item>any vertical white space character</item>
  <tag>\V</tag>     <item>any character that is not a vertical white space character</item>
  <tag>\w</tag>     <item>any "word" character</item>
  <tag>\W</tag>     <item>any "non-word" character</item>
</taglist>

<p>There is also the single sequence \N, which matches a non-newline character.
This is the same as the "." metacharacter
when <c>dotall</c> is not set. Perl also uses \N to match characters by name;
PCRE does not support this.</p>

<p>Each pair of lower and upper case escape sequences partitions the complete set
of characters into two disjoint sets. Any given character matches one, and only
one, of each pair. The sequences can appear both inside and outside character
classes. They each match one character of the appropriate type. If the current
matching point is at the end of the subject string, all of them fail, because
there is no character to match.</p>

<p>For compatibility with Perl, \s does not match the VT character (code 11).
This makes it different from the POSIX "space" class. The \s characters
are HT (9), LF (10), FF (12), CR (13), and space (32). If "use locale;" is
included in a Perl script, \s may match the VT character. In PCRE, it never
does.</p>

<p>A "word" character is an underscore or any character that is a letter or digit.
By default, the definition of letters and digits is controlled by PCRE's
low-valued character tables, in Erlang's case (and without the <c>unicode</c> option), 
the ISO-Latin-1 character set.</p>

<p>By default, in <c>unicode</c> mode, characters with values greater than 255,
i.e. all characters outside the ISO-Latin-1 character set, never match
\d, \s, or \w, and always match \D, \S, and \W. These sequences retain
their original meanings from before UTF support was available, mainly for
efficiency reasons. However, if the <c>ucp</c> option is set, the behaviour is changed so that Unicode
properties are used to determine character types, as follows:</p>
<taglist>
  <tag>\d</tag>  <item>any character that \p{Nd} matches (decimal digit)</item>
  <tag>\s</tag>  <item>any character that \p{Z} matches, plus HT, LF, FF, CR)</item>
 <tag> \w</tag>  <item>any character that \p{L} or \p{N} matches, plus underscore)</item>
</taglist>
<p>The upper case escapes match the inverse sets of characters. Note that \d
matches only decimal digits, whereas \w matches any Unicode digit, as well as
any Unicode letter, and underscore. Note also that <c>ucp</c> affects \b, and
\B because they are defined in terms of \w and \W. Matching these sequences
is noticeably slower when <c>ucp</c> is set.</p>

<p>The sequences \h, \H, \v, and \V are features that were added to Perl at
release 5.10. In contrast to the other sequences, which match only ASCII
characters by default, these always match certain high-valued codepoints,
whether or not <c>ucp</c> is set. The horizontal space characters are:</p>

<taglist>
  <tag>U+0009</tag>     <item>Horizontal tab (HT)</item>
  <tag>U+0020</tag>     <item>Space</item>
  <tag>U+00A0</tag>     <item>Non-break space</item>
  <tag>U+1680</tag>     <item>Ogham space mark</item>
  <tag>U+180E</tag>     <item>Mongolian vowel separator</item>
  <tag>U+2000</tag>     <item>En quad</item>
  <tag>U+2001</tag>     <item>Em quad</item>
  <tag>U+2002</tag>     <item>En space</item>
  <tag>U+2003</tag>     <item>Em space</item>
  <tag>U+2004</tag>     <item>Three-per-em space</item>
  <tag>U+2005</tag>     <item>Four-per-em space</item>
  <tag>U+2006</tag>     <item>Six-per-em space</item>
  <tag>U+2007</tag>     <item>Figure space</item>
  <tag>U+2008</tag>     <item>Punctuation space</item>
  <tag>U+2009</tag>     <item>Thin space</item>
  <tag>U+200A</tag>     <item>Hair space</item>
  <tag>U+202F</tag>     <item>Narrow no-break space</item>
  <tag>U+205F</tag>     <item>Medium mathematical space</item>
  <tag>U+3000</tag>     <item>Ideographic space</item>
</taglist>

<p>The vertical space characters are:</p>

<taglist>
  <tag>U+000A</tag>     <item>Linefeed (LF)</item>
  <tag>U+000B</tag>     <item>Vertical tab (VT)</item>
  <tag>U+000C</tag>     <item>Form feed (FF)</item>
  <tag>U+000D</tag>     <item>Carriage return (CR)</item>
  <tag>U+0085</tag>     <item>Next line (NEL)</item>
  <tag>U+2028</tag>     <item>Line separator</item>
  <tag>U+2029</tag>     <item>Paragraph separator</item>
</taglist>

<p>In 8-bit, non-UTF-8 mode, only the characters with codepoints less than 256 are
relevant.</p>

<p><em>Newline sequences</em></p>

<p>Outside a character class, by default, the escape sequence \R matches any
Unicode newline sequence. In non-UTF-8 mode \R is
equivalent to the following:</p>

<quote><p>  (?&gt;\r\n|\n|\x0b|\f|\r|\x85)</p></quote>

<p>This is an example of an "atomic group", details of which are given below.</p>

<p>This particular group matches either the two-character sequence CR followed by
LF, or one of the single characters LF (linefeed, U+000A), VT (vertical tab,
U+000B), FF (form feed, U+000C), CR (carriage return, U+000D), or NEL (next
line, U+0085). The two-character sequence is treated as a single unit that
cannot be split.</p>

<p>In Unicode mode, two additional characters whose codepoints are greater than 255
are added: LS (line separator, U+2028) and PS (paragraph separator, U+2029).
Unicode character property support is not needed for these characters to be
recognized.</p>


<p>It is possible to restrict \R to match only CR, LF, or CRLF (instead of the
complete set of Unicode line endings) by setting the option <c>bsr_anycrlf</c>
either at compile time or when the pattern is matched. (BSR is an abbreviation
for "backslash R".) This can be made the default when PCRE is built; if this is
the case, the other behaviour can be requested via the <c>bsr_unicode</c> option.
It is also possible to specify these settings by starting a pattern string with
one of the following sequences:</p>

<p>  (*BSR_ANYCRLF)   CR, LF, or CRLF only
  (*BSR_UNICODE)   any Unicode newline sequence</p>

<p>These override the default and the options given to the compiling function, but
they can themselves be overridden by options given to a matching function. Note
that these special settings, which are not Perl-compatible, are recognized only
at the very start of a pattern, and that they must be in upper case. If more
than one of them is present, the last one is used. They can be combined with a
change of newline convention; for example, a pattern can start with:</p>

<p>  (*ANY)(*BSR_ANYCRLF)</p>

<p>They can also be combined with the (*UTF8), (*UTF) or
(*UCP) special sequences. Inside a character class, \R is treated as an
unrecognized escape sequence, and so matches the letter "R" by default.</p>

<p><em>Unicode character properties</em></p>

<p>Three additional
escape sequences that match characters with specific properties are available.
When in 8-bit non-UTF-8 mode, these sequences are of course limited to testing
characters whose codepoints are less than 256, but they do work in this mode.
The extra escape sequences are:</p>
<taglist>
<tag>\p{<em>xx</em>}</tag>   <item>a character with the <em>xx</em> property</item>
<tag>\P{<em>xx</em>}</tag>   <item>a character without the <em>xx</em> property</item>
<tag>\X</tag>                <item>a Unicode extended grapheme cluster</item>
</taglist>

<p>The property names represented by <i>xx</i> above are limited to the Unicode
script names, the general category properties, "Any", which matches any
character (including newline), and some special PCRE properties (described
in the next section).
Other Perl properties such as "InMusicalSymbols" are not currently supported by
PCRE. Note that \P{Any} does not match any characters, so always causes a
match failure.</p>

<p>Sets of Unicode characters are defined as belonging to certain scripts. A
character from one of these sets can be matched using a script name. For
example:</p>

<p>  \p{Greek}
  \P{Han}</p>

<p>Those that are not part of an identified script are lumped together as
"Common". The current list of scripts is:</p>

<list>
<item>Arabic</item>
<item>Armenian</item>
<item>Avestan</item>
<item>Balinese</item>
<item>Bamum</item>
<item>Batak</item>
<item>Bengali</item>
<item>Bopomofo</item>
<item>Braille</item>
<item>Buginese</item>
<item>Buhid</item>
<item>Canadian_Aboriginal</item>
<item>Carian</item>
<item>Chakma</item>
<item>Cham</item>
<item>Cherokee</item>
<item>Common</item>
<item>Coptic</item>
<item>Cuneiform</item>
<item>Cypriot</item>
<item>Cyrillic</item>
<item>Deseret</item>
<item>Devanagari</item>
<item>Egyptian_Hieroglyphs</item>
<item>Ethiopic</item>
<item>Georgian</item>
<item>Glagolitic</item>
<item>Gothic</item>
<item>Greek</item>
<item>Gujarati</item>
<item>Gurmukhi</item>
<item>Han</item>
<item>Hangul</item>
<item>Hanunoo</item>
<item>Hebrew</item>
<item>Hiragana</item>
<item>Imperial_Aramaic</item>
<item>Inherited</item>
<item>Inscriptional_Pahlavi</item>
<item>Inscriptional_Parthian</item>
<item>Javanese</item>
<item>Kaithi</item>
<item>Kannada</item>
<item>Katakana</item>
<item>Kayah_Li</item>
<item>Kharoshthi</item>
<item>Khmer</item>
<item>Lao</item>
<item>Latin</item>
<item>Lepcha</item>
<item>Limbu</item>
<item>Linear_B</item>
<item>Lisu</item>
<item>Lycian</item>
<item>Lydian</item>
<item>Malayalam</item>
<item>Mandaic</item>
<item>Meetei_Mayek</item>
<item>Meroitic_Cursive</item>
<item>Meroitic_Hieroglyphs</item>
<item>Miao</item>
<item>Mongolian</item>
<item>Myanmar</item>
<item>New_Tai_Lue</item>
<item>Nko</item>
<item>Ogham</item>
<item>Old_Italic</item>
<item>Old_Persian</item>
<item>Oriya</item>
<item>Old_South_Arabian</item>
<item>Old_Turkic</item>
<item>Ol_Chiki</item>
<item>Osmanya</item>
<item>Phags_Pa</item>
<item>Phoenician</item>
<item>Rejang</item>
<item>Runic</item>
<item>Samaritan</item>
<item>Saurashtra</item>
<item>Sharada</item>
<item>Shavian</item>
<item>Sinhala</item>
<item>Sora_Sompeng</item>
<item>Sundanese</item>
<item>Syloti_Nagri</item>
<item>Syriac</item>
<item>Tagalog</item>
<item>Tagbanwa</item>
<item>Tai_Le</item>
<item>Tai_Tham</item>
<item>Tai_Viet</item>
<item>Takri</item>
<item>Tamil</item>
<item>Telugu</item>
<item>Thaana</item>
<item>Thai</item>
<item>Tibetan</item>
<item>Tifinagh</item>
<item>Ugaritic</item>
<item>Vai</item>
<item>Yi</item>
</list>

<p>Each character has exactly one Unicode general category property, specified by
a two-letter abbreviation. For compatibility with Perl, negation can be
specified by including a circumflex between the opening brace and the property
name. For example, \p{^Lu} is the same as \P{Lu}.</p>

<p>If only one letter is specified with \p or \P, it includes all the general
category properties that start with that letter. In this case, in the absence
of negation, the curly brackets in the escape sequence are optional; these two
examples have the same effect:</p>

<list><item>\p{L}</item>
  <item>\pL</item></list>

<p>The following general category property codes are supported:</p>

<taglist>  
  <tag>C</tag>     <item>Other</item>
  <tag>Cc</tag>    <item>Control</item>
  <tag>Cf</tag>    <item>Format</item>
  <tag>Cn</tag>    <item>Unassigned</item>
  <tag>Co</tag>    <item>Private use</item>
  <tag>Cs</tag>    <item>Surrogate</item>
</taglist>

<taglist>  
  <tag>L</tag>     <item>Letter</item>
  <tag>Ll</tag>    <item>Lower case letter</item>
  <tag>Lm</tag>    <item>Modifier letter</item>
  <tag>Lo</tag>    <item>Other letter</item>
  <tag>Lt</tag>    <item>Title case letter</item>
  <tag>Lu</tag>    <item>Upper case letter</item>
</taglist>


<taglist>  
  <tag>M</tag>     <item>Mark</item>
  <tag>Mc</tag>    <item>Spacing mark</item>
  <tag>Me</tag>    <item>Enclosing mark</item>
  <tag>Mn</tag>    <item>Non-spacing mark</item>
</taglist>

<taglist>  
  <tag>N</tag>     <item>Number</item>
  <tag>Nd</tag>    <item>Decimal number</item>
  <tag>Nl</tag>    <item>Letter number</item>
  <tag>No</tag>    <item>Other number</item>
</taglist>

<taglist>  
  <tag>P</tag>     <item>Punctuation</item>
  <tag>Pc</tag>    <item>Connector punctuation</item>
  <tag>Pd</tag>    <item>Dash punctuation</item>
  <tag>Pe</tag>    <item>Close punctuation</item>
  <tag>Pf</tag>    <item>Final punctuation</item>
  <tag>Pi</tag>    <item>Initial punctuation</item>
  <tag>Po</tag>    <item>Other punctuation</item>
  <tag>Ps</tag>    <item>Open punctuation</item>
</taglist>

<taglist>  
  <tag>S</tag>     <item>Symbol</item>
  <tag>Sc</tag>    <item>Currency symbol</item>
  <tag>Sk</tag>    <item>Modifier symbol</item>
  <tag>Sm</tag>    <item>Mathematical symbol</item>
  <tag>So</tag>    <item>Other symbol</item>
</taglist>

<taglist>  
  <tag>Z</tag>     <item>Separator</item>
  <tag>Zl</tag>    <item>Line separator</item>
  <tag>Zp</tag>    <item>Paragraph separator</item>
  <tag>Zs</tag>    <item>Space separator</item>
</taglist>

<p>The special property L&amp; is also supported: it matches a character that has
the Lu, Ll, or Lt property, in other words, a letter that is not classified as
a modifier or "other".</p>

<p>The Cs (Surrogate) property applies only to characters in the range U+D800 to
U+DFFF. Such characters are not valid in Unicode strings and so
cannot be tested by PCRE. Perl does not support the Cs property</p>

<p>The long synonyms for property names that Perl supports (such as \p{Letter})
are not supported by PCRE, nor is it permitted to prefix any of these
properties with "Is".</p>

<p>No character that is in the Unicode table has the Cn (unassigned) property.
Instead, this property is assumed for any code point that is not in the
Unicode table.</p>

<p>Specifying caseless matching does not affect these escape sequences. For
example, \p{Lu} always matches only upper case letters. This is different from
the behaviour of current versions of Perl.</p>
<p>Matching characters by Unicode property is not fast, because PCRE has to do a
multistage table lookup in order to find a character's property. That is why
the traditional escape sequences such as \d and \w do not use Unicode
properties in PCRE by default, though you can make them do so by setting the
<c>ucp</c> option or by starting the pattern with (*UCP).</p>

<p><em>Extended grapheme clusters</em></p>
<p>The \X escape matches any number of Unicode characters that form an "extended
grapheme cluster", and treats the sequence as an atomic group (see below).
Up to and including release 8.31, PCRE matched an earlier, simpler definition
that was equivalent to</p>

<quote><p>  (?&gt;\PM\pM*)</p></quote>

<p>That is, it matched a character without the "mark" property, followed by zero
or more characters with the "mark" property. Characters with the "mark"
property are typically non-spacing accents that affect the preceding character.</p>

<p>This simple definition was extended in Unicode to include more complicated
kinds of composite character by giving each character a grapheme breaking
property, and creating rules that use these properties to define the boundaries
of extended grapheme clusters. In releases of PCRE later than 8.31, \X matches
one of these clusters.</p>

<p>\X always matches at least one character. Then it decides whether to add
additional characters according to the following rules for ending a cluster:</p>
<taglist>
<tag>1.</tag> <item>End at the end of the subject string.</item>
<tag>2.</tag> <item>Do not end between CR and LF; otherwise end after any control character.</item>
<tag>3.</tag> <item>Do not break Hangul (a Korean script) syllable sequences. Hangul characters
are of five types: L, V, T, LV, and LVT. An L character may be followed by an
L, V, LV, or LVT character; an LV or V character may be followed by a V or T
character; an LVT or T character may be follwed only by a T character.</item>
<tag>4.</tag> <item>Do not end before extending characters or spacing marks. Characters with
the "mark" property always have the "extend" grapheme breaking property.</item>
<tag>5.</tag> <item>Do not end after prepend characters.</item>
<tag>6.</tag> <item>Otherwise, end the cluster.</item>
</taglist>

<p><em>PCRE's additional properties</em></p>

<p>As well as the standard Unicode properties described above, PCRE supports four
more that make it possible to convert traditional escape sequences such as \w
and \s and POSIX character classes to use Unicode properties. PCRE uses these
non-standard, non-Perl properties internally when PCRE_UCP is set. However,
they may also be used explicitly. These properties are:</p>
<taglist>
  <tag>Xan</tag>   <item>Any alphanumeric character</item>
  <tag>Xps</tag>   <item>Any POSIX space character</item>
  <tag>Xsp</tag>   <item>Any Perl space character</item>
  <tag>Xwd</tag>   <item>Any Perl "word" character</item>
</taglist>
<p>Xan matches characters that have either the L (letter) or the N (number)
property. Xps matches the characters tab, linefeed, vertical tab, form feed, or
carriage return, and any other character that has the Z (separator) property.
Xsp is the same as Xps, except that vertical tab is excluded. Xwd matches the
same characters as Xan, plus underscore.</p>

<p>There is another non-standard property, Xuc, which matches any character that
can be represented by a Universal Character Name in C++ and other programming
languages. These are the characters $, @, ` (grave accent), and all characters
with Unicode code points greater than or equal to U+00A0, except for the
surrogates U+D800 to U+DFFF. Note that most base (ASCII) characters are
excluded. (Universal Character Names are of the form \uHHHH or \UHHHHHHHH
where H is a hexadecimal digit. Note that the Xuc property does not match these
sequences but the characters that they represent.)</p>

<p><em>Resetting the match start</em></p>

<p>The escape sequence \K causes any previously matched characters not to be
included in the final matched sequence. For example, the pattern:</p>

<quote><p>  foo\Kbar</p></quote>

<p>matches "foobar", but reports that it has matched "bar". This feature is
similar to a lookbehind assertion
<!--  HTML &lt;a href="#lookbehind"&gt; -->
<!--  &lt;/a&gt; -->
(described below).

However, in this case, the part of the subject before the real match does not
have to be of fixed length, as lookbehind assertions do. The use of \K does
not interfere with the setting of
captured substrings.
For example, when the pattern</p>

<quote><p>  (foo)\Kbar</p></quote>

<p>matches "foobar", the first substring is still set to "foo".</p>

<p>Perl documents that the use of \K within assertions is "not well defined". In
PCRE, \K is acted upon when it occurs inside positive assertions, but is
ignored in negative assertions.</p>

<p><em>Simple assertions</em></p>

<p>The final use of backslash is for certain simple assertions. An
assertion specifies a condition that has to be met at a particular
point in a match, without consuming any characters from the subject
string. The use of subpatterns for more complicated assertions is
described below. The backslashed assertions are:</p>

<taglist>
  <tag>\b</tag>     <item>matches at a word boundary</item>
  <tag>\B</tag>     <item>matches when not at a word boundary</item>
  <tag>\A</tag>     <item>matches at the start of the subject</item>
  <tag>\Z</tag>     <item>matches at the end of the subject
                           also matches before a newline at the end of 
                           the subject</item>
  <tag>\z</tag>     <item>matches only at the end of the subject</item>
  <tag>\G</tag>     <item>matches at the first matching position in the 
                           subject</item>
</taglist>

<p>Inside a character class, \b has a different meaning; it matches the backspace
character. If any other of these assertions appears in a character class, by
default it matches the corresponding literal character (for example, \B
matches the letter B). </p>

<p>A word boundary is a position in the subject string where the current character
and the previous character do not both match \w or \W (i.e. one matches
\w and the other matches \W), or the start or end of the string if the
first or last character matches \w, respectively. In a UTF mode, the meanings
of \w and \W can be changed by setting the <c>ucp</c> option. When this is
done, it also affects \b and \B. Neither PCRE nor Perl has a separate "start
of word" or "end of word" metasequence. However, whatever follows \b normally
determines which it is. For example, the fragment \ba matches "a" at the start
of a word.</p>

<p>The \A, \Z, and \z assertions differ from the traditional circumflex and
dollar (described in the next section) in that they only ever match at the very
start and end of the subject string, whatever options are set. Thus, they are
independent of multiline mode. These three assertions are not affected by the
<c>notbol</c> or <c>noteol</c> options, which affect only the behaviour of the
circumflex and dollar metacharacters. However, if the <em>startoffset</em>
argument of <c>re:run/3</c> is non-zero, indicating that matching is to start
at a point other than the beginning of the subject, \A can never match. The
difference between \Z and \z is that \Z matches before a newline at the end
of the string as well as at the very end, whereas \z matches only at the end.</p>

<p>The \G assertion is true only when the current matching position is at the
start point of the match, as specified by the <em>startoffset</em> argument of
<c>re:run/3</c>. It differs from \A when the value of <em>startoffset</em> is
non-zero. By calling <c>re:run/3</c> multiple times with appropriate
arguments, you can mimic Perl's /g option, and it is in this kind of
implementation where \G can be useful.</p>

<p>Note, however, that PCRE's interpretation of \G, as the start of the current
match, is subtly different from Perl's, which defines it as the end of the
previous match. In Perl, these can be different when the previously matched
string was empty. Because PCRE does just one match at a time, it cannot
reproduce this behaviour.</p>

<p>If all the alternatives of a pattern begin with \G, the expression is anchored
to the starting match position, and the "anchored" flag is set in the compiled
regular expression.</p>

</section>

<section><marker id="sect4"></marker><title>Circumflex and dollar</title>

<p>The circumflex and dollar metacharacters are zero-width assertions. That is,
they test for a particular condition being true without consuming any
characters from the subject string.</p>

<p>Outside a character class, in the default matching mode, the circumflex
character is an assertion that is true only if the current matching point is at
the start of the subject string. If the <i>startoffset</i> argument of
<c>re:run/3</c> is non-zero, circumflex can never match if the <c>multiline</c>
option is unset. Inside a character class, circumflex has an entirely different
meaning (see below).</p>

<p>Circumflex need not be the first character of the pattern if a number of
alternatives are involved, but it should be the first thing in each alternative
in which it appears if the pattern is ever to match that branch. If all
possible alternatives start with a circumflex, that is, if the pattern is
constrained to match only at the start of the subject, it is said to be an
"anchored" pattern. (There are also other constructs that can cause a pattern
to be anchored.)</p>

<p>The dollar character is an assertion that is true only if the current matching
point is at the end of the subject string, or immediately before a newline at
the end of the string (by default). Note, however, that it does not actually
match the newline. Dollar need not be the last character of the pattern if a
number of alternatives are involved, but it should be the last item in any
branch in which it appears. Dollar has no special meaning in a character class.</p>

<p>The meaning of dollar can be changed so that it matches only at the
very end of the string, by setting the <c>dollar_endonly</c> option at
compile time. This does not affect the \Z assertion.</p>

<p>The meanings of the circumflex and dollar characters are changed if the
<c>multiline</c> option is set. When this is the case, a circumflex matches
immediately after internal newlines as well as at the start of the subject
string. It does not match after a newline that ends the string. A dollar
matches before any newlines in the string, as well as at the very end, when
<c>multiline</c> is set. When newline is specified as the two-character
sequence CRLF, isolated CR and LF characters do not indicate newlines.</p>

<p>For example, the pattern /^abc$/ matches the subject string
"def\nabc" (where \n represents a newline) in multiline mode, but
not otherwise. Consequently, patterns that are anchored in single line
mode because all branches start with ^ are not anchored in multiline
mode, and a match for circumflex is possible when the
<em>startoffset</em> argument of <c>re:run/3</c> is non-zero. The
<c>dollar_endonly</c> option is ignored if <c>multiline</c> is set.</p>

<p>Note that the sequences \A, \Z, and \z can be used to match the start and
end of the subject in both modes, and if all branches of a pattern start with
\A it is always anchored, whether or not <c>multiline</c> is set.</p>


</section>

<section><marker id="sect5"></marker><title>Full stop (period, dot) and \N</title>

<p>Outside a character class, a dot in the pattern matches any one character in
the subject string except (by default) a character that signifies the end of a
line.
</p>

<p>When a line ending is defined as a single character, dot never matches that
character; when the two-character sequence CRLF is used, dot does not match CR
if it is immediately followed by LF, but otherwise it matches all characters
(including isolated CRs and LFs). 
When any Unicode line endings are being
recognized, dot does not match CR or LF or any of the other line ending
characters.
</p>

<p>The behaviour of dot with regard to newlines can be changed.  If
the <c>dotall</c> option is set, a dot matches any one character,
without exception. If the two-character sequence CRLF is present in
the subject string, it takes two dots to match it.</p>

<p>The handling of dot is entirely independent of the handling of
circumflex and dollar, the only relationship being that they both
involve newlines. Dot has no special meaning in a character class.</p>

<p>The escape sequence \N behaves like a dot, except that it is not affected by
the PCRE_DOTALL option. In other words, it matches any character except one
that signifies the end of a line. Perl also uses \N to match characters by
name; PCRE does not support this.</p>

</section>

<section><marker id="sect6"></marker><title>Matching a single data unit</title>

<p>Outside a character class, the escape sequence \C matches any one data unit,
whether or not a UTF mode is set. One data unit is one
byte. Unlike a dot, \C always
matches line-ending characters. The feature is provided in Perl in order to
match individual bytes in UTF-8 mode, but it is unclear how it can usefully be
used. Because \C breaks up characters into individual data units, matching one
unit with \C in a UTF mode means that the rest of the string may start with a
malformed UTF character. This has undefined results, because PCRE assumes that
it is dealing with valid UTF strings.</p>

<p>PCRE does not allow \C to appear in lookbehind assertions (described below)
in a UTF mode, because this would make it impossible to calculate the length of
the lookbehind.</p>

<p>In general, the \C escape sequence is best avoided. However, one
way of using it that avoids the problem of malformed UTF characters is to use a
lookahead to check the length of the next character, as in this pattern, which
could be used with a UTF-8 string (ignore white space and line breaks):</p>

<code type="none">
  (?| (?=[\x00-\x7f])(\C) |
      (?=[\x80-\x{7ff}])(\C)(\C) |
      (?=[\x{800}-\x{ffff}])(\C)(\C)(\C) |
      (?=[\x{10000}-\x{1fffff}])(\C)(\C)(\C)(\C))</code>

<p>A group that starts with (?| resets the capturing parentheses numbers in each
alternative (see "Duplicate Subpattern Numbers"
below). The assertions at the start of each branch check the next UTF-8
character for values whose encoding uses 1, 2, 3, or 4 bytes, respectively. The
character's individual bytes are then captured by the appropriate number of
groups.</p>

</section>

<section><marker id="sect7"></marker><title>Square brackets and character classes</title>

<p>An opening square bracket introduces a character class, terminated by a closing
square bracket. A closing square bracket on its own is not special by default.
However, if the PCRE_JAVASCRIPT_COMPAT option is set, a lone closing square
bracket causes a compile-time error. If a closing square bracket is required as
a member of the class, it should be the first data character in the class
(after an initial circumflex, if present) or escaped with a backslash.</p>

<p>A character class matches a single character in the subject. In a UTF mode, the
character may be more than one data unit long. A matched character must be in
the set of characters defined by the class, unless the first character in the
class definition is a circumflex, in which case the subject character must not
be in the set defined by the class. If a circumflex is actually required as a
member of the class, ensure it is not the first character, or escape it with a
backslash.</p>

<p>For example, the character class [aeiou] matches any lower case vowel, while
[^aeiou] matches any character that is not a lower case vowel. Note that a
circumflex is just a convenient notation for specifying the characters that
are in the class by enumerating those that are not. A class that starts with a
circumflex is not an assertion; it still consumes a character from the subject
string, and therefore it fails if the current pointer is at the end of the
string.</p>

<p>In UTF-8 mode, characters with values greater than 255 (0xffff)
can be included in a class as a literal string of data units, or by using the
\x{ escaping mechanism.</p>

<p>When caseless matching is set, any letters in a class represent both their
upper case and lower case versions, so for example, a caseless [aeiou] matches
"A" as well as "a", and a caseless [^aeiou] does not match "A", whereas a
caseful version would. In a UTF mode, PCRE always understands the concept of
case for characters whose values are less than 256, so caseless matching is
always possible. For characters with higher values, the concept of case is
supported if PCRE is compiled with Unicode property support, but not otherwise.
If you want to use caseless matching in a UTF mode for characters 256 and
above, you must ensure that PCRE is compiled with Unicode property support as
well as with UTF support.</p>

<p>Characters that might indicate line breaks are never treated in any special way
when matching character classes, whatever line-ending sequence is in use, and
whatever setting of the PCRE_DOTALL and PCRE_MULTILINE options is used. A class
such as [^a] always matches one of these characters.</p>

<p>The minus (hyphen) character can be used to specify a range of characters in a
character class. For example, [d-m] matches any letter between d and m,
inclusive. If a minus character is required in a class, it must be escaped with
a backslash or appear in a position where it cannot be interpreted as
indicating a range, typically as the first or last character in the class.</p>

<p>It is not possible to have the literal character "]" as the end character of a
range. A pattern such as [W-]46] is interpreted as a class of two characters
("W" and "-") followed by a literal string "46]", so it would match "W46]" or
"-46]". However, if the "]" is escaped with a backslash it is interpreted as
the end of range, so [W-\]46] is interpreted as a class containing a range
followed by two other characters. The octal or hexadecimal representation of
"]" can also be used to end a range.</p>

<p>Ranges operate in the collating sequence of character values. They can also be
used for characters specified numerically, for example [\000-\037]. Ranges
can include any characters that are valid for the current mode.</p>

<p>If a range that includes letters is used when caseless matching is set, it
matches the letters in either case. For example, [W-c] is equivalent to
[][\\^_`wxyzabc], matched caselessly, and in a non-UTF mode, if character
tables for a French locale are in use, [\xc8-\xcb] matches accented E
characters in both cases. In UTF modes, PCRE supports the concept of case for
characters with values greater than 255 only when it is compiled with Unicode
property support.</p>

<p>The character escape sequences \d, \D, \h, \H, \p, \P, \s, \S, \v,
\V, \w, and \W may appear in a character class, and add the characters that
they match to the class. For example, [\dABCDEF] matches any hexadecimal
digit. In UTF modes, the <c>ucp</c> option affects the meanings of \d, \s, \w
and their upper case partners, just as it does when they appear outside a
character class, as described in the section entitled
"Generic character types"
above. The escape sequence \b has a different meaning inside a character
class; it matches the backspace character. The sequences \B, \N, \R, and \X
are not special inside a character class. Like any other unrecognized escape
sequences, they are treated as the literal characters "B", "N", "R", and "X".</p>

<p>A circumflex can conveniently be used with the upper case character types to
specify a more restricted set of characters than the matching lower case type.
For example, the class [^\W_] matches any letter or digit, but not underscore,
whereas [\w] includes underscore. A positive character class should be read as
"something OR something OR ..." and a negative class as "NOT something AND NOT
something AND NOT ...".</p>

<p>The only metacharacters that are recognized in character classes
are backslash, hyphen (only where it can be interpreted as specifying
a range), circumflex (only at the start), opening square bracket (only
when it can be interpreted as introducing a POSIX class name - see the
next section), and the terminating closing square bracket. However,
escaping other non-alphanumeric characters does no harm.</p>
</section>

<section><marker id="sect8"></marker><title>POSIX character classes</title>

<p>Perl supports the POSIX notation for character classes. This uses names
enclosed by [: and :] within the enclosing square brackets. PCRE also supports
this notation. For example,</p>

<quote><p>  [01[:alpha:]%]</p></quote>

<p>matches "0", "1", any alphabetic character, or "%". The supported class names
are:</p>

<taglist>  
  <tag>alnum</tag>    <item>letters and digits</item>
  <tag>alpha</tag>    <item>letters</item>
  <tag>ascii</tag>    <item>character codes 0 - 127</item>
  <tag>blank</tag>    <item>space or tab only</item>
  <tag>cntrl</tag>    <item>control characters</item>
  <tag>digit</tag>    <item>decimal digits (same as \d)</item>
  <tag>graph</tag>    <item>printing characters, excluding space</item>
  <tag>lower</tag>    <item>lower case letters</item>
  <tag>print</tag>    <item>printing characters, including space</item>
  <tag>punct</tag>    <item>printing characters, excluding letters and digits and space</item>
  <tag>space</tag>    <item>whitespace (not quite the same as \s)</item>
  <tag>upper</tag>    <item>upper case letters</item>
  <tag>word</tag>     <item>"word" characters (same as \w)</item>
  <tag>xdigit</tag>   <item>hexadecimal digits</item>
</taglist>

<p>The "space" characters are HT (9), LF (10), VT (11), FF (12), CR (13), and
space (32). Notice that this list includes the VT character (code 11). This
makes "space" different to \s, which does not include VT (for Perl
compatibility).</p>

<p>The name "word" is a Perl extension, and "blank" is a GNU extension
from Perl 5.8. Another Perl extension is negation, which is indicated
by a ^ character after the colon. For example,</p>

<quote><p>  [12[:^digit:]]</p></quote>

<p>matches "1", "2", or any non-digit. PCRE (and Perl) also recognize the POSIX
syntax [.ch.] and [=ch=] where "ch" is a "collating element", but these are not
supported, and an error is given if they are encountered.</p>

<p>By default, in UTF modes, characters with values greater than 255 do not match
any of the POSIX character classes. However, if the PCRE_UCP option is passed
to <em>pcre_compile()</em>, some of the classes are changed so that Unicode
character properties are used. This is achieved by replacing the POSIX classes
by other sequences, as follows:</p>

<taglist>
  <tag>[:alnum:]</tag>  <item>becomes  <em>\p{Xan}</em></item>
  <tag>[:alpha:]</tag>  <item>becomes  <em>\p{L}</em></item>
  <tag>[:blank:]</tag>  <item>becomes  <em>\h</em></item>
  <tag>[:digit:]</tag>  <item>becomes  <em>\p{Nd}</em></item>
  <tag>[:lower:]</tag>  <item>becomes  <em>\p{Ll}</em></item>
  <tag>[:space:]</tag>  <item>becomes  <em>\p{Xps}</em></item>
  <tag>[:upper:]</tag>  <item>becomes  <em>\p{Lu}</em></item>
  <tag>[:word:]</tag>   <item>becomes  <em>\p{Xwd}</em></item>
</taglist>

<p>Negated versions, such as [:^alpha:] use \P instead of \p. The other POSIX
classes are unchanged, and match only characters with code points less than
256.</p>

</section>


<section><marker id="sect9"></marker><title>Vertical bar</title>

<p>Vertical bar characters are used to separate alternative
patterns. For example, the pattern</p>

<quote><p>  gilbert|sullivan</p></quote>

<p>matches either "gilbert" or "sullivan". Any number of alternatives
may appear, and an empty alternative is permitted (matching the empty
string). The matching process tries each alternative in turn, from
left to right, and the first one that succeeds is used. If the
alternatives are within a subpattern (defined below), "succeeds" means
matching the rest of the main pattern as well as the alternative in
the subpattern.</p>

</section>

<section><marker id="sect10"></marker><title>Internal option setting</title>

<p>The settings of the <c>caseless</c>, <c>multiline</c>, <c>dotall</c>, and
<c>extended</c> options (which are Perl-compatible) can be changed from within
the pattern by a sequence of Perl option letters enclosed between "(?" and ")".
The option letters are</p>

<taglist>
  <tag>i</tag>  <item>for <c>caseless</c></item>
  <tag>m</tag>  <item>for <c>multiline</c></item>
  <tag>s</tag>  <item>for <c>dotall</c></item>
  <tag>x</tag>  <item>for <c>extended</c></item>
</taglist>

<p>For example, (?im) sets caseless, multiline matching. It is also possible to
unset these options by preceding the letter with a hyphen, and a combined
setting and unsetting such as (?im-sx), which sets <c>caseless</c> and
<c>multiline</c> while unsetting <c>dotall</c> and <c>extended</c>, is also
permitted. If a letter appears both before and after the hyphen, the option is
unset.</p>

<p>The PCRE-specific options <c>dupnames</c>, <c>ungreedy</c>, and
<c>extra</c> can be changed in the same way as the Perl-compatible
options by using the characters J, U and X respectively.</p>

<p>When one of these option changes occurs at top level (that is, not inside
subpattern parentheses), the change applies to the remainder of the pattern
that follows. If the change is placed right at the start of a pattern, PCRE
extracts it into the global options.</p>

<p>An option change within a subpattern (see below for a description of
subpatterns) affects only that part of the subpattern that follows it, so</p>

<quote><p>  (a(?i)b)c</p></quote>

<p>matches abc and aBc and no other strings (assuming <c>caseless</c>
is not used).  By this means, options can be made to have different
settings in different parts of the pattern. Any changes made in one
alternative do carry on into subsequent branches within the same
subpattern. For example,</p>

<quote><p>  (a(?i)b|c)</p></quote>

<p>matches "ab", "aB", "c", and "C", even though when matching "C" the first
branch is abandoned before the option setting. This is because the effects of
option settings happen at compile time. There would be some very weird
behaviour otherwise.</p>

<p><em>Note:</em> There are other PCRE-specific options that can be set by the
application when the compiling or matching functions are called. In some cases
the pattern can contain special leading sequences such as (*CRLF) to override
what the application has set or what has been defaulted. Details are given in
the section entitled "Newline sequences"
above. There are also the (*UTF8) and (*UCP) leading
sequences that can be used to set UTF and Unicode property modes; they are
equivalent to setting the <c>unicode</c> and the <c>ucp</c>
options, respectively. The (*UTF) sequence is a generic version that can be
used with any of the libraries. However, the application can set the
<c>never_utf</c> option, which locks out the use of the (*UTF) sequences.</p>

</section>

<section><marker id="sect11"></marker><title>Subpatterns</title>

<p>Subpatterns are delimited by parentheses (round brackets), which
can be nested.  Turning part of a pattern into a subpattern does two
things:</p>

<p>1. It localizes a set of alternatives. For example, the pattern</p>

<quote><p>  cat(aract|erpillar|)</p></quote>

<p>matches "cataract", "caterpillar", or "cat". Without the parentheses, it would
match "cataract", "erpillar" or an empty string.</p>

<p>2. It sets up the subpattern as a capturing subpattern. This means that, when
the complete pattern matches, that portion of the subject string that matched the
subpattern is passed back to the caller via the return value of
<c>re:run/3</c>.</p>
 
<p>Opening parentheses are counted from left to right (starting
from 1) to obtain numbers for the capturing subpatterns.For example, if the string 
"the red king" is matched against the pattern</p>

<quote><p>  the ((red|white) (king|queen))</p></quote>

<p>the captured substrings are "red king", "red", and "king", and are numbered 1,
2, and 3, respectively.</p>

<p>The fact that plain parentheses fulfil two functions is not always helpful.
There are often times when a grouping subpattern is required without a
capturing requirement. If an opening parenthesis is followed by a question mark
and a colon, the subpattern does not do any capturing, and is not counted when
computing the number of any subsequent capturing subpatterns. For example, if
the string "the white queen" is matched against the pattern</p>

<quote><p>  the ((?:red|white) (king|queen))</p></quote>

<p>the captured substrings are "white queen" and "queen", and are numbered 1 and
2. The maximum number of capturing subpatterns is 65535.</p>

<p>As a convenient shorthand, if any option settings are required at the start of
a non-capturing subpattern, the option letters may appear between the "?" and
the ":". Thus the two patterns</p>

<list>  
<item>(?i:saturday|sunday)</item>
<item>(?:(?i)saturday|sunday)</item>
</list>

<p>match exactly the same set of strings. Because alternative branches are tried
from left to right, and options are not reset until the end of the subpattern
is reached, an option setting in one branch does affect subsequent branches, so
the above patterns match "SUNDAY" as well as "Saturday".</p>

</section>

<section><marker id="sect12"></marker><title>Duplicate subpattern numbers</title>

<p>Perl 5.10 introduced a feature whereby each alternative in a subpattern uses
the same numbers for its capturing parentheses. Such a subpattern starts with
(?| and is itself a non-capturing subpattern. For example, consider this
pattern:</p>

<quote><p>  (?|(Sat)ur|(Sun))day</p></quote>

<p>Because the two alternatives are inside a (?| group, both sets of capturing
parentheses are numbered one. Thus, when the pattern matches, you can look
at captured substring number one, whichever alternative matched. This construct
is useful when you want to capture part, but not all, of one of a number of
alternatives. Inside a (?| group, parentheses are numbered as usual, but the
number is reset at the start of each branch. The numbers of any capturing
parentheses that follow the subpattern start after the highest number used in
any branch. The following example is taken from the Perl documentation. The
numbers underneath show in which buffer the captured content will be stored.</p>

<code type="none">
  # before  ---------------branch-reset----------- after
  / ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x
  # 1            2         2  3        2     3     4</code>

<p>A back reference to a numbered subpattern uses the most recent value that is
set for that number by any subpattern. The following pattern matches "abcabc"
or "defdef":</p>

<quote><p>    /(?|(abc)|(def))\1/</p></quote>

<p>In contrast, a subroutine call to a numbered subpattern always refers to the
first one in the pattern with the given number. The following pattern matches
"abcabc" or "defabc":</p>

<quote><p>    /(?|(abc)|(def))(?1)/</p></quote>

<p>If a condition test
for a subpattern's having matched refers to a non-unique number, the test is
true if any of the subpatterns of that number have matched.</p>

<p>An alternative approach to using this "branch reset" feature is to use
duplicate named subpatterns, as described in the next section.</p>

</section>

<section><marker id="sect13"></marker><title>Named subpatterns</title>

<p>Identifying capturing parentheses by number is simple, but it can be very hard
to keep track of the numbers in complicated regular expressions. Furthermore,
if an expression is modified, the numbers may change. To help with this
difficulty, PCRE supports the naming of subpatterns. This feature was not
added to Perl until release 5.10. Python had the feature earlier, and PCRE
introduced it at release 4.0, using the Python syntax. PCRE now supports both
the Perl and the Python syntax. Perl allows identically numbered subpatterns to
have different names, but PCRE does not.</p>

<p>In PCRE, a subpattern can be named in one of three ways:
(?&lt;name&gt;...) or (?'name'...) as in Perl, or (?P&lt;name&gt;...)
as in Python. References to capturing parentheses from other parts of
the pattern, such as back references, recursion, and conditions, can be
made by name as well as by number.</p>

<p>Names consist of up to 32 alphanumeric characters and underscores. Named
capturing parentheses are still allocated numbers as well as names, exactly as
if the names were not present. 
<!-- XXX C Interface
The PCRE API provides function calls for
extracting the name-to-number translation table from a compiled pattern. There
is also a convenience function for extracting a captured substring by name.
-->
The <c>capture</c> specification to <c>re:run/3</c> can use named values if they are present in the regular expression. 
</p>

<p>By default, a name must be unique within a pattern, but it is possible to relax
this constraint by setting the <c>dupnames</c> option at compile time. (Duplicate
names are also always permitted for subpatterns with the same number, set up as
described in the previous section.) Duplicate names can be useful for patterns
where only one instance of the named parentheses can match. Suppose you want to
match the name of a weekday, either as a 3-letter abbreviation or as the full
name, and in both cases you want to extract the abbreviation. This pattern
(ignoring the line breaks) does the job:</p>

<code type="none">
  (?&lt;DN&gt;Mon|Fri|Sun)(?:day)?|
  (?&lt;DN&gt;Tue)(?:sday)?|
  (?&lt;DN&gt;Wed)(?:nesday)?|
  (?&lt;DN&gt;Thu)(?:rsday)?|
  (?&lt;DN&gt;Sat)(?:urday)?</code>

<p>There are five capturing substrings, but only one is ever set after a match.
(An alternative way of solving this problem is to use a "branch reset"
subpattern, as described in the previous section.)</p>

<!-- XXX C Interface

<p>The convenience function for extracting the data by name returns the substring
for the first (and in this example, the only) subpattern of that name that
matched. This saves searching to find which numbered subpattern it was. If you
make a reference to a non-unique named subpattern from elsewhere in the
pattern, the one that corresponds to the lowest number is used. For further
details of the interfaces for handling named subpatterns, see the
<em>pcreapi</em>

documentation.</p>
-->

<p>In case of capturing named subpatterns which names are not unique, the first matching occurrence (counted from left to right in the subject) is returned from <c>re:exec/3</c>, if the name is specified in the <c>values</c> part of the <c>capture</c> statement. The <c>all_names</c> capturing value will match all of the names in the same way.</p>

<p><em>Warning:</em> You cannot use different names to distinguish between two
subpatterns with the same number because PCRE uses only the numbers when
matching. For this reason, an error is given at compile time if different names
are given to subpatterns with the same number. However, you can give the same
name to subpatterns with the same number, even when <c>dupnames</c> is not set.</p>

</section>

<section><marker id="sect14"></marker><title>Repetition</title>

<p>Repetition is specified by quantifiers, which can follow any of the
following items:</p>

<list>
  <item>a literal data character</item>
  <item>the dot metacharacter</item>
  <item>the \C escape sequence</item>
  <item>the \X escape sequence</item>
  <item>the \R escape sequence</item>
  <item>an escape such as \d or \pL that matches a single character</item>
  <item>a character class</item>
  <item>a back reference (see next section)</item>
  <item>a parenthesized subpattern (including assertions)</item>
  <item>a subroutine call to a subpattern (recursive or otherwise)</item>
</list>

<p>The general repetition quantifier specifies a minimum and maximum number of
permitted matches, by giving the two numbers in curly brackets (braces),
separated by a comma. The numbers must be less than 65536, and the first must
be less than or equal to the second. For example:</p>

<quote><p>  z{2,4}</p></quote>

<p>matches "zz", "zzz", or "zzzz". A closing brace on its own is not a special
character. If the second number is omitted, but the comma is present, there is
no upper limit; if the second number and the comma are both omitted, the
quantifier specifies an exact number of required matches. Thus</p>

<quote><p>  [aeiou]{3,}</p></quote>

<p>matches at least 3 successive vowels, but may match many more, while</p>

<quote><p>  \d{8}</p></quote>

<p>matches exactly 8 digits. An opening curly bracket that appears in a position
where a quantifier is not allowed, or one that does not match the syntax of a
quantifier, is taken as a literal character. For example, {,6} is not a
quantifier, but a literal string of four characters.</p>

<p>In Unicode mode, quantifiers apply to characters rather than to individual data
units. Thus, for example, \x{100}{2} matches two characters, each of
which is represented by a two-byte sequence in a UTF-8 string. Similarly,
\X{3} matches three Unicode extended grapheme clusters, each of which may be
several data units long (and they may be of different lengths).</p>
<p>The quantifier {0} is permitted, causing the expression to behave as if the
previous item and the quantifier were not present. This may be useful for
subpatterns that are referenced as subroutines
from elsewhere in the pattern (but see also the section entitled
"Defining subpatterns for use by reference only"
below). Items other than subpatterns that have a {0} quantifier are omitted
from the compiled pattern.</p>

<p>For convenience, the three most common quantifiers have single-character
abbreviations:</p>

<taglist>  
  <tag>*</tag>    <item>is equivalent to {0,}</item>
  <tag>+</tag>     <item>is equivalent to {1,}</item>
  <tag>?</tag>     <item>is equivalent to {0,1}</item>
</taglist>

<p>It is possible to construct infinite loops by following a
subpattern that can match no characters with a quantifier that has no
upper limit, for example:</p>

<quote><p>  (a?)*</p></quote>

<p>Earlier versions of Perl and PCRE used to give an error at compile time for
such patterns. However, because there are cases where this can be useful, such
patterns are now accepted, but if any repetition of the subpattern does in fact
match no characters, the loop is forcibly broken.</p>

<p>By default, the quantifiers are "greedy", that is, they match as much as
possible (up to the maximum number of permitted times), without causing the
rest of the pattern to fail. The classic example of where this gives problems
is in trying to match comments in C programs. These appear between /* and */
and within the comment, individual * and / characters may appear. An attempt to
match C comments by applying the pattern</p>

<quote><p>  /\*.*\*/</p></quote>

<p>to the string</p>

<quote><p>  /* first comment */  not comment  /* second comment */</p></quote>

<p>fails, because it matches the entire string owing to the greediness of the .*
item.</p>

<p>However, if a quantifier is followed by a question mark, it ceases to be
greedy, and instead matches the minimum number of times possible, so the
pattern</p>

<quote><p>  /\*.*?\*/</p></quote>

<p>does the right thing with the C comments. The meaning of the various
quantifiers is not otherwise changed, just the preferred number of matches.
Do not confuse this use of question mark with its use as a quantifier in its
own right. Because it has two uses, it can sometimes appear doubled, as in</p>

<quote><p>  \d??\d</p></quote>

<p>which matches one digit by preference, but can match two if that is the only
way the rest of the pattern matches.</p>

<p>If the <c>ungreedy</c> option is set (an option that is not available in Perl),
the quantifiers are not greedy by default, but individual ones can be made
greedy by following them with a question mark. In other words, it inverts the
default behaviour.</p>

<p>When a parenthesized subpattern is quantified with a minimum repeat count that
is greater than 1 or with a limited maximum, more memory is required for the
compiled pattern, in proportion to the size of the minimum or maximum.</p>

<p>If a pattern starts with .* or .{0,} and the <c>dotall</c> option (equivalent
to Perl's /s) is set, thus allowing the dot to match newlines, the pattern is
implicitly anchored, because whatever follows will be tried against every
character position in the subject string, so there is no point in retrying the
overall match at any position after the first. PCRE normally treats such a
pattern as though it were preceded by \A.</p>

<p>In cases where it is known that the subject string contains no newlines, it is
worth setting <c>dotall</c> in order to obtain this optimization, or
alternatively using ^ to indicate anchoring explicitly.</p>

<p>However, there are some cases where the optimization cannot be used. When .*
is inside capturing parentheses that are the subject of a back reference
elsewhere in the pattern, a match at the start may fail where a later one
succeeds. Consider, for example:</p>

<quote><p>  (.*)abc\1</p></quote>

<p>If the subject is "xyz123abc123" the match point is the fourth character. For
this reason, such a pattern is not implicitly anchored.</p>

<p>Another case where implicit anchoring is not applied is when the leading .* is
inside an atomic group. Once again, a match at the start may fail where a later
one succeeds. Consider this pattern:</p>

<quote><p>  (?&gt;.*?a)b</p></quote>

<p>It matches "ab" in the subject "aab". The use of the backtracking control verbs
(*PRUNE) and (*SKIP) also disable this optimization.</p>

<p>When a capturing subpattern is repeated, the value captured is the substring
that matched the final iteration. For example, after</p>

<quote><p>  (tweedle[dume]{3}\s*)+</p></quote>

<p>has matched "tweedledum tweedledee" the value of the captured substring is
"tweedledee". However, if there are nested capturing subpatterns, the
corresponding captured values may have been set in previous iterations. For
example, after</p>

<quote><p>  /(a|(b))+/</p></quote>

<p>matches "aba" the value of the second captured substring is "b".</p>


</section>

<section><marker id="sect15"></marker><title>Atomic grouping and possessive quantifiers</title>

<p>With both maximizing ("greedy") and minimizing ("ungreedy" or "lazy")
repetition, failure of what follows normally causes the repeated item to be
re-evaluated to see if a different number of repeats allows the rest of the
pattern to match. Sometimes it is useful to prevent this, either to change the
nature of the match, or to cause it fail earlier than it otherwise might, when
the author of the pattern knows there is no point in carrying on.</p>

<p>Consider, for example, the pattern \d+foo when applied to the subject line</p>

<quote><p>  123456bar</p></quote>

<p>After matching all 6 digits and then failing to match "foo", the normal
action of the matcher is to try again with only 5 digits matching the \d+
item, and then with 4, and so on, before ultimately failing. "Atomic grouping"
(a term taken from Jeffrey Friedl's book) provides the means for specifying
that once a subpattern has matched, it is not to be re-evaluated in this way.</p>

<p>If we use atomic grouping for the previous example, the matcher gives up
immediately on failing to match "foo" the first time. The notation is a kind of
special parenthesis, starting with (?&gt; as in this example:</p>

<quote><p>  (?&gt;\d+)foo</p></quote>

<p>This kind of parenthesis "locks up" the  part of the pattern it contains once
it has matched, and a failure further into the pattern is prevented from
backtracking into it. Backtracking past it to previous items, however, works as
normal.</p>

<p>An alternative description is that a subpattern of this type matches the string
of characters that an identical standalone pattern would match, if anchored at
the current point in the subject string.</p>

<p>Atomic grouping subpatterns are not capturing subpatterns. Simple cases such as
the above example can be thought of as a maximizing repeat that must swallow
everything it can. So, while both \d+ and \d+? are prepared to adjust the
number of digits they match in order to make the rest of the pattern match,
(?&gt;\d+) can only match an entire sequence of digits.</p>

<p>Atomic groups in general can of course contain arbitrarily complicated
subpatterns, and can be nested. However, when the subpattern for an atomic
group is just a single repeated item, as in the example above, a simpler
notation, called a "possessive quantifier" can be used. This consists of an
additional + character following a quantifier. Using this notation, the
previous example can be rewritten as</p>

<quote><p>  \d++foo</p></quote>

<p>Note that a possessive quantifier can be used with an entire group, for
example:</p>

<quote><p>  (abc|xyz){2,3}+</p></quote>

<p>Possessive quantifiers are always greedy; the setting of the <c>ungreedy</c>
option is ignored. They are a convenient notation for the simpler forms of
atomic group. However, there is no difference in the meaning of a possessive
quantifier and the equivalent atomic group, though there may be a performance
difference; possessive quantifiers should be slightly faster.</p>

<p>The possessive quantifier syntax is an extension to the Perl 5.8 syntax.
Jeffrey Friedl originated the idea (and the name) in the first edition of his
book. Mike McCloskey liked it, so implemented it when he built Sun's Java
package, and PCRE copied it from there. It ultimately found its way into Perl
at release 5.10.</p>

<p>PCRE has an optimization that automatically "possessifies" certain simple
pattern constructs. For example, the sequence A+B is treated as A++B because
there is no point in backtracking into a sequence of A's when B must follow.</p>

<p>When a pattern contains an unlimited repeat inside a subpattern that can itself
be repeated an unlimited number of times, the use of an atomic group is the
only way to avoid some failing matches taking a very long time indeed. The
pattern</p>

<quote><p>  (\D+|&lt;\d+&gt;)*[!?]</p></quote>

<p>matches an unlimited number of substrings that either consist of non-digits, or
digits enclosed in &lt;&gt;, followed by either ! or ?. When it matches, it runs
quickly. However, if it is applied to</p>

<quote><p>  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p></quote>

<p>it takes a long time before reporting failure. This is because the string can
be divided between the internal \D+ repeat and the external * repeat in a
large number of ways, and all have to be tried. (The example uses [!?] rather
than a single character at the end, because both PCRE and Perl have an
optimization that allows for fast failure when a single character is used. They
remember the last single character that is required for a match, and fail early
if it is not present in the string.) If the pattern is changed so that it uses
an atomic group, like this:</p>

<quote><p>  ((?&gt;\D+)|&lt;\d+&gt;)*[!?]</p></quote>

<p>sequences of non-digits cannot be broken, and failure happens quickly.</p>

</section>

<section><marker id="sect16"></marker><title>Back references</title>

<p>Outside a character class, a backslash followed by a digit greater than 0 (and
possibly further digits) is a back reference to a capturing subpattern earlier
(that is, to its left) in the pattern, provided there have been that many
previous capturing left parentheses.</p>

<p>However, if the decimal number following the backslash is less than 10, it is
always taken as a back reference, and causes an error only if there are not
that many capturing left parentheses in the entire pattern. In other words, the
parentheses that are referenced need not be to the left of the reference for
numbers less than 10. A "forward back reference" of this type can make sense
when a repetition is involved and the subpattern to the right has participated
in an earlier iteration.</p>

<p>It is not possible to have a numerical "forward back reference" to
a subpattern whose number is 10 or more using this syntax because a
sequence such as \50 is interpreted as a character defined in
octal. See the subsection entitled "Non-printing characters" above for
further details of the handling of digits following a backslash. There
is no such problem when named parentheses are used. A back reference
to any subpattern is possible using named parentheses (see below).</p>

<p>Another way of avoiding the ambiguity inherent in the use of digits following a
backslash is to use the \g escape sequence. This escape must be followed by an
unsigned number or a negative number, optionally enclosed in braces. These
examples are all identical:</p>

<list>  
  <item>(ring), \1</item>
  <item>(ring), \g1</item>
  <item>(ring), \g{1}</item>
</list>

<p>An unsigned number specifies an absolute reference without the
ambiguity that is present in the older syntax. It is also useful when
literal digits follow the reference. A negative number is a relative
reference. Consider this example:</p>

<quote><p>  (abc(def)ghi)\g{-1}</p></quote>

<p>The sequence \g{-1} is a reference to the most recently started capturing
subpattern before \g, that is, is it equivalent to \2 in this example.
Similarly, \g{-2} would be equivalent to \1. The use of relative references
can be helpful in long patterns, and also in patterns that are created by
joining together fragments that contain references within themselves.</p>

<p>A back reference matches whatever actually matched the capturing
subpattern in the current subject string, rather than anything
matching the subpattern itself (see "Subpatterns as subroutines" below
for a way of doing that). So the pattern</p>

<quote><p>  (sens|respons)e and \1ibility</p></quote>

<p>matches "sense and sensibility" and "response and responsibility", but not
"sense and responsibility". If caseful matching is in force at the time of the
back reference, the case of letters is relevant. For example,</p>

<quote><p>  ((?i)rah)\s+\1</p></quote>

<p>matches "rah rah" and "RAH RAH", but not "RAH rah", even though the original
capturing subpattern is matched caselessly.</p>

<p>There are several different ways of writing back references to named
subpatterns. The .NET syntax \k{name} and the Perl syntax \k&lt;name&gt; or
\k'name' are supported, as is the Python syntax (?P=name). Perl 5.10's unified
back reference syntax, in which \g can be used for both numeric and named
references, is also supported. We could rewrite the above example in any of
the following ways:</p>

<list>  
  <item>(?&lt;p1&gt;(?i)rah)\s+\k&lt;p1&gt;</item>
  <item>(?'p1'(?i)rah)\s+\k{p1}</item>
  <item>(?P&lt;p1&gt;(?i)rah)\s+(?P=p1)</item>
  <item>(?&lt;p1&gt;(?i)rah)\s+\g{p1}</item>
</list>

<p>A subpattern that is referenced by name may appear in the pattern before or
after the reference.</p>

<p>There may be more than one back reference to the same subpattern. If a
subpattern has not actually been used in a particular match, any back
references to it always fail. For example, the pattern</p>

<quote><p>  (a|(bc))\2</p></quote>

<p>always fails if it starts to match "a" rather than "bc". Because
there may be many capturing parentheses in a pattern, all digits
following the backslash are taken as part of a potential back
reference number. If the pattern continues with a digit character,
some delimiter must be used to terminate the back reference. If the
<c>extended</c> option is set, this can be whitespace.  Otherwise an
empty comment (see "Comments" below) can be used.</p>

<p><em>Recursive back references</em></p>

<p>A back reference that occurs inside the parentheses to which it refers fails
when the subpattern is first used, so, for example, (a\1) never matches.
However, such references can be useful inside repeated subpatterns. For
example, the pattern</p>

<quote><p>  (a|b\1)+</p></quote>

<p>matches any number of "a"s and also "aba", "ababbaa" etc. At each iteration of
the subpattern, the back reference matches the character string corresponding
to the previous iteration. In order for this to work, the pattern must be such
that the first iteration does not need to match the back reference. This can be
done using alternation, as in the example above, or by a quantifier with a
minimum of zero.</p>

<p>Back references of this type cause the group that they reference to be treated
as an atomic group.
Once the whole group has been matched, a subsequent matching failure cannot
cause backtracking into the middle of the group.</p>

</section>

<section><marker id="sect17"></marker><title>Assertions</title>

<p>An assertion is a test on the characters following or preceding the current
matching point that does not actually consume any characters. The simple
assertions coded as \b, \B, \A, \G, \Z, \z, ^ and $ are described
above.</p>


<p>More complicated assertions are coded as subpatterns. There are two kinds:
those that look ahead of the current position in the subject string, and those
that look behind it. An assertion subpattern is matched in the normal way,
except that it does not cause the current matching position to be changed.</p>

<p>Assertion subpatterns are not capturing subpatterns. If such an assertion
contains capturing subpatterns within it, these are counted for the purposes of
numbering the capturing subpatterns in the whole pattern. However, substring
capturing is carried out only for positive assertions. (Perl sometimes, but not
always, does do capturing in negative assertions.)</p>

<p>For compatibility with Perl, assertion subpatterns may be repeated; though
it makes no sense to assert the same thing several times, the side effect of
capturing parentheses may occasionally be useful. In practice, there only three
cases:</p>

<taglist>
<tag>(1)</tag> <item>If the quantifier is {0}, the assertion is never obeyed during matching.
However, it may contain internal capturing parenthesized groups that are called
from elsewhere via the subroutine mechanism.</item>
<tag>(2)</tag> <item>If quantifier is {0,n} where n is greater than zero, it is treated as if it
were {0,1}. At run time, the rest of the pattern match is tried with and
without the assertion, the order depending on the greediness of the quantifier.</item>
<tag>(3)</tag> <item>If the minimum repetition is greater than zero, the quantifier is ignored.
The assertion is obeyed just once when encountered during matching.</item>
</taglist>

<p><em>Lookahead assertions</em></p>

<p>Lookahead assertions start with (?= for positive assertions and (?! for
negative assertions. For example,</p>

<quote><p>  \w+(?=;)</p></quote>

<p>matches a word followed by a semicolon, but does not include the semicolon in
the match, and</p>

<quote><p>  foo(?!bar)</p></quote>

<p>matches any occurrence of "foo" that is not followed by "bar". Note that the
apparently similar pattern</p>

<quote><p>  (?!foo)bar</p></quote>

<p>does not find an occurrence of "bar" that is preceded by something other than
"foo"; it finds any occurrence of "bar" whatsoever, because the assertion
(?!foo) is always true when the next three characters are "bar". A
lookbehind assertion is needed to achieve the other effect.</p>

<p>If you want to force a matching failure at some point in a pattern, the most
convenient way to do it is with (?!) because an empty string always matches, so
an assertion that requires there not to be an empty string must always fail.
The backtracking control verb (*FAIL) or (*F) is a synonym for (?!).</p>


<p><em>Lookbehind assertions</em></p>

<p>Lookbehind assertions start with (?&lt;= for positive assertions and (?&lt;! for
negative assertions. For example,</p>

<quote><p>  (?&lt;!foo)bar</p></quote>

<p>does find an occurrence of "bar" that is not preceded by "foo". The contents of
a lookbehind assertion are restricted such that all the strings it matches must
have a fixed length. However, if there are several top-level alternatives, they
do not all have to have the same fixed length. Thus</p>

<quote><p>  (?&lt;=bullock|donkey)</p></quote>

<p>is permitted, but</p>

<quote><p>  (?&lt;!dogs?|cats?)</p></quote>

<p>causes an error at compile time. Branches that match different length strings
are permitted only at the top level of a lookbehind assertion. This is an
extension compared with Perl, which requires all branches to
match the same length of string. An assertion such as</p>

<quote><p>  (?&lt;=ab(c|de))</p></quote>

<p>is not permitted, because its single top-level branch can match two different
lengths, but it is acceptable to PCRE if rewritten to use two top-level 
branches:</p>

<quote><p>  (?&lt;=abc|abde)</p></quote>

<p>In some cases, the escape sequence \K (see above) can be
used instead of a lookbehind assertion to get round the fixed-length
restriction.</p>

<p>The implementation of lookbehind assertions is, for each alternative, to
temporarily move the current position back by the fixed length and then try to
match. If there are insufficient characters before the current position, the
assertion fails.</p>

<p>In a UTF mode, PCRE does not allow the \C escape (which matches a single data
unit even in a UTF mode) to appear in lookbehind assertions, because it makes
it impossible to calculate the length of the lookbehind. The \X and \R
escapes, which can match different numbers of data units, are also not
permitted.</p>
<p>"Subroutine" calls (see below) such as (?2) or (?&amp;X) are permitted in lookbehinds, as long
as the subpattern matches a fixed-length string. Recursion,
however, is not supported.</p>

<p>Possessive quantifiers can be used in conjunction with lookbehind assertions to
specify efficient matching of fixed-length strings at the end of subject
strings. Consider a simple pattern such as</p>

<quote><p>  abcd$</p></quote>

<p>when applied to a long string that does not match. Because matching proceeds
from left to right, PCRE will look for each "a" in the subject and then see if
what follows matches the rest of the pattern. If the pattern is specified as</p>

<quote><p>  ^.*abcd$</p></quote>

<p>the initial .* matches the entire string at first, but when this fails (because
there is no following "a"), it backtracks to match all but the last character,
then all but the last two characters, and so on. Once again the search for "a"
covers the entire string, from right to left, so we are no better off. However,
if the pattern is written as</p>

<quote><p>  ^.*+(?&lt;=abcd)</p></quote>

<p>there can be no backtracking for the .*+ item; it can match only the entire
string. The subsequent lookbehind assertion does a single test on the last four
characters. If it fails, the match fails immediately. For long strings, this
approach makes a significant difference to the processing time.</p>

<p><em>Using multiple assertions</em></p>

<p>Several assertions (of any sort) may occur in succession. For example,</p>

<quote><p>  (?&lt;=\d{3})(?&lt;!999)foo</p></quote>

<p>matches "foo" preceded by three digits that are not "999". Notice
that each of the assertions is applied independently at the same point
in the subject string. First there is a check that the previous three
characters are all digits, and then there is a check that the same
three characters are not "999".  This pattern does <em>not</em> match
"foo" preceded by six characters, the first of which are digits and
the last three of which are not "999". For example, it doesn't match
"123abcfoo". A pattern to do that is</p>

<quote><p>  (?&lt;=\d{3}...)(?&lt;!999)foo</p></quote>

<p>This time the first assertion looks at the preceding six
characters, checking that the first three are digits, and then the
second assertion checks that the preceding three characters are not
"999".</p>

<p>Assertions can be nested in any combination. For example,</p>

<quote><p>  (?&lt;=(?&lt;!foo)bar)baz</p></quote>

<p>matches an occurrence of "baz" that is preceded by "bar" which in
turn is not preceded by "foo", while</p>

<quote><p>  (?&lt;=\d{3}(?!999)...)foo</p></quote>

<p>is another pattern that matches "foo" preceded by three digits and any three
characters that are not "999".</p>

</section>

<section><marker id="sect18"></marker><title>Conditional subpatterns</title>

<p>It is possible to cause the matching process to obey a subpattern
conditionally or to choose between two alternative subpatterns, depending on
the result of an assertion, or whether a specific capturing subpattern has
already been matched. The two possible forms of conditional subpattern are:</p>

<list>  
<item>(?(condition)yes-pattern)</item>
<item>(?(condition)yes-pattern|no-pattern)</item>
</list>

<p>If the condition is satisfied, the yes-pattern is used; otherwise the
no-pattern (if present) is used. If there are more than two alternatives in the
subpattern, a compile-time error occurs. Each of the two alternatives may
itself contain nested subpatterns of any form, including conditional
subpatterns; the restriction to two alternatives applies only at the level of
the condition. This pattern fragment is an example where the alternatives are
complex:</p>

<quote><p>  (?(1) (A|B|C) | (D | (?(2)E|F) | E) )</p></quote>

<p>There are four kinds of condition: references to subpatterns, references to
recursion, a pseudo-condition called DEFINE, and assertions.</p>


<p><em>Checking for a used subpattern by number</em></p>

<p>If the text between the parentheses consists of a sequence of
digits, the condition is true if a capturing subpattern of that number has previously
matched. If there is more than one capturing subpattern with the same number
(see the earlier section about duplicate subpattern numbers),
the condition is true if any of them have matched. An alternative notation is
to precede the digits with a plus or minus sign. In this case, the subpattern
number is relative rather than absolute. The most recently opened parentheses
can be referenced by (?(-1), the next most recent by (?(-2), and so on. Inside
loops it can also make sense to refer to subsequent groups. The next
parentheses to be opened can be referenced as (?(+1), and so on. (The value
zero in any of these forms is not used; it provokes a compile-time error.)</p>

<p>Consider the following pattern, which contains non-significant
whitespace to make it more readable (assume the <c>extended</c>
option) and to divide it into three parts for ease of discussion:</p>

<quote><p>  ( \( )?    [^()]+    (?(1) \) )</p></quote>

<p>The first part matches an optional opening parenthesis, and if that
character is present, sets it as the first captured substring. The second part
matches one or more characters that are not parentheses. The third part is a
conditional subpattern that tests whether or not the first set of parentheses matched
or not. If they did, that is, if subject started with an opening parenthesis,
the condition is true, and so the yes-pattern is executed and a closing
parenthesis is required. Otherwise, since no-pattern is not present, the
subpattern matches nothing. In other words, this pattern matches a sequence of
non-parentheses, optionally enclosed in parentheses.</p>

<p>If you were embedding this pattern in a larger one, you could use a relative
reference:</p>

<quote><p>  ...other stuff... ( \( )?    [^()]+    (?(-1) \) ) ...</p></quote>

<p>This makes the fragment independent of the parentheses in the larger pattern.</p>

<p><em>Checking for a used subpattern by name</em></p>

<p>Perl uses the syntax (?(&lt;name&gt;)...) or (?('name')...) to test
for a used subpattern by name. For compatibility with earlier versions
of PCRE, which had this facility before Perl, the syntax (?(name)...)
is also recognized. However, there is a possible ambiguity with this
syntax, because subpattern names may consist entirely of digits. PCRE
looks first for a named subpattern; if it cannot find one and the name
consists entirely of digits, PCRE looks for a subpattern of that
number, which must be greater than zero. Using subpattern names that
consist entirely of digits is not recommended.</p>

<p>Rewriting the above example to use a named subpattern gives this:</p>

<quote><p>  (?&lt;OPEN&gt; \( )?    [^()]+    (?(&lt;OPEN&gt;) \) )</p></quote>

<p>If the name used in a condition of this kind is a duplicate, the test is
applied to all subpatterns of the same name, and is true if any one of them has
matched.</p>

<p><em>Checking for pattern recursion</em></p>

<p>If the condition is the string (R), and there is no subpattern with
the name R, the condition is true if a recursive call to the whole
pattern or any subpattern has been made. If digits or a name preceded
by ampersand follow the letter R, for example:</p>

<quote><p>  (?(R3)...) or (?(R&amp;name)...)</p></quote>

<p>the condition is true if the most recent recursion is into a
subpattern whose number or name is given. This condition does not
check the entire recursion stack. If the name used in a condition of this kind is a duplicate, the test is
applied to all subpatterns of the same name, and is true if any one of them is
the most recent recursion.</p>

<p>At "top level", all these recursion test conditions are false. The syntax for recursive
patterns is described below.</p>

<p><em>Defining subpatterns for use by reference only</em></p>

<p>If the condition is the string (DEFINE), and there is no subpattern with the
name DEFINE, the condition is always false. In this case, there may be only one
alternative in the subpattern. It is always skipped if control reaches this
point in the pattern; the idea of DEFINE is that it can be used to define
"subroutines" that can be referenced from elsewhere. (The use of subroutines
is described below.) For example, a pattern to match an IPv4 address such as
"192.168.23.245" could be
written like this (ignore whitespace and line breaks):</p>

<quote><p>  (?(DEFINE) (?&lt;byte&gt; 2[0-4]\d | 25[0-5] | 1\d\d | [1-9]?\d) )
  \b (?&amp;byte) (\.(?&amp;byte)){3} \b</p></quote>

<p>The first part of the pattern is a DEFINE group inside which a
another group named "byte" is defined. This matches an individual
component of an IPv4 address (a number less than 256). When matching
takes place, this part of the pattern is skipped because DEFINE acts
like a false condition. The rest of the pattern uses references to the
named group to match the four dot-separated components of an IPv4
address, insisting on a word boundary at each end.</p>

<p><em>Assertion conditions</em></p>

<p>If the condition is not in any of the above formats, it must be an
assertion.  This may be a positive or negative lookahead or lookbehind
assertion. Consider this pattern, again containing non-significant
whitespace, and with the two alternatives on the second line:</p>

<code type="none">
  (?(?=[^a-z]*[a-z])
  \d{2}-[a-z]{3}-\d{2}  |  \d{2}-\d{2}-\d{2} )</code>

<p>The condition is a positive lookahead assertion that matches an optional
sequence of non-letters followed by a letter. In other words, it tests for the
presence of at least one letter in the subject. If a letter is found, the
subject is matched against the first alternative; otherwise it is matched
against the second. This pattern matches strings in one of the two forms
dd-aaa-dd or dd-dd-dd, where aaa are letters and dd are digits.</p>


</section>

<section><marker id="sect19"></marker><title>Comments</title>

<p>There are two ways of including comments in patterns that are processed by
PCRE. In both cases, the start of the comment must not be in a character class,
nor in the middle of any other sequence of related characters such as (?: or a
subpattern name or number. The characters that make up a comment play no part
in the pattern matching.</p>

<p>The sequence (?# marks the start of a comment that continues up to the next
closing parenthesis. Nested parentheses are not permitted. If the PCRE_EXTENDED
option is set, an unescaped # character also introduces a comment, which in
this case continues to immediately after the next newline character or
character sequence in the pattern. Which characters are interpreted as newlines
is controlled by the options passed to a compiling function or by a special
sequence at the start of the pattern, as described in the section entitled
"Newline conventions"
above. Note that the end of this type of comment is a literal newline sequence
in the pattern; escape sequences that happen to represent a newline do not
count. For example, consider this pattern when <c>extended</c> is set, and the
default newline convention is in force:</p>

<quote><p>  abc #comment \n still comment</p></quote>

<p>On encountering the # character, <em>pcre_compile()</em> skips along, looking for
a newline in the pattern. The sequence \n is still literal at this stage, so
it does not terminate the comment. Only an actual character with the code value
0x0a (the default newline) does so.</p>

</section>

<section><marker id="sect20"></marker><title>Recursive patterns</title>

<p>Consider the problem of matching a string in parentheses, allowing for
unlimited nested parentheses. Without the use of recursion, the best that can
be done is to use a pattern that matches up to some fixed depth of nesting. It
is not possible to handle an arbitrary nesting depth.</p>

<p>For some time, Perl has provided a facility that allows regular
expressions to recurse (amongst other things). It does this by
interpolating Perl code in the expression at run time, and the code
can refer to the expression itself. A Perl pattern using code
interpolation to solve the parentheses problem can be created like
this:</p>

<quote><p>  $re = qr{\( (?: (?&gt;[^()]+) | (?p{$re}) )* \)}x;</p></quote>

<p>The (?p{...}) item interpolates Perl code at run time, and in this
case refers recursively to the pattern in which it appears.</p>

<p>Obviously, PCRE cannot support the interpolation of Perl code. Instead, it
supports special syntax for recursion of the entire pattern, and also for
individual subpattern recursion. After its introduction in PCRE and Python,
this kind of recursion was subsequently introduced into Perl at release 5.10.</p>

<p>A special item that consists of (? followed by a number greater
than zero and a closing parenthesis is a recursive subroutine call of the
subpattern of the given number, provided that it occurs inside that
subpattern. (If not, it is a non-recursive subroutine call, which is described in
the next section.) The special item (?R) or (?0) is a recursive call
of the entire regular expression.</p>

<p>This PCRE pattern solves the nested parentheses problem (assume the
<c>extended</c> option is set so that whitespace is ignored):</p>

<quote><p>  \( ( [^()]++ | (?R) )* \)</p></quote>

<p>First it matches an opening parenthesis. Then it matches any number
of substrings which can either be a sequence of non-parentheses, or a
recursive match of the pattern itself (that is, a correctly
parenthesized substring).  Finally there is a closing
parenthesis. Note the use of a possessive quantifier to avoid
backtracking into sequences of non-parentheses.</p>

<p>If this were part of a larger pattern, you would not want to
recurse the entire pattern, so instead you could use this:</p>

<quote><p>  ( \( ( [^()]++ | (?1) )* \) )</p></quote>

<p>We have put the pattern into parentheses, and caused the recursion
to refer to them instead of the whole pattern.</p>

<p>In a larger pattern, keeping track of parenthesis numbers can be tricky. This
is made easier by the use of relative references. Instead of (?1) in the
pattern above you can write (?-2) to refer to the second most recently opened
parentheses preceding the recursion. In other words, a negative number counts
capturing parentheses leftwards from the point at which it is encountered.</p>

<p>It is also possible to refer to subsequently opened parentheses, by
writing references such as (?+2). However, these cannot be recursive
because the reference is not inside the parentheses that are
referenced. They are always non-recursive subroutine calls, as described in the
next section.</p>

<p>An alternative approach is to use named parentheses instead. The
Perl syntax for this is (?&amp;name); PCRE's earlier syntax
(?P&gt;name) is also supported. We could rewrite the above example as
follows:</p>

<quote><p>  (?&lt;pn&gt; \( ( [^()]++ | (?&amp;pn) )* \) )</p></quote>

<p>If there is more than one subpattern with the same name, the earliest one is
used.</p>

<p>This particular example pattern that we have been looking at contains nested
unlimited repeats, and so the use of a possessive quantifier for matching
strings of non-parentheses is important when applying the pattern to strings
that do not match. For example, when this pattern is applied to</p>

<quote><p>  (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()</p></quote>

<p>it yields "no match" quickly. However, if a possessive quantifier is not used,
the match runs for a very long time indeed because there are so many different
ways the + and * repeats can carve up the subject, and all have to be tested
before failure can be reported.</p>

<p>At the end of a match, the values of capturing parentheses are those from
the outermost level. If the pattern above is matched against</p>

<quote><p>  (ab(cd)ef)</p></quote>

<p>the value for the inner capturing parentheses (numbered 2) is "ef", which is
the last value taken on at the top level. If a capturing subpattern is not
matched at the top level, its final captured value is unset, even if it was
(temporarily) set at a deeper level during the matching process.</p>

<p>Do not confuse the (?R) item with the condition (R), which tests for recursion.
Consider this pattern, which matches text in angle brackets, allowing for
arbitrary nesting. Only digits are allowed in nested brackets (that is, when
recursing), whereas any characters are permitted at the outer level.</p>

<quote><p>  &lt; (?: (?(R) \d++  | [^&lt;&gt;]*+) | (?R)) * &gt;</p></quote>

<p>In this pattern, (?(R) is the start of a conditional subpattern, with two
different alternatives for the recursive and non-recursive cases. The (?R) item
is the actual recursive call.</p>

<p><em>Differences in recursion processing between PCRE and Perl</em></p>

<p>Recursion processing in PCRE differs from Perl in two important ways. In PCRE
(like Python, but unlike Perl), a recursive subpattern call is always treated
as an atomic group. That is, once it has matched some of the subject string, it
is never re-entered, even if it contains untried alternatives and there is a
subsequent matching failure. This can be illustrated by the following pattern,
which purports to match a palindromic string that contains an odd number of
characters (for example, "a", "aba", "abcba", "abcdcba"):</p>

<quote><p>  ^(.|(.)(?1)\2)$</p></quote>

<p>The idea is that it either matches a single character, or two identical
characters surrounding a sub-palindrome. In Perl, this pattern works; in PCRE
it does not if the pattern is longer than three characters. Consider the
subject string "abcba":</p>

<p>At the top level, the first character is matched, but as it is not at the end
of the string, the first alternative fails; the second alternative is taken
and the recursion kicks in. The recursive call to subpattern 1 successfully
matches the next character ("b"). (Note that the beginning and end of line
tests are not part of the recursion).</p>

<p>Back at the top level, the next character ("c") is compared with what
subpattern 2 matched, which was "a". This fails. Because the recursion is
treated as an atomic group, there are now no backtracking points, and so the
entire match fails. (Perl is able, at this point, to re-enter the recursion and
try the second alternative.) However, if the pattern is written with the
alternatives in the other order, things are different:</p>

<quote><p>  ^((.)(?1)\2|.)$</p></quote>

<p>This time, the recursing alternative is tried first, and continues to recurse
until it runs out of characters, at which point the recursion fails. But this
time we do have another alternative to try at the higher level. That is the big
difference: in the previous case the remaining alternative is at a deeper
recursion level, which PCRE cannot use.</p>

<p>To change the pattern so that it matches all palindromic strings, not just
those with an odd number of characters, it is tempting to change the pattern to
this:</p>

<quote><p>  ^((.)(?1)\2|.?)$</p></quote>

<p>Again, this works in Perl, but not in PCRE, and for the same reason. When a
deeper recursion has matched a single character, it cannot be entered again in
order to match an empty string. The solution is to separate the two cases, and
write out the odd and even cases as alternatives at the higher level:</p>

<quote><p>  ^(?:((.)(?1)\2|)|((.)(?3)\4|.))</p></quote>

<p>If you want to match typical palindromic phrases, the pattern has to ignore all
non-word characters, which can be done like this:</p>

  <quote><p>  ^\W*+(?:((.)\W*+(?1)\W*+\2|)|((.)\W*+(?3)\W*+\4|\W*+.\W*+))\W*+$</p></quote>

<p>If run with the <c>caseless</c> option, this pattern matches phrases such as "A
man, a plan, a canal: Panama!" and it works well in both PCRE and Perl. Note
the use of the possessive quantifier *+ to avoid backtracking into sequences of
non-word characters. Without this, PCRE takes a great deal longer (ten times or
more) to match typical phrases, and Perl takes so long that you think it has
gone into a loop.</p>

<p><em>WARNING</em>: The palindrome-matching patterns above work only if the subject
string does not start with a palindrome that is shorter than the entire string.
For example, although "abcba" is correctly matched, if the subject is "ababa",
PCRE finds the palindrome "aba" at the start, then fails at top level because
the end of the string does not follow. Once again, it cannot jump back into the
recursion to try other alternatives, so the entire match fails.</p>

<p>The second way in which PCRE and Perl differ in their recursion processing is
in the handling of captured values. In Perl, when a subpattern is called
recursively or as a subpattern (see the next section), it has no access to any
values that were captured outside the recursion, whereas in PCRE these values
can be referenced. Consider this pattern:</p>

<quote><p>  ^(.)(\1|a(?2))</p></quote>

<p>In PCRE, this pattern matches "bab". The first capturing parentheses match "b",
then in the second group, when the back reference \1 fails to match "b", the
second alternative matches "a" and then recurses. In the recursion, \1 does
now match "b" and so the whole match succeeds. In Perl, the pattern fails to
match because inside the recursive call \1 cannot access the externally set
value.</p>

</section>

<section><marker id="sect21"></marker><title>Subpatterns as subroutines</title>

<p>If the syntax for a recursive subpattern call (either by number or by
name) is used outside the parentheses to which it refers, it operates like a
subroutine in a programming language. The called subpattern may be defined
before or after the reference. A numbered reference can be absolute or
relative, as in these examples:</p>

<list>
  <item>(...(absolute)...)...(?2)...</item>
  <item>(...(relative)...)...(?-1)...</item>
  <item>(...(?+1)...(relative)...</item>
</list>

<p>An earlier example pointed out that the pattern</p>

<quote><p>  (sens|respons)e and \1ibility</p></quote>

<p>matches "sense and sensibility" and "response and responsibility", but not
"sense and responsibility". If instead the pattern</p>

<quote><p>  (sens|respons)e and (?1)ibility</p></quote>

<p>is used, it does match "sense and responsibility" as well as the other two
strings. Another example is given in the discussion of DEFINE above.</p>

<p>All subroutine calls, whether recursive or not, are always treated as atomic
groups. That is, once a subroutine has matched some of the subject string, it
is never re-entered, even if it contains untried alternatives and there is a
subsequent matching failure. Any capturing parentheses that are set during the
subroutine call revert to their previous values afterwards.</p>

<p>Processing options such as case-independence are fixed when a subpattern is
defined, so if it is used as a subroutine, such options cannot be changed for
different calls. For example, consider this pattern:</p>
<quote><p>  (abc)(?i:(?-1))</p></quote>

<p>It matches "abcabc". It does not match "abcABC" because the change of
processing option does not affect the called subpattern.</p>

</section>

<section><marker id="sect22"></marker><title>Oniguruma subroutine syntax</title>
<p>For compatibility with Oniguruma, the non-Perl syntax \g followed by a name or
a number enclosed either in angle brackets or single quotes, is an alternative
syntax for referencing a subpattern as a subroutine, possibly recursively. Here
are two of the examples used above, rewritten using this syntax:</p>
<quote>
  <p>    (?&lt;pn&gt; \( ( (?&gt;[^()]+) | \g&lt;pn&gt; )* \) )</p>
  <p>    (sens|respons)e and \g'1'ibility</p>
</quote>
<p>PCRE supports an extension to Oniguruma: if a number is preceded by a
plus or a minus sign it is taken as a relative reference. For example:</p>

  <quote><p>    (abc)(?i:\g&lt;-1&gt;)</p></quote>

<p>Note that \g{...} (Perl syntax) and \g&lt;...&gt; (Oniguruma syntax) are <i>not</i>
synonymous. The former is a back reference; the latter is a subroutine call.</p>

</section>
<!-- XXX C interface

<section> <marker id="sect22"><title>Callouts</title></marker>

<p>Perl has a feature whereby using the sequence (?{...}) causes arbitrary Perl
code to be obeyed in the middle of matching a regular expression. This makes it
possible, amongst other things, to extract different substrings that match the
same pair of parentheses when there is a repetition.</p>

<p>PCRE provides a similar feature, but of course it cannot obey arbitrary Perl
code. The feature is called "callout". The caller of PCRE provides an external
function by putting its entry point in the global variable <em>pcre_callout</em>.
By default, this variable contains NULL, which disables all calling out.</p>

<p>Within a regular expression, (?C) indicates the points at which the external
function is to be called. If you want to identify different callout points, you
can put a number less than 256 after the letter C. The default value is zero.
For example, this pattern has two callout points:</p>

<quote><p>  (?C1)abc(?C2)def</p></quote>


<p>If the <c>AUTO_CALLOUT</c> flag is passed to <c>re:compile/2</c>, callouts are
automatically installed before each item in the pattern. They are all numbered
255.</p>

<p>During matching, when PCRE reaches a callout point (and <em>pcre_callout</em> is
set), the external function is called. It is provided with the number of the
callout, the position in the pattern, and, optionally, one item of data
originally supplied by the caller of <c>re:run/3</c>. The callout function
may cause matching to proceed, to backtrack, or to fail altogether. A complete
description of the interface to the callout function is given in the
<em>pcrecallout</em>
documentation.</p>


</section>
-->

<section><marker id="sect23"></marker><title>Backtracking control</title>

<p>Perl 5.10 introduced a number of "Special Backtracking Control Verbs", which
are still described in the Perl documentation as "experimental and subject to
change or removal in a future version of Perl". It goes on to say: "Their usage
in production code should be noted to avoid problems during upgrades." The same
remarks apply to the PCRE features described in this section.</p>

<p>The new verbs make use of what was previously invalid syntax: an opening
parenthesis followed by an asterisk. They are generally of the form
(*VERB) or (*VERB:NAME). Some may take either form, possibly behaving
differently depending on whether or not a name is present. A name is any
sequence of characters that does not include a closing parenthesis. The maximum
length of name is 255 in the 8-bit library and 65535 in the 16-bit and 32-bit
libraries. If the name is empty, that is, if the closing parenthesis
immediately follows the colon, the effect is as if the colon were not there.
Any number of these verbs may occur in a pattern.</p>

<!-- XXX C interface
<p>Since these verbs are specifically related to backtracking, most of them can be
used only when the pattern is to be matched using one of the traditional
matching functions, because these use a backtracking algorithm. With the
exception of (*FAIL), which behaves like a failing negative assertion, the
backtracking control verbs cause an error if encountered by a DFA matching
function.</p>
-->
<p>The behaviour of these verbs in
repeated groups, assertions,
and in subpatterns called as subroutines
(whether or not recursively) is documented below.</p>

<p><em>Optimizations that affect backtracking verbs</em></p>

<p>PCRE contains some optimizations that are used to speed up matching by running
some checks at the start of each match attempt. For example, it may know the
minimum length of matching subject, or that a particular character must be
present. When one of these optimizations bypasses the running of a match, any
included backtracking verbs will not, of course, be processed. You can suppress
the start-of-match optimizations by setting the <c>no_start_optimize</c> option
when calling <c>re:compile/2</c> or <c>re:run/3</c>, or by starting the
pattern with (*NO_START_OPT).</p>

<p>Experiments with Perl suggest that it too has similar optimizations, sometimes
leading to anomalous results.</p>

<p><em>Verbs that act immediately</em></p>

<p>The following verbs act as soon as they are encountered. They may not be
followed by a name.</p>

<quote><p>    (*ACCEPT)</p></quote>

<p>This verb causes the match to end successfully, skipping the remainder of the
pattern. However, when it is inside a subpattern that is called as a
subroutine, only that subpattern is ended successfully. Matching then continues
at the outer level. If (*ACCEPT) in triggered in a positive assertion, the
assertion succeeds; in a negative assertion, the assertion fails.</p>

<p>If (*ACCEPT) is inside capturing parentheses, the data so far is captured. For
example:</p>

<quote><p>    A((?:A|B(*ACCEPT)|C)D)</p></quote>

<p>This matches "AB", "AAD", or "ACD"; when it matches "AB", "B" is captured by
the outer parentheses.</p>

<quote><p>    (*FAIL) or (*F)</p></quote>

<p>This verb causes a matching failure, forcing backtracking to occur. It is
equivalent to (?!) but easier to read. The Perl documentation notes that it is
probably useful only when combined with (?{}) or (??{}). Those are, of course,
Perl features that are not present in PCRE. The nearest equivalent is the
callout feature, as for example in this pattern:</p>

<quote><p>    a+(?C)(*FAIL)</p></quote>

<p>A match with the string "aaaa" always fails, but the callout is taken before
each backtrack happens (in this example, 10 times).</p>

<p><em>Recording which path was taken</em></p>

<p>There is one verb whose main purpose is to track how a match was arrived at,
though it also has a secondary use in conjunction with advancing the match
starting point (see (*SKIP) below).</p>

<warning>
<p>In Erlang, there is no interface to retrieve a mark with <c>re:run/{2,3]</c>,
so only the secondary purpose is relevant to the Erlang programmer!</p>
<p>The rest of this section is therefore deliberately not adapted for reading
by the Erlang programmer, however the examples might help in understanding NAMES as
they can be used by (*SKIP).</p>
</warning>

<quote><p>    (*MARK:NAME) or (*:NAME)</p></quote>

<p>A name is always required with this verb. There may be as many instances of
(*MARK) as you like in a pattern, and their names do not have to be unique.</p>

<p>When a match succeeds, the name of the last-encountered (*MARK:NAME),
(*PRUNE:NAME), or (*THEN:NAME) on the matching path is passed back to the
caller as described in the section entitled "Extra data for <c>pcre_exec()</c>"
in the <c>pcreapi</c>
documentation. Here is an example of <c>pcretest</c> output, where the /K
modifier requests the retrieval and outputting of (*MARK) data:</p>
<code>
    re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K
  data&gt; XY
   0: XY
  MK: A
  XZ
   0: XZ
  MK: B</code>

<p>The (*MARK) name is tagged with "MK:" in this output, and in this example it
indicates which of the two alternatives matched. This is a more efficient way
of obtaining this information than putting each alternative in its own
capturing parentheses.</p>

<p>If a verb with a name is encountered in a positive assertion that is true, the
name is recorded and passed back if it is the last-encountered. This does not
happen for negative assertions or failing positive assertions.</p>

<p>After a partial match or a failed match, the last encountered name in the
entire match process is returned. For example:</p>
<code>
    re&gt; /X(*MARK:A)Y|X(*MARK:B)Z/K
  data&gt; XP
  No match, mark = B</code>

<p>Note that in this unanchored example the mark is retained from the match
attempt that started at the letter "X" in the subject. Subsequent match
attempts starting at "P" and then with an empty string do not get as far as the
(*MARK) item, but nevertheless do not reset it.</p>

<!--
<p>If you are interested in (*MARK) values after failed matches, you should
probably set the PCRE_NO_START_OPTIMIZE option
(see above)
to ensure that the match is always attempted.</p>
-->

<p><em>Verbs that act after backtracking</em></p>

<p>The following verbs do nothing when they are encountered. Matching continues
with what follows, but if there is no subsequent match, causing a backtrack to
the verb, a failure is forced. That is, backtracking cannot pass to the left of
the verb. However, when one of these verbs appears inside an atomic group or an
assertion that is true, its effect is confined to that group, because once the
group has been matched, there is never any backtracking into it. In this
situation, backtracking can "jump back" to the left of the entire atomic group
or assertion. (Remember also, as stated above, that this localization also
applies in subroutine calls.)</p>

<p>These verbs differ in exactly what kind of failure occurs when backtracking
reaches them. The behaviour described below is what happens when the verb is
not in a subroutine or an assertion. Subsequent sections cover these special
cases.</p>

<quote><p>    (*COMMIT)</p></quote>

<p>This verb, which may not be followed by a name, causes the whole match to fail
outright if there is a later matching failure that causes backtracking to reach
it. Even if the pattern is unanchored, no further attempts to find a match by
advancing the starting point take place. If (*COMMIT) is the only backtracking
verb that is encountered, once it has been passed <c>re:run/{2,3}</c> is
committed to finding a match at the current starting point, or not at all. For
example:</p>

<quote><p>    a+(*COMMIT)b</p></quote>

<p>This matches "xxaab" but not "aacaab". It can be thought of as a kind of
dynamic anchor, or "I've started, so I must finish." The name of the most
recently passed (*MARK) in the path is passed back when (*COMMIT) forces a
match failure.</p>

<p>If there is more than one backtracking verb in a pattern, a different one that
follows (*COMMIT) may be triggered first, so merely passing (*COMMIT) during a
match does not always guarantee that a match must be at this starting point.</p>

<p>Note that (*COMMIT) at the start of a pattern is not the same as an anchor,
unless PCRE's start-of-match optimizations are turned off, as shown in this
 example:</p>
<code type="none">
  1&gt; re:run("xyzabc","(*COMMIT)abc",[{capture,all,list}]).
  {match,["abc"]}
  2&gt; re:run("xyzabc","(*COMMIT)abc",[{capture,all,list},no_start_optimize]).
  nomatch</code>

<p>PCRE knows that any match must start with "a", so the optimization skips along
the subject to "a" before running the first match attempt, which succeeds. When
the optimization is disabled by the <c>no_start_optimize</c> option, the match
starts at "x" and so the (*COMMIT) causes it to fail without trying any other
starting points.</p>

<quote><p>    (*PRUNE) or (*PRUNE:NAME)</p></quote>

<p>This verb causes the match to fail at the current starting position in the
subject if there is a later matching failure that causes backtracking to reach
it. If the pattern is unanchored, the normal "bumpalong" advance to the next
starting character then happens. Backtracking can occur as usual to the left of
(*PRUNE), before it is reached, or when matching to the right of (*PRUNE), but
if there is no match to the right, backtracking cannot cross (*PRUNE). In
simple cases, the use of (*PRUNE) is just an alternative to an atomic group or
possessive quantifier, but there are some uses of (*PRUNE) that cannot be
expressed in any other way. In an anchored pattern (*PRUNE) has the same effect
as (*COMMIT).</p>

<p>The behaviour of (*PRUNE:NAME) is the not the same as (*MARK:NAME)(*PRUNE).
It is like (*MARK:NAME) in that the name is remembered for passing back to the
caller. However, (*SKIP:NAME) searches only for names set with (*MARK).</p>

<warning>
<p>The fact that (*PRUNE:NAME) remembers the name is useless to the Erlang programmer, 
as names can not be retrieved.</p>
</warning>

<quote><p>    (*SKIP)</p></quote>

<p>This verb, when given without a name, is like (*PRUNE), except that if the
pattern is unanchored, the "bumpalong" advance is not to the next character,
but to the position in the subject where (*SKIP) was encountered. (*SKIP)
signifies that whatever text was matched leading up to it cannot be part of a
successful match. Consider:</p>

<quote><p>    a+(*SKIP)b</p></quote>

<p>If the subject is "aaaac...", after the first match attempt fails (starting at
the first character in the string), the starting point skips on to start the
next attempt at "c". Note that a possessive quantifer does not have the same
effect as this example; although it would suppress backtracking during the
first match attempt, the second attempt would start at the second character
instead of skipping on to "c".</p>

<quote><p>    (*SKIP:NAME)</p></quote>

<p>When (*SKIP) has an associated name, its behaviour is modified. When it is
triggered, the previous path through the pattern is searched for the most
recent (*MARK) that has the same name. If one is found, the "bumpalong" advance
is to the subject position that corresponds to that (*MARK) instead of to where
(*SKIP) was encountered. If no (*MARK) with a matching name is found, the
(*SKIP) is ignored.</p>

<p>Note that (*SKIP:NAME) searches only for names set by (*MARK:NAME). It ignores
names that are set by (*PRUNE:NAME) or (*THEN:NAME).</p>

<quote><p>    (*THEN) or (*THEN:NAME)</p></quote>

<p>This verb causes a skip to the next innermost alternative when backtracking
reaches it. That is, it cancels any further backtracking within the current
alternative. Its name comes from the observation that it can be used for a
pattern-based if-then-else block:</p>

<quote><p>    ( COND1 (*THEN) FOO | COND2 (*THEN) BAR | COND3 (*THEN) BAZ ) ...</p></quote>

<p>If the COND1 pattern matches, FOO is tried (and possibly further items after
the end of the group if FOO succeeds); on failure, the matcher skips to the
second alternative and tries COND2, without backtracking into COND1. If that
succeeds and BAR fails, COND3 is tried. If subsequently BAZ fails, there are no
more alternatives, so there is a backtrack to whatever came before the entire
group. If (*THEN) is not inside an alternation, it acts like (*PRUNE).</p>

<p>The behaviour of (*THEN:NAME) is the not the same as (*MARK:NAME)(*THEN).
It is like (*MARK:NAME) in that the name is remembered for passing back to the
caller. However, (*SKIP:NAME) searches only for names set with (*MARK).</p>

<warning>
<p>The fact that (*THEN:NAME) remembers the name is useless to the Erlang programmer, 
as names can not be retrieved.</p>
</warning>

<p>A subpattern that does not contain a | character is just a part of the
enclosing alternative; it is not a nested alternation with only one
alternative. The effect of (*THEN) extends beyond such a subpattern to the
enclosing alternative. Consider this pattern, where A, B, etc. are complex
pattern fragments that do not contain any | characters at this level:</p>

<quote><p>    A (B(*THEN)C) | D</p></quote>

<p>If A and B are matched, but there is a failure in C, matching does not
backtrack into A; instead it moves to the next alternative, that is, D.
However, if the subpattern containing (*THEN) is given an alternative, it
behaves differently:</p>

<quote><p>    A (B(*THEN)C | (*FAIL)) | D</p></quote>

<p>The effect of (*THEN) is now confined to the inner subpattern. After a failure
in C, matching moves to (*FAIL), which causes the whole subpattern to fail
because there are no more alternatives to try. In this case, matching does now
backtrack into A.</p>

<p>Note that a conditional subpattern is not considered as having two
alternatives, because only one is ever used. In other words, the | character in
a conditional subpattern has a different meaning. Ignoring white space,
consider:</p>

<quote><p>    ^.*? (?(?=a) a | b(*THEN)c )</p></quote>

<p>If the subject is "ba", this pattern does not match. Because .*? is ungreedy,
it initially matches zero characters. The condition (?=a) then fails, the
character "b" is matched, but "c" is not. At this point, matching does not
backtrack to .*? as might perhaps be expected from the presence of the |
character. The conditional subpattern is part of the single alternative that
comprises the whole pattern, and so the match fails. (If there was a backtrack
into .*?, allowing it to match "b", the match would succeed.)</p>

<p>The verbs just described provide four different "strengths" of control when
subsequent matching fails. (*THEN) is the weakest, carrying on the match at the
next alternative. (*PRUNE) comes next, failing the match at the current
starting position, but allowing an advance to the next character (for an
unanchored pattern). (*SKIP) is similar, except that the advance may be more
than one character. (*COMMIT) is the strongest, causing the entire match to
fail.</p>


<p><em>More than one backtracking verb</em></p>

<p>If more than one backtracking verb is present in a pattern, the one that is
backtracked onto first acts. For example, consider this pattern, where A, B,
etc. are complex pattern fragments:</p>

<quote><p>    (A(*COMMIT)B(*THEN)C|ABD)</p></quote>

<p>If A matches but B fails, the backtrack to (*COMMIT) causes the entire match to
fail. However, if A and B match, but C fails, the backtrack to (*THEN) causes
the next alternative (ABD) to be tried. This behaviour is consistent, but is
not always the same as Perl's. It means that if two or more backtracking verbs
appear in succession, all the the last of them has no effect. Consider this
example:</p>

<quote><p>    ...(*COMMIT)(*PRUNE)...</p></quote>

<p>If there is a matching failure to the right, backtracking onto (*PRUNE) cases
it to be triggered, and its action is taken. There can never be a backtrack
onto (*COMMIT).</p>

<p><em>Backtracking verbs in repeated groups</em></p>

<p>PCRE differs from Perl in its handling of backtracking verbs in repeated
groups. For example, consider:</p>

<quote><p>    /(a(*COMMIT)b)+ac/</p></quote>

<p>If the subject is "abac", Perl matches, but PCRE fails because the (*COMMIT) in
the second repeat of the group acts.</p>

<p><em>Backtracking verbs in assertions</em></p>

<p>(*FAIL) in an assertion has its normal effect: it forces an immediate backtrack.</p>

<p>(*ACCEPT) in a positive assertion causes the assertion to succeed without any
further processing. In a negative assertion, (*ACCEPT) causes the assertion to
fail without any further processing.</p>

<p>The other backtracking verbs are not treated specially if they appear in a
positive assertion. In particular, (*THEN) skips to the next alternative in the
innermost enclosing group that has alternations, whether or not this is within
the assertion.</p>

<p>Negative assertions are, however, different, in order to ensure that changing a
positive assertion into a negative assertion changes its result. Backtracking
into (*COMMIT), (*SKIP), or (*PRUNE) causes a negative assertion to be true,
without considering any further alternative branches in the assertion.
Backtracking into (*THEN) causes it to skip to the next enclosing alternative
within the assertion (the normal behaviour), but if the assertion does not have
such an alternative, (*THEN) behaves like (*PRUNE).</p>

<p><em>Backtracking verbs in subroutines</em></p>

<p>These behaviours occur whether or not the subpattern is called recursively.
Perl's treatment of subroutines is different in some cases.</p>

<p>(*FAIL) in a subpattern called as a subroutine has its normal effect: it forces
an immediate backtrack.</p>

<p>(*ACCEPT) in a subpattern called as a subroutine causes the subroutine match to
succeed without any further processing. Matching then continues after the
subroutine call.</p>

<p>(*COMMIT), (*SKIP), and (*PRUNE) in a subpattern called as a subroutine cause
the subroutine match to fail.</p>

<p>(*THEN) skips to the next alternative in the innermost enclosing group within
the subpattern that has alternatives. If there is no such group within the
subpattern, (*THEN) causes the subroutine match to fail.</p>

</section>

</erlref>

