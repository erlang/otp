<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2001</year><year>2023</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>gb_sets</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module since="">gb_sets</module>
  <modulesummary>Sets represented by general balanced trees.</modulesummary>
  <description>
    <p>This module provides ordered sets using Prof. Arne Andersson's
      General Balanced Trees. Ordered sets can be much more efficient than
      using ordered lists, for larger sets, but depends on the
      application.</p>

    <p>The data representing a set as used by this module is to be
    regarded as opaque by other modules.  In abstract terms, the
    representation is a composite type of existing Erlang terms. See
    note on <seeguide
    marker="system/reference_manual:data_types#no_user_types">data
    types</seeguide>. Any code assuming knowledge of the format is
    running on thin ice.</p>

    <p>This module considers two elements as different if and only if
      they do not compare equal (<c>==</c>).</p>
  </description>

  <section>
    <title>Complexity Note</title>
    <p>The complexity on set operations is bounded by either <em>O(|S|)</em> or
      <em>O(|T| * log(|S|))</em>, where S is the largest given set, depending
      on which is fastest for any particular function call. For
      operating on sets of almost equal size, this implementation is
      about 3 times slower than using ordered-list sets directly. For
      sets of very different sizes, however, this solution can be
      arbitrarily much faster; in practical cases, often
      10-100 times. This implementation is particularly suited for
      accumulating elements a few at a time, building up a large set
      (&gt; 100-200 elements), and repeatedly testing for
      membership in the current set.</p>

    <p>As with normal tree structures, lookup (membership testing),
      insertion, and deletion have logarithmic complexity.</p>
  </section>

  <section>
    <title>Compatibility</title>
    <p>See the <seeerl marker="sets#compatibility">Compatibility Section
      in the <c>sets(3)</c> module</seeerl> for information about
      the compatibility of the different implementations of sets in the
      Standard Library.</p>
  </section>

  <datatypes>
    <datatype>
      <name name="set" n_vars="1"/>
      <desc><p>A general balanced set.</p></desc>
    </datatype>
    <datatype>
      <name name="set" n_vars="0"/>
    </datatype>
    <datatype>
      <name name="iter" n_vars="1"/>
      <desc><p>A general balanced set iterator.</p></desc>
    </datatype>
    <datatype>
      <name name="iter" n_vars="0"/>
    </datatype>
  </datatypes>

  <funcs>
    <func>
      <name name="add" arity="2" since=""/>
      <name name="add_element" arity="2" since=""/>
      <fsummary>Add a (possibly existing) element to a set.</fsummary>
      <desc>
        <p>Returns a new set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> inserted. If <c><anno>Element</anno></c>
          is already an
          element in <c><anno>Set1</anno></c>, nothing is changed.</p>
      </desc>
    </func>

    <func>
      <name name="balance" arity="1" since=""/>
      <fsummary>Rebalance tree representation of a set.</fsummary>
      <desc>
        <p>Rebalances the tree representation of <c><anno>Set1</anno></c>.
          Notice that
          this is rarely necessary, but can be motivated when a large
          number of elements have been deleted from the tree without
          further insertions. Rebalancing can then be forced
          to minimise lookup times, as deletion does not
          rebalance the tree.</p>
      </desc>
    </func>

    <func>
      <name name="del_element" arity="2" since=""/>
      <fsummary>Remove a (possibly non-existing) element from a set.</fsummary>
      <desc>
        <p>Returns a new set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> removed. If <c><anno>Element</anno></c>
          is not an element
          in <c><anno>Set1</anno></c>, nothing is changed.</p>
      </desc>
    </func>

    <func>
      <name name="delete" arity="2" since=""/>
      <fsummary>Remove an element from a set.</fsummary>
      <desc>
        <p>Returns a new set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> removed. Assumes that
          <c><anno>Element</anno></c> is present
          in <c><anno>Set1</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="delete_any" arity="2" since=""/>
      <fsummary>Remove a (possibly non-existing) element from a set.</fsummary>
      <desc>
        <p>Returns a new set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> removed. If <c><anno>Element</anno></c>
          is not an element
          in <c><anno>Set1</anno></c>, nothing is changed.</p>
      </desc>
    </func>

    <func>
      <name name="difference" arity="2" since=""/>
      <fsummary>Return the difference of two sets.</fsummary>
      <desc>
        <p>Returns only the elements of <c><anno>Set1</anno></c> that are not
          also elements of <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="empty" arity="0" since=""/>
      <fsummary>Return an empty set.</fsummary>
      <desc>
        <p>Returns a new empty set.</p>
      </desc>
    </func>

    <func>
      <name name="filter" arity="2" since=""/>
      <fsummary>Filter set elements.</fsummary>
      <desc>
        <p>Filters elements in <c><anno>Set1</anno></c> using predicate function
          <c><anno>Pred</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="fold" arity="3" since=""/>
      <fsummary>Fold over set elements.</fsummary>
      <desc>
        <p>Folds <c><anno>Function</anno></c> over every element in
          <c><anno>Set</anno></c>
          returning the final value of the accumulator.</p>
      </desc>
    </func>

    <func>
      <name name="from_list" arity="1" since=""/>
      <fsummary>Convert a list into a set.</fsummary>
      <desc>
        <p>Returns a set of the elements in <c><anno>List</anno></c>, where
          <c><anno>List</anno></c> can be unordered and contain duplicates.</p>
      </desc>
    </func>

    <func>
      <name name="from_ordset" arity="1" since=""/>
      <fsummary>Make a set from an ordset list.</fsummary>
      <desc>
        <p>Turns an ordered-set list <c><anno>List</anno></c> into a set.
          The list must not contain duplicates.</p>
      </desc>
    </func>

    <func>
      <name name="insert" arity="2" since=""/>
      <fsummary>Add a new element to a set.</fsummary>
      <desc>
        <p>Returns a new set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> inserted. Assumes that
          <c><anno>Element</anno></c> is not
          present in <c><anno>Set1</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="intersection" arity="1" since=""/>
      <fsummary>Return the intersection of a list of sets.</fsummary>
      <desc>
        <p>Returns the intersection of the non-empty list of sets.</p>
      </desc>
    </func>

    <func>
      <name name="intersection" arity="2" since=""/>
      <fsummary>Return the intersection of two sets.</fsummary>
      <desc>
        <p>Returns the intersection of <c><anno>Set1</anno></c> and
          <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="is_disjoint" arity="2" since=""/>
      <fsummary>Check whether two sets are disjoint.</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Set1</anno></c> and
          <c><anno>Set2</anno></c> are disjoint (have no elements in common),
	  otherwise <c>false</c>.</p>
      </desc>
    </func>

    <func>
      <name name="is_element" arity="2" since=""/>
      <fsummary>Test for membership of a set.</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Element</anno></c> is an element of
          <c><anno>Set</anno></c>, otherwise <c>false</c>.</p>
      </desc>
    </func>

    <func>
      <name name="is_empty" arity="1" since=""/>
      <fsummary>Test for empty set.</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Set</anno></c> is an empty set,
          otherwise <c>false</c>.</p>
      </desc>
    </func>

    <func>
      <name name="is_member" arity="2" since=""/>
      <fsummary>Test for membership of a set.</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Element</anno></c> is an element of
          <c><anno>Set</anno></c>, otherwise <c>false</c>.</p>
      </desc>
    </func>

    <func>
      <name name="is_set" arity="1" since=""/>
      <fsummary>Test for a set.</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Term</anno></c> appears to
        be a set, otherwise <c>false</c>.  This function will return
        <c>true</c> for any term that coincides with the
        representation of a <c>gb_set</c>, while not really being a
        <c>gb_set</c>, thus it might return false positive results.
        See also note on <seeguide
        marker="system/reference_manual:data_types#no_user_types">data
        types</seeguide>.</p>
      </desc>
    </func>

    <func>
      <name name="is_subset" arity="2" since=""/>
      <fsummary>Test for subset.</fsummary>
      <desc>
        <p>Returns <c>true</c> when every element of <c><anno>Set1</anno></c> is
          also a member of <c><anno>Set2</anno></c>, otherwise <c>false</c>.</p>
      </desc>
    </func>

    <func>
      <name name="iterator" arity="1" since=""/>
      <fsummary>Return an iterator for a set.</fsummary>
      <desc>
        <p>Returns an iterator that can be used for traversing the entries of
          <c><anno>Set</anno></c>; see
          <seemfa marker="#next/1"><c>next/1</c></seemfa>. The implementation
          of this is very efficient; traversing the whole set using
          <c>next/1</c> is only slightly slower than getting the list of all
          elements using <seemfa marker="#to_list/1"><c>to_list/1</c></seemfa>
          and traversing that.
          The main advantage of the iterator approach is that it does
          not require the complete list of all elements to be built in
          memory at one time.</p>
      </desc>
    </func>

    <func>
      <name name="iterator_from" arity="2" since="OTP 18.0"/>
      <fsummary>Return an iterator for a set starting from a specified element.
      </fsummary>
      <desc>
        <p>Returns an iterator that can be used for traversing the
          entries of <c><anno>Set</anno></c>; see
          <seemfa marker="#next/1"><c>next/1</c></seemfa>.
          The difference as compared to the iterator returned by
          <seemfa marker="#iterator/1"><c>iterator/1</c></seemfa>
          is that the first element greater than
          or equal to <c><anno>Element</anno></c> is returned.</p>
      </desc>
    </func>

    <func>
      <name name="largest" arity="1" since=""/>
      <fsummary>Return largest element.</fsummary>
      <desc>
        <p>Returns the largest element in <c><anno>Set</anno></c>. Assumes that
          <c><anno>Set</anno></c> is not empty.</p>
      </desc>
    </func>

    <func>
      <name name="new" arity="0" since=""/>
      <fsummary>Return an empty set.</fsummary>
      <desc>
        <p>Returns a new empty set.</p>
      </desc>
    </func>

    <func>
      <name name="next" arity="1" since=""/>
      <fsummary>Traverse a set with an iterator.</fsummary>
      <desc>
        <p>Returns <c>{<anno>Element</anno>, <anno>Iter2</anno>}</c>, where
          <c><anno>Element</anno></c> is the smallest element referred to by
          iterator <c><anno>Iter1</anno></c>,
          and <c><anno>Iter2</anno></c> is the new iterator to be used for
          traversing the remaining elements, or the atom <c>none</c> if
          no elements remain.</p>
      </desc>
    </func>

    <func>
      <name name="singleton" arity="1" since=""/>
      <fsummary>Return a set with one element.</fsummary>
      <desc>
        <p>Returns a set containing only element <c><anno>Element</anno></c>.
        </p>
      </desc>
    </func>

    <func>
      <name name="size" arity="1" since=""/>
      <fsummary>Return the number of elements in a set.</fsummary>
      <desc>
        <p>Returns the number of elements in <c><anno>Set</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="smallest" arity="1" since=""/>
      <fsummary>Return smallest element.</fsummary>
      <desc>
        <p>Returns the smallest element in <c><anno>Set</anno></c>. Assumes that
          <c><anno>Set</anno></c> is not empty.</p>
      </desc>
    </func>

    <func>
      <name  name="subtract" arity="2" since=""/>
      <fsummary>Return the difference of two sets.</fsummary>
      <desc>
        <p>Returns only the elements of <c><anno>Set1</anno></c> that are not
          also elements of <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="take_largest" arity="1" since=""/>
      <fsummary>Extract largest element.</fsummary>
      <desc>
        <p>Returns <c>{<anno>Element</anno>, <anno>Set2</anno>}</c>, where
          <c><anno>Element</anno></c> is the largest element in
          <c><anno>Set1</anno></c>, and <c><anno>Set2</anno></c> is this set
          with <c><anno>Element</anno></c> deleted. Assumes that
          <c><anno>Set1</anno></c> is not empty.</p>
      </desc>
    </func>

    <func>
      <name name="take_smallest" arity="1" since=""/>
      <fsummary>Extract smallest element.</fsummary>
      <desc>
        <p>Returns <c>{<anno>Element</anno>, <anno>Set2</anno>}</c>, where
          <c><anno>Element</anno></c> is the smallest element in
          <c><anno>Set1</anno></c>, and <c><anno>Set2</anno></c> is this set
          with <c><anno>Element</anno></c> deleted. Assumes that
          <c><anno>Set1</anno></c> is not empty.</p>
      </desc>
    </func>

    <func>
      <name name="to_list" arity="1" since=""/>
      <fsummary>Convert a set into a list.</fsummary>
      <desc>
        <p>Returns the elements of <c><anno>Set</anno></c> as a list.</p>
      </desc>
    </func>

    <func>
      <name name="union" arity="1" since=""/>
      <fsummary>Return the union of a list of sets.</fsummary>
      <desc>
        <p>Returns the merged (union) set of the list of sets.</p>
      </desc>
    </func>

    <func>
      <name name="union" arity="2" since=""/>
      <fsummary>Return the union of two sets.</fsummary>
      <desc>
        <p>Returns the merged (union) set of <c><anno>Set1</anno></c> and
          <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>See Also</title>
    <p><seeerl marker="gb_trees"><c>gb_trees(3)</c></seeerl>,
      <seeerl marker="ordsets"><c>ordsets(3)</c></seeerl>,
      <seeerl marker="sets"><c>sets(3)</c></seeerl></p>
  </section>
</erlref>

