<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2001</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.

      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.

    </legalnotice>

    <title>gb_sets</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module>gb_sets</module>
  <modulesummary>General Balanced Trees</modulesummary>
  <description>
    <p>An implementation of ordered sets using Prof. Arne Andersson's
      General Balanced Trees. This can be much more efficient than
      using ordered lists, for larger sets, but depends on the
      application.</p>
    <p>This module considers two elements as different if and only if
      they do not compare equal (<c>==</c>).</p>
  </description>

  <section>
    <title>Complexity note</title>
    <p>The complexity on set operations is bounded by either O(|S|) or
      O(|T| * log(|S|)), where S is the largest given set, depending
      on which is fastest for any particular function call. For
      operating on sets of almost equal size, this implementation is
      about 3 times slower than using ordered-list sets directly. For
      sets of very different sizes, however, this solution can be
      arbitrarily much faster; in practical cases, often between 10
      and 100 times. This implementation is particularly suited for
      accumulating elements a few at a time, building up a large set
      (more than 100-200 elements), and repeatedly testing for
      membership in the current set.</p>
    <p>As with normal tree structures, lookup (membership testing),
      insertion and deletion have logarithmic complexity.</p>
  </section>

  <section>
    <title>Compatibility</title>
    <p>All of the following functions in this module also exist
      and do the same thing in the <c>sets</c> and <c>ordsets</c>
      modules. That is, by only changing the module name for each call,
      you can try out different set representations.</p>
    <list type="bulleted">
      <item>
        <p><c>add_element/2</c></p>
      </item>
      <item>
        <p><c>del_element/2</c></p>
      </item>
      <item>
        <p><c>filter/2</c></p>
      </item>
      <item>
        <p><c>fold/3</c></p>
      </item>
      <item>
        <p><c>from_list/1</c></p>
      </item>
      <item>
        <p><c>intersection/1</c></p>
      </item>
      <item>
        <p><c>intersection/2</c></p>
      </item>
      <item>
        <p><c>is_element/2</c></p>
      </item>
      <item>
        <p><c>is_set/1</c></p>
      </item>
      <item>
        <p><c>is_subset/2</c></p>
      </item>
      <item>
        <p><c>new/0</c></p>
      </item>
      <item>
        <p><c>size/1</c></p>
      </item>
      <item>
        <p><c>subtract/2</c></p>
      </item>
      <item>
        <p><c>to_list/1</c></p>
      </item>
      <item>
        <p><c>union/1</c></p>
      </item>
      <item>
        <p><c>union/2</c></p>
      </item>
    </list>
  </section>

  <datatypes>
    <datatype>
      <name><marker id="type-gb_set">gb_set()</marker></name>
      <desc><p>A GB set.</p></desc>
    </datatype>
    <datatype>
      <name name="iter"/>
      <desc><p>A GB set iterator.</p></desc>
    </datatype>
  </datatypes>
  <funcs>
    <func>
      <name name="add" arity="2"/>
      <name name="add_element" arity="2"/>
      <fsummary>Add a (possibly existing) element to a gb_set</fsummary>
      <desc>
        <p>Returns a new gb_set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> inserted. If <c><anno>Element</anno></c> is already an
          element in <c><anno>Set1</anno></c>, nothing is changed.</p>
      </desc>
    </func>
    <func>
      <name name="balance" arity="1"/>
      <fsummary>Rebalance tree representation of a gb_set</fsummary>
      <desc>
        <p>Rebalances the tree representation of <c><anno>Set1</anno></c>. Note that
          this is rarely necessary, but may be motivated when a large
          number of elements have been deleted from the tree without
          further insertions. Rebalancing could then be forced in order
          to minimise lookup times, since deletion only does not
          rebalance the tree.</p>
      </desc>
    </func>
    <func>
      <name name="delete" arity="2"/>
      <fsummary>Remove an element from a gb_set</fsummary>
      <desc>
        <p>Returns a new gb_set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> removed. Assumes that <c><anno>Element</anno></c> is present
          in <c><anno>Set1</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="delete_any" arity="2"/>
      <name name="del_element" arity="2"/>
      <fsummary>Remove a (possibly non-existing) element from a gb_set</fsummary>
      <desc>
        <p>Returns a new gb_set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> removed. If <c><anno>Element</anno></c> is not an element
          in <c><anno>Set1</anno></c>, nothing is changed.</p>
      </desc>
    </func>
    <func>
      <name name="difference" arity="2"/>
      <name name="subtract" arity="2"/>
      <fsummary>Return the difference of two gb_sets</fsummary>
      <desc>
        <p>Returns only the elements of <c><anno>Set1</anno></c> which are not also
          elements of <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="empty" arity="0"/>
      <name name="new" arity="0"/>
      <fsummary>Return an empty gb_set</fsummary>
      <desc>
        <p>Returns a new empty gb_set.</p>
      </desc>
    </func>
    <func>
      <name name="filter" arity="2"/>
      <fsummary>Filter gb_set elements</fsummary>
      <desc>
        <p>Filters elements in <c><anno>Set1</anno></c> using predicate function
          <c><anno>Pred</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="fold" arity="3"/>
      <fsummary>Fold over gb_set elements</fsummary>
      <desc>
        <p>Folds <c><anno>Function</anno></c> over every element in <c><anno>Set</anno></c>
          returning the final value of the accumulator.</p>
      </desc>
    </func>
    <func>
      <name name="from_list" arity="1"/>
      <fsummary>Convert a list into a gb_set</fsummary>
      <desc>
        <p>Returns a gb_set of the elements in <c><anno>List</anno></c>, where
          <c><anno>List</anno></c> may be unordered and contain duplicates.</p>
      </desc>
    </func>
    <func>
      <name name="from_ordset" arity="1"/>
      <fsummary>Make a gb_set from an ordset list</fsummary>
      <desc>
        <p>Turns an ordered-set list <c><anno>List</anno></c> into a gb_set. The list
          must not contain duplicates.</p>
      </desc>
    </func>
    <func>
      <name name="insert" arity="2"/>
      <fsummary>Add a new element to a gb_set</fsummary>
      <desc>
        <p>Returns a new gb_set formed from <c><anno>Set1</anno></c> with
          <c><anno>Element</anno></c> inserted. Assumes that <c><anno>Element</anno></c> is not
          present in <c><anno>Set1</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="intersection" arity="2"/>
      <fsummary>Return the intersection of two gb_sets</fsummary>
      <desc>
        <p>Returns the intersection of <c><anno>Set1</anno></c> and <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="intersection" arity="1"/>
      <fsummary>Return the intersection of a list of gb_sets</fsummary>
      <desc>
        <p>Returns the intersection of the non-empty list of gb_sets.</p>
      </desc>
    </func>
    <func>
      <name name="is_disjoint" arity="2"/>
      <fsummary>Check whether two gb_sets are disjoint</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Set1</anno></c> and
          <c><anno>Set2</anno></c> are disjoint (have no elements in common),
	  and <c>false</c> otherwise.</p>
      </desc>
    </func>
    <func>
      <name name="is_empty" arity="1"/>
      <fsummary>Test for empty gb_set</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Set</anno></c> is an empty set, and
          <c>false</c> otherwise.</p>
      </desc>
    </func>
    <func>
      <name name="is_member" arity="2"/>
      <name name="is_element" arity="2"/>
      <fsummary>Test for membership of a gb_set</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Element</anno></c> is an element of
          <c><anno>Set</anno></c>, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name name="is_set" arity="1"/>
      <fsummary>Test for a gb_set</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Term</anno></c> appears to be a gb_set,
          otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name name="is_subset" arity="2"/>
      <fsummary>Test for subset</fsummary>
      <desc>
        <p>Returns <c>true</c> when every element of <c><anno>Set1</anno></c> is
          also a member of <c><anno>Set2</anno></c>, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name name="iterator" arity="1"/>
      <fsummary>Return an iterator for a gb_set</fsummary>
      <desc>
        <p>Returns an iterator that can be used for traversing the
          entries of <c><anno>Set</anno></c>; see <c>next/1</c>. The implementation
          of this is very efficient; traversing the whole set using
          <c>next/1</c> is only slightly slower than getting the list
          of all elements using <c>to_list/1</c> and traversing that.
          The main advantage of the iterator approach is that it does
          not require the complete list of all elements to be built in
          memory at one time.</p>
      </desc>
    </func>
    <func>
      <name name="largest" arity="1"/>
      <fsummary>Return largest element</fsummary>
      <desc>
        <p>Returns the largest element in <c><anno>Set</anno></c>. Assumes that
          <c><anno>Set</anno></c> is nonempty.</p>
      </desc>
    </func>
    <func>
      <name name="next" arity="1"/>
      <fsummary>Traverse a gb_set with an iterator</fsummary>
      <desc>
        <p>Returns <c>{<anno>Element</anno>, <anno>Iter2</anno>}</c> where <c><anno>Element</anno></c> is the
          smallest element referred to by the iterator <c><anno>Iter1</anno></c>,
          and <c><anno>Iter2</anno></c> is the new iterator to be used for
          traversing the remaining elements, or the atom <c>none</c> if
          no elements remain.</p>
      </desc>
    </func>
    <func>
      <name name="singleton" arity="1"/>
      <fsummary>Return a gb_set with one element</fsummary>
      <desc>
        <p>Returns a gb_set containing only the element <c><anno>Element</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="size" arity="1"/>
      <fsummary>Return the number of elements in a gb_set</fsummary>
      <desc>
        <p>Returns the number of elements in <c><anno>Set</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="smallest" arity="1"/>
      <fsummary>Return smallest element</fsummary>
      <desc>
        <p>Returns the smallest element in <c><anno>Set</anno></c>. Assumes that
          <c><anno>Set</anno></c> is nonempty.</p>
      </desc>
    </func>
    <func>
      <name name="take_largest" arity="1"/>
      <fsummary>Extract largest element</fsummary>
      <desc>
        <p>Returns <c>{<anno>Element</anno>, <anno>Set2</anno>}</c>, where <c><anno>Element</anno></c> is the
          largest element in <c><anno>Set1</anno></c>, and <c><anno>Set2</anno></c> is this set
          with <c><anno>Element</anno></c> deleted. Assumes that <c><anno>Set1</anno></c> is
          nonempty.</p>
      </desc>
    </func>
    <func>
      <name name="take_smallest" arity="1"/>
      <fsummary>Extract smallest element</fsummary>
      <desc>
        <p>Returns <c>{<anno>Element</anno>, <anno>Set2</anno>}</c>, where <c><anno>Element</anno></c> is the
          smallest element in <c><anno>Set1</anno></c>, and <c><anno>Set2</anno></c> is this set
          with <c><anno>Element</anno></c> deleted. Assumes that <c><anno>Set1</anno></c> is
          nonempty.</p>
      </desc>
    </func>
    <func>
      <name name="to_list" arity="1"/>
      <fsummary>Convert a gb_set into a list</fsummary>
      <desc>
        <p>Returns the elements of <c><anno>Set</anno></c> as a list.</p>
      </desc>
    </func>
    <func>
      <name name="union" arity="2"/>
      <fsummary>Return the union of two gb_sets</fsummary>
      <desc>
        <p>Returns the merged (union) gb_set of <c><anno>Set1</anno></c> and
          <c><anno>Set2</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="union" arity="1"/>
      <fsummary>Return the union of a list of gb_sets</fsummary>
      <desc>
        <p>Returns the merged (union) gb_set of the list of gb_sets.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>SEE ALSO</title>
    <p><seealso marker="gb_trees">gb_trees(3)</seealso>, 
      <seealso marker="ordsets">ordsets(3)</seealso>, 
      <seealso marker="sets">sets(3)</seealso></p>
  </section>
</erlref>

