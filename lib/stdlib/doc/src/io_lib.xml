<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>io_lib</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module>io_lib</module>
  <modulesummary>IO Library Functions</modulesummary>
  <description>
    <p>This module contains functions for converting to and from
      strings (lists of characters). They are used for implementing the
      functions in the <c>io</c> module. There is no guarantee that the
      character lists returned from some of the functions are flat,
      they can be deep lists. <c>lists:flatten/1</c> can be used for
      flattening deep lists.</p>
  </description>

  <datatypes>
    <datatype>
      <name name="chars"/>
    </datatype>
    <datatype>
      <name name="continuation"/>
      <desc><p>A continuation as returned by <seealso marker="#fread/3"><c>fread/3</c></seealso>.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="depth"/>
    </datatype>
  </datatypes>
  <funcs>
    <func>
      <name name="nl" arity="0"/>
      <fsummary>Write a newline</fsummary>
      <desc>
        <p>Returns a character list which represents a new line
          character.</p>
      </desc>
    </func>
    <func>
      <name name="write" arity="1"/>
      <name name="write" arity="2"/>
      <fsummary>Write a term</fsummary>
      <desc>
        <p>Returns a character list which represents <c><anno>Term</anno></c>. The
          <c><anno>Depth</anno></c> (-1) argument controls the depth of the
          structures written. When the specified depth is reached,
          everything below this level is replaced by "...". For
          example:</p>
        <pre>
1> <input>lists:flatten(io_lib:write({1,[2],[3],[4,5],6,7,8,9})).</input>
"{1,[2],[3],[4,5],6,7,8,9}"
2> <input>lists:flatten(io_lib:write({1,[2],[3],[4,5],6,7,8,9}, 5)).</input>
"{1,[2],[3],[...],...}"</pre>
      </desc>
    </func>
    <func>
      <name name="print" arity="1"/>
      <name name="print" arity="4"/>
      <fsummary>Pretty print a term</fsummary>
      <desc>
        <p>Also returns a list of characters which represents
          <c><anno>Term</anno></c>, but breaks representations which are longer than
          one line into many lines and indents each line sensibly. It
          also tries to detect and output lists of printable characters 
          as strings. <c><anno>Column</anno></c> is the starting column (1),
          <c><anno>LineLength</anno></c> the maximum line length (80), and
          <c><anno>Depth</anno></c> (-1) the maximum print depth.</p>
      </desc>
    </func>
    <func>
      <name name="fwrite" arity="2"/>
      <name name="format" arity="2"/>
      <fsummary>Write formatted output</fsummary>
      <desc>
        <p>Returns a character list which represents <c><anno>Data</anno></c>
          formatted in accordance with <c><anno>Format</anno></c>. See
          <seealso marker="io#fwrite/1">io:fwrite/1,2,3</seealso> for a detailed
          description of the available formatting options. A fault is
          generated if there is an error in the format string or
          argument list.</p>

	  <p>If (and only if) the Unicode translation modifier is used
	  in the format string (i.e. ~ts or ~tc), the resulting list
	  may contain characters beyond the ISO-latin-1 character
	  range (in other words, numbers larger than 255). If so, the
	  result is not an ordinary Erlang string(), but can well be
	  used in any context where Unicode data is allowed.</p>
	  
      </desc>
    </func>
    <func>
      <name name="fread" arity="2"/>
      <fsummary>Read formatted input</fsummary>
      <desc>
        <p>Tries to read <c><anno>String</anno></c> in accordance with the control
          sequences in <c><anno>Format</anno></c>. See
          <seealso marker="io#fread/3">io:fread/3</seealso> for a detailed
          description of the available formatting options. It is
          assumed that <c><anno>String</anno></c> contains whole lines. It returns:</p>
        <taglist>
          <tag><c>{ok, <anno>InputList</anno>, <anno>LeftOverChars</anno>}</c></tag>
          <item>
            <p>The string was read. <c><anno>InputList</anno></c> is the list of
              successfully matched and read items, and
              <c><anno>LeftOverChars</anno></c> are the input characters not used.</p>
          </item>
          <tag><c>{more, <anno>RestFormat</anno>, <anno>Nchars</anno>, <anno>InputStack</anno>}</c></tag>
          <item>
            <p>The string was read, but more input is needed in order
              to complete the original format string. <c><anno>RestFormat</anno></c>
              is the remaining format string, <c><anno>Nchars</anno></c> the number
              of characters scanned, and <c><anno>InputStack</anno></c> is the
              reversed list of inputs matched up to that point.</p>
          </item>
          <tag><c>{error, <anno>What</anno>}</c></tag>
          <item>
            <p>The read operation failed and the parameter <c><anno>What</anno></c>
              gives a hint about the error.</p>
          </item>
        </taglist>
        <p>Example:</p>
        <pre>
3> <input>io_lib:fread("~f~f~f", "15.6 17.3e-6 24.5").</input>
{ok,[15.6,1.73e-5,24.5],[]}</pre>
      </desc>
    </func>
    <func>
      <name name="fread" arity="3"/>
      <fsummary>Re-entrant formatted reader</fsummary>
      <desc>
        <p>This is the re-entrant formatted reader. The continuation of
          the first call to the functions must be <c>[]</c>. Refer to
          Armstrong, Virding, Williams, 'Concurrent Programming in
          Erlang', Chapter 13 for a complete description of how the
          re-entrant input scheme works.</p>
        <p>The function returns:</p>
        <taglist>
          <tag><c>{done, <anno>Result</anno>, <anno>LeftOverChars</anno>}</c></tag>
          <item>
            <p>The input is complete. The result is one of the
              following:</p>
            <taglist>
              <tag><c>{ok, <anno>InputList</anno>}</c></tag>
              <item>
                <p>The string was read. <c><anno>InputList</anno></c> is the list of
                  successfully matched and read items, and
                  <c><anno>LeftOverChars</anno></c> are the remaining characters.</p>
              </item>
              <tag><c>eof</c></tag>
              <item>
                <p>End of file has been encountered.
                  <c><anno>LeftOverChars</anno></c> are the input characters not
                  used.</p>
              </item>
              <tag><c>{error, <anno>What</anno>}</c></tag>
              <item>
                <p>An error occurred and the parameter <c><anno>What</anno></c> gives
                  a hint about the error.</p>
              </item>
            </taglist>
          </item>
          <tag><c>{more, <anno>Continuation</anno>}</c></tag>
          <item>
            <p>More data is required to build a term.
              <c><anno>Continuation</anno></c> must be passed to <c>fread/3</c>,
              when more data becomes available.</p>
          </item>
        </taglist>
      </desc>
    </func>
    <func>
      <name name="write_atom" arity="1"/>
      <fsummary>Write an atom</fsummary>
      <desc>
        <p>Returns the list of characters needed to print the atom
          <c><anno>Atom</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="write_string" arity="1"/>
      <fsummary>Write a string</fsummary>
      <desc>
        <p>Returns the list of characters needed to print <c><anno>String</anno></c>
          as a string.</p>
      </desc>
    </func>
    <func>
      <name name="write_char" arity="1"/>
      <fsummary>Write a character</fsummary>
      <desc>
        <p>Returns the list of characters needed to print a character
          constant in the ISO-latin-1 character set.</p>
      </desc>
    </func>
    <func>
      <name name="indentation" arity="2"/>
      <fsummary>Indentation after printing string</fsummary>
      <desc>
        <p>Returns the indentation if <c><anno>String</anno></c> has been printed,
          starting at <c><anno>StartIndent</anno></c>.</p>
      </desc>
    </func>
    <func>
      <name name="char_list" arity="1"/>
      <fsummary>Test for a list of characters</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Term</anno></c> is a flat list of
          characters in the ISO-latin-1 range, otherwise it returns <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name name="deep_char_list" arity="1"/>
      <fsummary>Test for a deep list of characters</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Term</anno></c> is a, possibly deep, list
          of characters in the ISO-latin-1 range, otherwise it returns <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name name="printable_list" arity="1"/>
      <fsummary>Test for a list of printable ISO-latin-1 characters</fsummary>
      <desc>
        <p>Returns <c>true</c> if <c><anno>Term</anno></c> is a flat list of
          printable ISO-latin-1 characters, otherwise it returns <c>false</c>.</p>
      </desc>
    </func>
  </funcs>
</erlref>

