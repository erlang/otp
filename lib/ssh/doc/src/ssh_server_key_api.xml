<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2012</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

      The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>
    <title>ssh_server_key_api</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module>ssh_server_key_api</module>
  <modulesummary>
    -behaviour(ssh_server_key_api).
  </modulesummary>
  <description>
    <p>Behaviour describing the API for public key handling of an SSH server. By implementing
    the callbacks defined in this behavior, the public key handling of an SSH server can
    be customized. By default the SSH application implements this behavior
    with help of the standard OpenSSH files,
    see the <seealso marker="SSH_app"> ssh(6)</seealso> application manual.</p>
  </description>

  <section>
    <title>DATA TYPES</title>

    <p>Type definitions that are used more than once in this module,
    or abstractions to indicate the intended use of the data
    type, or both. For more details on public key data types,
    refer to Section 2 Public Key Records in the
    <seealso marker="public_key:public_key_records"> public_key user's guide</seealso>.
    </p>

    <taglist>
      <tag><c>boolean() =</c></tag>
      <item><p><c>true | false</c></p></item>
      <tag><c>string() =</c></tag>
      <item><p><c>[byte()]</c></p></item>
      <tag><c>public_key() =</c></tag>
      <item><p><c>#'RSAPublicKey'{}| {integer(),  #'Dss-Parms'{}}| term()</c></p></item>
      <tag><c>private_key() =</c></tag>
      <item><p><c>#'RSAPrivateKey'{} | #'DSAPrivateKey'{} | term()</c></p></item>
      <tag><c>public_key_algorithm() =</c></tag>
      <item><p><c>'ssh-rsa'| 'ssh-dss' | atom()</c></p></item>
    </taglist>
  </section>
  
  <funcs>
    <func>
      <name>Module:host_key(Algorithm, DaemonOptions) ->
      {ok, Key} | {error, Reason}</name>
      <fsummary>Fetches the hostâ€™s private key.</fsummary>
      <type>
	<v>Algorithm = public_key_algorithm()</v>
	<d>Host key algorithm. Is to support <c>'ssh-rsa' | 'ssh-dss'</c>, but more algorithms
	can be handled.</d>
	<v>DaemonOptions = proplists:proplist()</v>
	<d>Options provided to  <seealso marker="ssh#daemon-2">ssh:daemon/[2,3]</seealso>.</d>
	<v>Key = private_key()</v>
	<d>Private key of the host matching the <c>Algorithm</c>.</d>
	<v>Reason = term()</v>
      </type>
      <desc>
	  <p>Fetches the private key of the host.</p>
      </desc>
    </func>

    <func>
      <name>Module:is_auth_key(Key, User, DaemonOptions) -> Result</name>
      <fsummary>Checks if the user key is authorized.</fsummary>
      <type>
	<v>Key = public_key()</v>
	<d>Normally an RSA or DSA public key, but handling of other public keys can be added</d>
	<v>User = string()</v>
	<d>User owning the public key.</d>
	<v>DaemonOptions = proplists:proplist()</v>
	<d>Options provided to  <seealso marker="ssh#daemon-2">ssh:daemon/[2,3]</seealso>.</d>
	<v>Result = boolean()</v>
      </type>
      <desc>
	 <p>Checks if the user key is authorized.</p>
      </desc>
    </func>

  </funcs>

</erlref>
