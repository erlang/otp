<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>CosPropertyService_PropertySetDef</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>2000-07-25</date>
    <rev>1.0</rev>
  </header>
  <module>CosPropertyService_PropertySetDef</module>
  <modulesummary>This module implements the OMG CosPropertyService::PropertySetDef interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosProperty/include/CosPropertyService.hrl").</c></p>
    <p>This module also exports the functions described in</p>
    <p><seealso marker="CosPropertyService_PropertySet">CosPropertyService_PropertySet</seealso></p>
  </description>
  <funcs>
    <func>
      <name>get_allowed_property_types(PropertySetDef) -> Reply</name>
      <fsummary>Return allowed TypeCodes for the target object</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>Reply = {ok, PropertyTypes}</v>
        <v>PropertyTypes = [CORBA::TypeCode]</v>
      </type>
      <desc>
        <p>This operation return the TypeCodes which we are allowed to use when adding
          new properties.</p>
      </desc>
    </func>
    <func>
      <name>get_allowed_properties(PropertySetDef) -> Reply</name>
      <fsummary>Return a sequence of the allowed properties</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>Reply = {ok, PropertyDefs}</v>
        <v>PropertyDefs = [#'CosPropertyService_PropertyDef'{property_name = Name, property_value = Value, property_mode = Mode}]</v>
        <v>Name = string()</v>
        <v>Value = #any</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
      </type>
      <desc>
        <p>This operation a sequence of the allowed properties we may alter; depends on
          which mode associated with a certain property.</p>
      </desc>
    </func>
    <func>
      <name>define_property_with_mode(PropertySetDef, Name, Value, Mode) -> Reply</name>
      <fsummary>Associate a new property with the target object</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>Name = non-empty string()</v>
        <v>Value = #any</v>
        <v>Mode =  normal | read_only | fixed_normal | fixed_readonly | undefined</v>
        <v>Reply = ok | {'EXCEPTION', #CosPropertyService_InvalidPropertyName{}} | {'EXCEPTION', #CosPropertyService_ConflictingProperty{}} | {'EXCEPTION', #CosPropertyService_UnsupportedTypeCode{}} | {'EXCEPTION', #CosPropertyService_UnsupportedProperty{}} | {'EXCEPTION', #CosPropertyService_UnsupportedMode{}} | {'EXCEPTION', #CosPropertyService_ReadOnlyProperty{}}</v>
      </type>
      <desc>
        <p>This operation attempts to associate a new property with the target object.
          If we fail to do so the appropriate exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>define_properties_with_modes(PropertySetDef, PropertyDefs) -> Reply</name>
      <fsummary>Associate the given Property Definitions with the target object</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>PropertyDefs = [#'CosPropertyService_PropertyDef'{property_name = Name, property_value = Value, property_mode = Mode}]</v>
        <v>Name = string()</v>
        <v>Value = #any</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
        <v>Reply = ok | {'EXCEPTION', #CosPropertyService_MultipleExceptions{exceptions = Excs}}</v>
        <v>Excs = [#'CosPropertyService_PropertyException{reason = Reason, failing_property_name = Name}]</v>
        <v>Reason = invalid_property_name | conflicting_property | property_not_found | unsupported_type_code | unsupported_property | unsupported_mode | fixed_property | read_only_property</v>
      </type>
      <desc>
        <p>This operation attempts to associate the given Property Definitions with the
          target object. If one or more attempts fail an exception is raised 
          describing which properties we where not able to create.</p>
      </desc>
    </func>
    <func>
      <name>get_property_mode(PropertySetDef, Name) -> Reply</name>
      <fsummary>Return the mode of the given property</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>Name = string()</v>
        <v>Reply = Mode | {'EXCEPTION', #CosPropertyService_InvalidPropertyName{}} | {'EXCEPTION', #CosPropertyService_PropertyNotFound{}}</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
      </type>
      <desc>
        <p>This operation returns the type of the given property.</p>
      </desc>
    </func>
    <func>
      <name>get_property_modes(PropertySetDef, Names) -> Reply</name>
      <fsummary>Return the modes of the given properties</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>Names = [string()]</v>
        <v>Reply = {boolean(), PropertyModes}</v>
        <v>PropertyModes = [#'CosPropertyService_PropertyMode'{property_name = Name, property_mode = Mode}]</v>
        <v>Name = string()</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
      </type>
      <desc>
        <p>This operation returns the modes of the listed properties. If the boolean
          flag is false, all properties with mode <c>undefined</c> this operation
          failed to comply.</p>
      </desc>
    </func>
    <func>
      <name>set_property_mode(PropertySetDef, Name, Mode) -> Reply</name>
      <fsummary>Change the given property's mode</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>Name = string()</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
        <v>Reply = ok | {'EXCEPTION', #CosPropertyService_InvalidPropertyName{}} | {'EXCEPTION', #CosPropertyService_UnsupportedMode{}} | {'EXCEPTION', #CosPropertyService_PropertyNotFound{}}</v>
      </type>
      <desc>
        <p>This operation changes the given property's mode. Return the appropriate
          exception if not able to fulfill the request.</p>
      </desc>
    </func>
    <func>
      <name>set_property_modes(PropertySetDef, PropertyModes) -> Reply</name>
      <fsummary>Change the listed properties mode's</fsummary>
      <type>
        <v>PropertySetDef = #objref</v>
        <v>PropertyModes = [#'CosPropertyService_PropertyMode'{property_name = Name, property_mode = Mode}]</v>
        <v>Name = string()</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
        <v>Reply = ok | {'EXCEPTION', #CosPropertyService_MultipleExceptions{exceptions = Excs}}</v>
        <v>Excs = [#'CosPropertyService_PropertyException{reason = Reason, failing_property_name = Name}]</v>
        <v>Reason = invalid_property_name | conflicting_property | property_not_found | unsupported_type_code | unsupported_property | unsupported_mode | fixed_property | read_only_property</v>
      </type>
      <desc>
        <p>This operation attempts to update the listed properties mode's. Raises an 
          exception which describe which and why an operation failed.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

