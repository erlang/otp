<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosPropertyService_PropertySetDefFactory</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved>Niclas Eklund</approved>
    <checked></checked>
    <date>2000-07-25</date>
    <rev>1.0</rev>
  </header>
  <module>CosPropertyService_PropertySetDefFactory</module>
  <modulesummary>This module implements the OMG CosPropertyService::PropertySetDefFactory interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosProperty/include/CosPropertyService.hrl").</c></p>
  </description>
  <funcs>
    <func>
      <name>create_propertysetdef(Factory) -> </name>
      <fsummary>Create a new <c>PropertySetDef</c>with no predefined  settings</fsummary>
      <type>
        <v>Factory = PropertySetDef = #objref</v>
      </type>
      <desc>
        <p>This operation creates a new <c>PropertySetDef</c> with no predefined 
          settings.</p>
      </desc>
    </func>
    <func>
      <name>create_constrained_propertysetdef(Factory, PropertyTypes, PropertyDefs) -> Reply</name>
      <fsummary>Create a new <c>PropertySetDef</c>with specified  constraints</fsummary>
      <type>
        <v>Factory = PropertySetDef = #objref</v>
        <v>PropertyTypes = [CORBA::TypeCode]</v>
        <v>PropertyDefs = [#'CosPropertyService_PropertyDef'{property_name = Name, property_value = Value, property_mode = Mode}]</v>
        <v>Name = string()</v>
        <v>Value = #any</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
        <v>Reply = {'EXCEPTION', #CosPropertyService_ConstraintNotSupported{}} | PropertySetDef</v>
        <v>PropertySetDef = #objref</v>
      </type>
      <desc>
        <p>This operation creates a new <c>PropertySetDef</c> with specific 
          constraints. PropertyTypes states allowed TypeCode's and PropertyDefs valid 
          <c>CosPropertyService::PropertyDef</c> data.</p>
      </desc>
    </func>
    <func>
      <name>create_initial_propertysetdef(Factory, PropertyDefs) -> Reply</name>
      <fsummary>Create a new <c>PropertySetDef</c>with specified initial properties</fsummary>
      <type>
        <v>Factory = PropertySetDef = #objref</v>
        <v>PropertyDefs = [#'CosPropertyService_PropertyDef'{property_name = Name, property_value = Value, property_mode = Mode}]</v>
        <v>Name = string()</v>
        <v>Value = #any</v>
        <v>Mode = normal | read_only | fixed_normal | fixed_readonly | undefined</v>
        <v>Reply = {'EXCEPTION', #CosPropertyService_MultipleExceptions{exceptions = Excs}} | PropertySetDef</v>
        <v>Excs = [#'CosPropertyService_PropertyException{reason = Reason, failing_property_name = Name}]</v>
        <v>Reason = invalid_property_name | conflicting_property | property_not_found | unsupported_type_code | unsupported_property | unsupported_mode | fixed_property | read_only_property</v>
        <v>PropertySetDef = #objref</v>
      </type>
      <desc>
        <p>This operation creates a new <c>PropertySetDef</c> with specific 
          initial properties.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

