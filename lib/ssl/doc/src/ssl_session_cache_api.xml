<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1999</year><year>2015</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>
    <title>ssl</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
    <file>ssl_session_cache_api.xml</file>
  </header>
  <module>ssl_session_cache_api</module>
  <modulesummary>TLS session cache API</modulesummary>

  <description>Defines the API for the TLS session cache so
    that the data storage scheme can be replaced by
    defining a new callback module implementing this API.</description>
  <section>
    <title>DATA TYPES</title>

    <p>The following data types are used in the functions for
    <c>ssl_session_cache_api</c>:</p>

    <taglist>
      <tag><c>cache_ref() =</c></tag>
      <item><p><c>opaque()</c></p></item>

      <tag><c>key() =</c></tag>
      <item><p><c>{partialkey(), session_id()}</c></p></item>

      <tag><c>partialkey() =</c></tag>
      <item><p><c>opaque()</c></p></item>

      <tag><c>session_id() =</c></tag>
      <item><p><c>binary()</c></p></item>

      <tag><c>session()</c> =</tag>
      <item><p><c>opaque()</c></p></item>
    </taglist>

  </section>
  
  <funcs>   

    <func>
      <name>delete(Cache, Key) -> _</name>
      <fsummary>Deletes a cache entry.</fsummary>
      <type>
	<v>Cache = cache_ref()</v>
	<v>Key = key()</v>
      </type>
      <desc>
	<p>Deletes a cache entry. Is only called from the cache
	handling process.
	</p>
      </desc>
    </func>

    <func>
      <name>foldl(Fun, Acc0, Cache) -> Acc</name>
      <fsummary></fsummary>
      <type>
	<v></v>
      </type>
      <desc>
	<p>Calls <c>Fun(Elem, AccIn)</c> on successive elements of the
	cache, starting with <c>AccIn == Acc0</c>. <c>Fun/2</c> must
	return a new accumulator, which is passed to the next call.
	The function returns the final value of the accumulator.
	<c>Acc0</c> is returned if the cache is empty.
	</p>
      </desc>
    </func>

    <func>
      <name>init(Args) -> opaque() </name>
      <fsummary>Returns cache reference.</fsummary>
      <type>
	<v>Args = proplists:proplist()</v>
      </type>
      <desc>
	<p>Includes property <c>{role, client | server}</c>.
	Currently this is the only predefined property,
	there can also be user-defined properties. See also
	application environment variable
	<seealso marker="ssl_app">session_cb_init_args</seealso>.
	</p>
	<p>Performs possible initializations of the cache and returns
	a reference to it that is used as parameter to the other
	API functions. Is called by the cache handling processes
	<c>init</c> function, hence putting the same requirements on it
	as a normal process <c>init</c> function. This function is
	called twice when starting the SSL application, once with
	the role client and once with the role server, as the SSL
	application must be prepared to take on both roles.
	</p>
      </desc>
    </func>

    <func>
      <name>lookup(Cache, Key) -> Entry</name>
      <fsummary>Looks up a cache entry.</fsummary>
      <type>
	<v>Cache = cache_ref()</v>
	<v>Key = key()</v>
	<v>Entry = session() | undefined</v>
      </type>
      <desc>
	<p>Looks up a cache entry. Is to be callable from any
         process.
         </p>
      </desc>
    </func>
    
    <func>
      <name>select_session(Cache, PartialKey) -> [session()]</name>
      <fsummary>Selects sessions that can be reused.</fsummary>
      <type>
	<v>Cache = cache_ref()</v>
	<v>PartialKey = partialkey()</v>
	<v>Session = session()</v>
      </type>
      <desc>
	<p>Selects sessions that can be reused. Is to be callable
	from any process.
	</p>
      </desc>
    </func>

    <func>
      <name>terminate(Cache) -> _</name>
      <fsummary>Called by the process that handles the cache when it
      is about to terminate.</fsummary>
      <type>
	<v>Cache = term() - as returned by init/0</v>
      </type>
      <desc>
	<p>Takes care of possible cleanup that is needed when the
	cache handling process terminates.
	</p>
      </desc>
    </func>

    <func>
      <name>update(Cache, Key, Session) -> _</name>
      <fsummary>Caches a new session or updates an already cached one.</fsummary>
      <type>
	<v>Cache = cache_ref()</v>
	<v>Key = key()</v>
	<v>Session = session()</v>
      </type>
      <desc>
	<p>Caches a new session or updates an already cached one. Is
	only called from the cache handling process.
	</p>
      </desc>
    </func>
    
  </funcs> 
  
</erlref>
