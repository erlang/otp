<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>CosNotifyChannelAdmin_EventChannelFactory</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_EventChannelFactory</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::EventChannelFactory interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
  </description>
  <funcs>
    <func>
      <name>create_channel(ChannelFactory, InitialQoS, InitialAdmin) -> Return</name>
      <fsummary>Create a new channel</fsummary>
      <type>
        <v>ChannelFactory = #objref</v>
        <v>InitialQoS = CosNotification::QoSProperties</v>
        <v>InitialAdmin = CosNotification::AdminProperties</v>
        <v>Return = {EventChannel, ChannelID}</v>
        <v>EventChannel = #objref</v>
        <v>ChannelID = long()</v>
      </type>
      <desc>
        <p>This operation creates a new event channel. Along with the channel
          reference an id is returned which can be used when invoking other
          operations exported by this module. The Quality of Service argument
          supplied will be inherited by objects created by the channel. For more
          information about QoS settings see the <c>User's Guide</c>.</p>
        <p>If no QoS- and/or Admin-properties are supplied (i.e. empty list),
          the <em>default</em> settings will be used. For more information, see the 
          User's Guide.</p>
      </desc>
    </func>
    <func>
      <name>get_all_channels(ChannelFactory) -> ChannelIDSeq</name>
      <fsummary>Return all Id:s for channels, currently alive, created by the target object</fsummary>
      <type>
        <v>ChannelFactory = #objref</v>
        <v>ChannelIDSeq = [long()]</v>
      </type>
      <desc>
        <p>This operation returns a id sequence of all channel's created by this ChannelFactory.</p>
      </desc>
    </func>
    <func>
      <name>get_event_channel(ChannelFactory, ChannelID) -> Return</name>
      <fsummary>Return the channel object associated with the given Id</fsummary>
      <type>
        <v>ChannelFactory = #objref</v>
        <v>ChannelID = long()</v>
        <v>Retrurn = EventChannel | {'EXCEPTION', #'CosNotifyChannelAdmin_ChannelNotFound'{}}</v>
        <v>EventChannel = #objref</v>
      </type>
      <desc>
        <p>This operation returns the EventChannel associated with the given id. If no channel is
          associated with the id, i.e., never existed or have been terminated, an exception is raised.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

