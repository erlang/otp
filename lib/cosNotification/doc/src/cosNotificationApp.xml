<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>cosNotificationApp</title>
    <prepared>Niclas Eklund</prepared>
    <responsible>Niclas Eklund</responsible>
    <docno></docno>
    <approved>Niclas Eklund</approved>
    <checked></checked>
    <date>2000-01-31</date>
    <rev>PA1</rev>
  </header>
  <module>cosNotificationApp</module>
  <modulesummary>The main module of the cosNotification application.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module contains the functions for starting and stopping the application.</p>
  </description>
  <funcs>
    <func>
      <name>install() -> Return</name>
      <fsummary>Install the cosNotification application</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation installs the cosNotification application.</p>
      </desc>
    </func>
    <func>
      <name>install(Seconds) -> Return</name>
      <fsummary>Install the cosNotification application</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation installs the cosNotification application using <c>Seconds</c>
          delay between each block, currently 6, of IFR-registrations. This approach
          spreads the IFR database access over a period of time to allow other
          applications to run smother.</p>
      </desc>
    </func>
    <func>
      <name>install_event() -> Return</name>
      <fsummary>Install the necessary cosEvent interfaces</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation, which may <em>only</em> be used if it is impossible to
          upgrade to <em>cosEvent-2.0</em> or later, installs the necessary 
          cosEvent interfaces. If cosEvent-2.0 is available, use
          <c>cosEventApp:install()</c> instead.</p>
      </desc>
    </func>
    <func>
      <name>install_event(Seconds) -> Return</name>
      <fsummary>Install the necessary cosEvent interfaces</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation, which may <em>only</em> be used if it is impossible to
          upgrade to <em>cosEvent-2.0</em> or later, installs the necessary cosEvent
          interfaces using <c>Seconds</c> delay between each block of
          IFR-registrations.  If cosEvent-2.0 is available, use
          <c>cosEventApp:install()</c> instead.</p>
      </desc>
    </func>
    <func>
      <name>uninstall() -> Return</name>
      <fsummary>Uninstall the cosNotification application</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation uninstalls the cosNotification application.</p>
      </desc>
    </func>
    <func>
      <name>uninstall(Seconds) -> Return</name>
      <fsummary>Uninstall the cosNotification application</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation uninstalls the cosNotification application using <c>Seconds</c>
          delay between each block, currently 6, of IFR-unregistrations. This approach
          spreads the IFR database access over a period of time to allow other
          applications to run smother.</p>
      </desc>
    </func>
    <func>
      <name>uninstall_event() -> Return</name>
      <fsummary>Uninstall the inherited cosEvent interfaces</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation uninstalls the inherited cosEvent interfaces. If cosEvent
          is in use this function may not be used. This function may only be used if 
          <c>cosNotificationApp:install_event/1/2</c> was used. If not, use
          <c>cosEventApp:uninstall()</c> instead.</p>
      </desc>
    </func>
    <func>
      <name>uninstall_event(Seconds) -> Return</name>
      <fsummary>Uninstall the inherited cosEvent interfaces</fsummary>
      <type>
        <v>Return = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation uninstalls the inherited cosEvent interfaces, using <c>Seconds</c>
          delay between each block of IFR-unregistrations.  If cosEvent
          is in use this function may not be used.  This function may only be used if 
          <c>cosNotificationApp:install_event/1/2</c> was used. If not, use
          <c>cosEventApp:uninstall()</c> instead.</p>
      </desc>
    </func>
    <func>
      <name>start() -> Return</name>
      <fsummary>Start the cosNotification application</fsummary>
      <type>
        <v>Return = ok | {error, Reason}</v>
      </type>
      <desc>
        <p>This operation starts the cosNotification application.</p>
      </desc>
    </func>
    <func>
      <name>stop() -> Return</name>
      <fsummary>Stop the cosNotification application</fsummary>
      <type>
        <v>Return = ok | {error, Reason}</v>
      </type>
      <desc>
        <p>This operation stops the cosNotification application.</p>
      </desc>
    </func>
    <func>
      <name>start_global_factory() -> ChannelFactory</name>
      <fsummary>Start a global channel factory as default</fsummary>
      <type>
        <v>ChannelFactory = #objref</v>
      </type>
      <desc>
        <p>This operation creates a 
          <seealso marker="CosNotifyChannelAdmin_EventChannelFactory">Event Channel Factory</seealso>
          should be used for a multi-node Orber.
          The Factory is used to create a new 
          <seealso marker="CosNotifyChannelAdmin_EventChannel">channel</seealso>. </p>
      </desc>
    </func>
    <func>
      <name>start_global_factory(Options) -> ChannelFactory</name>
      <fsummary>Start a global channel factory with options</fsummary>
      <type>
        <v>Options = [Option]</v>
        <v>Option = {pullInterval, Seconds} | {filterOp, Op} | {gcTime, Seconds} | {gcLimit, Anount} | {timeService, #objref}</v>
        <v>ChannelFactory = #objref</v>
      </type>
      <desc>
        <p>This operation creates a 
          <seealso marker="CosNotifyChannelAdmin_EventChannelFactory">Event Channel Factory</seealso> and
          should be used for a multi-node Orber.
          The Factory is used to create a new 
          <seealso marker="CosNotifyChannelAdmin_EventChannel">channel</seealso>. </p>
        <p></p>
        <list type="bulleted">
          <item><c>{pullInterval, Seconds}</c> - determine how often Proxy Pull 
           Consumers will check for new events with the client application. The
           default value is 20 seconds.</item>
          <item><c>{filterOp, OperationType}</c> - determine which type of Administrator
           objects should be started, i.e., <c>'OR_OP'</c> or <c>'AND_OP'</c>.
           The default value is <c>'OR_OP'</c>.</item>
          <item><c>{timeService, TimeServiceObj | 'undefined'}</c> - to be able to use
           Start and/or Stop QoS this option must be used. See the function <c>start_time_service/2</c>
           in the <c>cosTime</c> application. The default value is <c>'undefined'</c>.</item>
          <item><c>{filterOp, OperationType}</c> - determine which type of Administrator
           objects should be started, i.e., <c>'OR_OP'</c> or <c>'AND_OP'</c>.
           The default value is <c>'OR_OP'</c>.</item>
          <item><c>{gcTime, Seconds}</c> - this option determines how often, for example, proxies
           will garbage collect expired events. The default value is 60.</item>
          <item><c>{gcLimit, Amount}</c> - determines how many events will be stored before, for
           example, proxies will garbage collect expired events. The default value is 50. This
           option is tightly coupled with the QoS property <c>MaxEventsPerConsumer</c>, i.e.,
           the <c>gcLimit</c> should be less than <c>MaxEventsPerConsumer</c> and greater than 0.</item>
        </list>
      </desc>
    </func>
    <func>
      <name>start_factory() -> ChannelFactory</name>
      <fsummary>Start a channel factory as default</fsummary>
      <type>
        <v>ChannelFactory = #objref</v>
      </type>
      <desc>
        <p>This operation creates a 
          <seealso marker="CosNotifyChannelAdmin_EventChannelFactory">Event Channel Factory</seealso>.
          The Factory is used to create a new 
          <seealso marker="CosNotifyChannelAdmin_EventChannel">channel</seealso>. </p>
      </desc>
    </func>
    <func>
      <name>start_factory(Options) -> ChannelFactory</name>
      <fsummary>Start a channel factory with options</fsummary>
      <type>
        <v>Options = [Option]</v>
        <v>Option = {pullInterval, Seconds} | {filterOp, Op} | {gcTime, Seconds} | {gcLimit, Amount} | {timeService, #objref}</v>
        <v>ChannelFactory = #objref</v>
      </type>
      <desc>
        <p>This operation creates a 
          <seealso marker="CosNotifyChannelAdmin_EventChannelFactory">Event Channel Factory</seealso>.
          The Factory is used to create a new 
          <seealso marker="CosNotifyChannelAdmin_EventChannel">channel</seealso>. </p>
      </desc>
    </func>
    <func>
      <name>stop_factory(ChannelFactory) -> Reply</name>
      <fsummary>Terminate the target object</fsummary>
      <type>
        <v>ChannelFactory = #objref</v>
        <v>Reply = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation stop the target channel factory.</p>
      </desc>
    </func>
    <func>
      <name>start_filter_factory() -> FilterFactory</name>
      <fsummary>Start a filter factory</fsummary>
      <type>
        <v>FilterFactory = #objref</v>
      </type>
      <desc>
        <p>This operation creates a 
          <seealso marker="CosNotifyFilter_FilterFactory">Filter Factory</seealso>.
          The Factory is used to create a new 
          <seealso marker="CosNotifyFilter_Filter">Filter's</seealso> and
          <seealso marker="CosNotifyFilter_MappingFilter">MappingFilter's</seealso>. </p>
      </desc>
    </func>
    <func>
      <name>stop_filter_factory(FilterFactory) -> Reply</name>
      <fsummary>Terminate the target object</fsummary>
      <type>
        <v>FilterFactory = #objref</v>
        <v>Reply = ok | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>This operation stop the target filter factory.</p>
      </desc>
    </func>
    <func>
      <name>create_structured_event(Domain, Type, Event, VariableHeader, FilterableBody, BodyRemainder) -> Reply</name>
      <fsummary>Create a structured event</fsummary>
      <type>
        <v>Domain = string()</v>
        <v>Type = string()</v>
        <v>Event = string()</v>
        <v>VariableHeader = [CosNotification::Property]</v>
        <v>FilterableBody = [CosNotification::Property]</v>
        <v>BodyRemainder = #any data-type</v>
        <v>Reply = CosNotification::StructuredEvent | {'EXCEPTION', E}</v>
      </type>
      <desc>
        <p>An easy way to create a structured event is to use this function.
          Simple typechecks are performed and if one of the arguments is not
          correct a 'BAD_PARAM' exception is thrown.</p>
      </desc>
    </func>
    <func>
      <name>type_check() -> Reply</name>
      <fsummary>Return the value of the configuration parameter type_check</fsummary>
      <type>
        <v>Reply = true | false</v>
      </type>
      <desc>
        <p>This operation returns the value of the configuration parameter 
          <c>type_check</c>.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

