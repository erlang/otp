<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_StructuredProxyPullConsumer</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_StructuredProxyPullConsumer</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::StructuredProxyPullConsumer interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifyPublish">CosNotifyComm_NotifyPublish</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxyConsumer">CosNotifyChannelAdmin_ProxyConsumer</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_structured_pull_supplier(StructuredProxyPullConsumer, PullSupplier) -> Reply</name>
      <fsummary>Connect a supplier to the proxy</fsummary>
      <type>
        <v>StructuredProxyPullConsumer = #objref</v>
        <v>PullSupplier = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}} | {'EXCEPTION', #'CosEventChannelAdmin_TypeError'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PullSupplier</c> to the target object. If a connection
          already exists or the given client object does not support the functions 
          <c>pull_structured_event</c> and <c>try_pull_structured_event</c> an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>suspend_connection(StructuredProxyPullConsumer) -> Reply</name>
      <fsummary>Suspend the connection between the target object and its client</fsummary>
      <type>
        <v>StructuredProxyPullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>This operation suspends the connection between the target object and its client.
          If no connection exists or already suspended an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>resume_connection(StructuredProxyPullConsumer) -> Reply</name>
      <fsummary>Resume a previously suspended connection with the proxy</fsummary>
      <type>
        <v>StructuredProxyPullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>If the connection have been suspended this operation must be used if we want
          to resume the connection. If the connection already are active or no connection
          have been created an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_structured_pull_consumer(StructuredProxyPullConsumer) -> ok</name>
      <fsummary>Close the connection and terminate the proxy</fsummary>
      <type>
        <v>StructuredProxyPullConsumer = #objref</v>
      </type>
      <desc>
        <p>This operation cause the target object to close the connection and terminate.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

