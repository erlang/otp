<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_ProxySupplier</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_ProxySupplier</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::ProxySupplier interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>_get_MyType(ProxySupplier) -> ProxyType</name>
      <fsummary>Return the proxy type</fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>ProxyType = 'PUSH_ANY' | 'PULL_ANY' | 'PUSH_STRUCTURED' |  'PULL_STRUCTURED' | 'PUSH_SEQUENCE' | 'PULL_SEQUENCE'</v>
      </type>
      <desc>
        <p>This readonly attribute maintains the enumerant describing the which type the target object 
          is.</p>
      </desc>
    </func>
    <func>
      <name>_get_MyAdmin(ProxySupplier) -> AdminObject</name>
      <fsummary>Return the target object's associated <c>Admin</c>object</fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>AdminObject = #objref</v>
      </type>
      <desc>
        <p>This readonly attribute maintains the admin's reference which created the target object.</p>
      </desc>
    </func>
    <func>
      <name>_get_priority_filter(ProxySupplier) -> MappingFilter</name>
      <fsummary>Return the target object's associated priority <c>MappingFilter</c></fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>MappingFilter = #objref</v>
      </type>
      <desc>
        <p>This operation returns the associated priority MappingFilter. 
          If no such object exist a <c>NIL</c> reference is returned.</p>
      </desc>
    </func>
    <func>
      <name>_set_priority_filter(ProxySupplier, MappingFilter) -> ok</name>
      <fsummary>Set the target object's associated priority <c>MappingFilter</c></fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>MappingFilter = #objref</v>
      </type>
      <desc>
        <p>This operation associate a new priority MappingFilter with the target object.</p>
      </desc>
    </func>
    <func>
      <name>_get_lifetime_filter(ProxySupplier) -> MappingFilter</name>
      <fsummary>Return the target object's associated lifetime <c>MappingFilter</c></fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>MappingFilter = #objref</v>
      </type>
      <desc>
        <p>This operation returns the associated lifetime MappingFilter. 
          If no such object exist a <c>NIL</c> reference is returned.</p>
      </desc>
    </func>
    <func>
      <name>_set_lifetime_filter(ProxySupplier, MappingFilter) -> ok</name>
      <fsummary>Set the target object's associated lifetime <c>MappingFilter</c></fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>MappingFilter = #objref</v>
      </type>
      <desc>
        <p>This operation associate a new lifetime MappingFilter with the target object.</p>
      </desc>
    </func>
    <func>
      <name>obtain_offered_types(ProxySupplier, ObtainInfoMode) -> EventTypeSeq</name>
      <fsummary>Administer the type of events the proxy supplies</fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>ObtainInfoMode = 'ALL_NOW_UPDATES_OFF' | 'ALL_NOW_UPDATES_ON' |  'NONE_NOW_UPDATES_OFF' | 'NONE_NOW_UPDATES_ON'</v>
        <v>EventTypeSeq = [EventType]</v>
        <v>EventType = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
      </type>
      <desc>
        <p>Depending on the input parameter <c>ObtainInfoMode</c>, this operation may return a 
          sequence of the <c>EventTypes</c> the target object is interested in receiving.
          If <c>'ALL_NOW_UPDATES_OFF'</c> or <c>'ALL_NOW_UPDATES_ON'</c> is given a sequence will
          be returned, otherwise not. If <c>'ALL_NOW_UPDATES_OFF'</c> or <c>'NONE_NOW_UPDATES_OFF'</c>
          are issued the target object will not inform the associated <c>NotifySubscribe</c> object
          when an update occurs. <c>'ALL_NOW_UPDATES_ON'</c> or <c>'NONE_NOW_UPDATES_ON'</c> will 
          result in that update information will be sent.</p>
      </desc>
    </func>
    <func>
      <name>validate_event_qos(ProxySupplier, QoSProperties) -> Reply</name>
      <fsummary>Check if the QoS properties can be set</fsummary>
      <type>
        <v>ProxySupplier = #objref</v>
        <v>QoSProperties = [QoSProperty]</v>
        <v>QoSProperty = #'CosNotification_Property'{name, value}</v>
        <v>name = string()</v>
        <v>value = #any</v>
        <v>Reply = {ok, NamedPropertyRangeSeq} | {'EXCEPTION', CosNotification_UnsupportedQoS{qos_err}}</v>
        <v>NamedPropertyRangeSeq = [NamedPropertyRange]</v>
        <v>NamedPropertyRange = #CosNotification_NamedPropertyRange{name, range}</v>
        <v>name = string()</v>
        <v>range = #CosNotification_PropertyRange{low_val, high_val}</v>
        <v>low_val = #any</v>
        <v>high_val = #any</v>
        <v>qos_err = PropertyErrorSeq</v>
        <v>PropertyErrorSeq = [PropertyError]</v>
        <v>PropertyError = #'CosNotification_PropertyError'{code, name, available_range}</v>
        <v>code = 'UNSUPPORTED_PROPERTY' | 'UNAVAILABLE_PROPERTY' | 'UNSUPPORTED_VALUE' |  'UNAVAILABLE_VALUE' | 'BAD_PROPERTY' | 'BAD_TYPE' | 'BAD_VALUE'</v>
        <v>name = string()</v>
        <v>available_range = PropertyRange</v>
        <v>PropertyRange = #CosNotification_PropertyRange{low_val, high_val}</v>
        <v>low_val = high_val = #any</v>
      </type>
      <desc>
        <p>To check if certain Quality of Service properties can be added to events in
          the current context of the target object this operation should be used. If we
          cannot support the required settings an exception describing why will be raised.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

