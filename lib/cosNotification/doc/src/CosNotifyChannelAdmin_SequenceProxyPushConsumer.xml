<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>CosNotifyChannelAdmin_SequenceProxyPushConsumer</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_SequenceProxyPushConsumer</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::SequenceProxyPushConsumer interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifyPublish">CosNotifyComm_NotifyPublish</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxyConsumer">CosNotifyChannelAdmin_ProxyConsumer</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_sequence_push_supplier(SequenceProxyPushConsumer, PushSupplier) -> Reply</name>
      <fsummary>Connect a supplier to the proxy</fsummary>
      <type>
        <v>SequenceProxyPushConsumer = #objref</v>
        <v>PushSupplier = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PushSupplier</c> to the target object. If a
          connection already exists the <c>AlreadyConnected</c> exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>push_structured_events(SequenceProxyPushConsumer, EventBatch) -> Reply</name>
      <fsummary>Push a structured event to the proxy</fsummary>
      <type>
        <v>SequenceProxyPushConsumer = #objref</v>
        <v>EventBatch = [StructuredEvent]</v>
        <v>StructuredEvent = #'CosNotification_StructuredEvent'{header, filterable_data, remainder_of_body}</v>
        <v>header = EventHeader</v>
        <v>filterable_data = [#'CosNotification_Property'{name, value}]</v>
        <v>name = string()</v>
        <v>value = #any</v>
        <v>remainder_of_body = #any</v>
        <v>EventHeader = #'CosNotification_EventHeader'{fixed_header, variable_header}</v>
        <v>fixed_header = FixedEventHeader</v>
        <v>variable_header = OptionalHeaderFields</v>
        <v>FixedEventHeader = #'CosNotification_FixedEventHeader'{event_type, event_name}</v>
        <v>event_type = EventType</v>
        <v>event_name = string()</v>
        <v>EventType = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
        <v>OptionalHeaderFields = [#'CosNotification_Property'{name, value}]</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_Disconnected'{}}</v>
      </type>
      <desc>
        <p>A client must use this operation when it wishes to push a new sequence of events
          to the target object. If no connection exists the <c>Disconnected</c> exception
          is raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_sequence_push_consumer(SequenceProxyPushConsumer) -> ok</name>
      <fsummary>Close connection and terminate the proxy</fsummary>
      <type>
        <v>SequenceProxyPushConsumer = #objref</v>
      </type>
      <desc>
        <p>This operation cause the target object to close the connection and terminate.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

