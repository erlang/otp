<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyComm_NotifyPublish</title>
    <prepared>Niclas Eklund</prepared>
    <responsible>Niclas Eklund</responsible>
    <docno></docno>
    <approved>Niclas Eklund</approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyComm_NotifyPublish</module>
  <modulesummary>This module implements the OMG CosNotifyComm::NotifyPublish interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>All objects, which inherit this interface, export functions described in this module.</p>
  </description>
  <funcs>
    <func>
      <name>offer_change(Object, Added, Removed) -> Reply</name>
      <fsummary>Inform the target object which type of events the supplier will deliver</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Added = Removed = EventTypeSeq</v>
        <v>EventTypeSeq = [type]</v>
        <v>Reply = ok | {'EXCEPTION', CosNotifyComm_InvalidEventType{type}}</v>
        <v>type = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
      </type>
      <desc>
        <p>Objects supporting this interface can be informed by supplier objects about
          which type of events that will be delivered in the future. This operation
          accepts two parameters describing new and old event types respectively.
          If any of the supplied event type names is syntactically incorrect an exception
          is raised.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

