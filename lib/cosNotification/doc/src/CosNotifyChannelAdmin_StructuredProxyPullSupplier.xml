<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_StructuredProxyPullSupplier</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_StructuredProxyPullSupplier</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::StructuredProxyPullSupplier interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifySubscribe">CosNotifyComm_NotifySubscribe</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxySupplier">CosNotifyChannelAdmin_ProxySupplier</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_structured_pull_consumer(StructuredProxyPullSupplier, PullConsumer) -> Reply</name>
      <fsummary>Connect a consumer to the proxy</fsummary>
      <type>
        <v>StructuredProxyPullSupplier = #objref</v>
        <v>PullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PullConsumer</c> to the target object. If a connection
          already exists the <c>AlreadyConnected</c> exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>pull_structured_event(StructuredProxyPullSupplier) -> Reply</name>
      <fsummary>Pull a structured event from the proxy</fsummary>
      <type>
        <v>StructuredProxyPullSupplier = #objref</v>
        <v>Reply = StructuredEvent | {'EXCEPTION', #'CosEventChannelAdmin_Disconnected'{}}</v>
        <v>StructuredEvent = #'CosNotification_StructuredEvent'{header, filterable_data, remainder_of_body}</v>
        <v>header = EventHeader</v>
        <v>filterable_data = [#'CosNotification_Property'{name, value}]</v>
        <v>name = string()</v>
        <v>value = #any</v>
        <v>remainder_of_body = #any</v>
        <v>EventHeader = #'CosNotification_EventHeader'{fixed_header, variable_header}</v>
        <v>fixed_header = FixedEventHeader</v>
        <v>variable_header = OptionalHeaderFields</v>
        <v>FixedEventHeader = #'CosNotification_FixedEventHeader'{event_type, event_name}</v>
        <v>event_type = EventType</v>
        <v>event_name = string()</v>
        <v>EventType = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
        <v>OptionalHeaderFields = [#'CosNotification_Property'{name, value}]</v>
      </type>
      <desc>
        <p>This operation pulls next event from the target object; if an event cannot
          be delivered this function blocks until an event arrives.</p>
      </desc>
    </func>
    <func>
      <name>try_pull_structured_event(StructuredProxyPullSupplier) -> Reply</name>
      <fsummary>Try to pull a structured event from the proxy</fsummary>
      <type>
        <v>StructuredProxyPullSupplier = #objref</v>
        <v>Reply = {StructuredEvent, HasEvent} | {'EXCEPTION', #'CosEventChannelAdmin_Disconnected'{}}</v>
        <v>HasEvent = boolean()</v>
        <v>StructuredEvent = #'CosNotification_StructuredEvent'{header, filterable_data, remainder_of_body}</v>
        <v>header = EventHeader</v>
        <v>filterable_data = [#'CosNotification_Property'{name, value}]</v>
        <v>name = string()</v>
        <v>value = #any</v>
        <v>remainder_of_body = #any</v>
        <v>EventHeader = #'CosNotification_EventHeader'{fixed_header, variable_header}</v>
        <v>fixed_header = FixedEventHeader</v>
        <v>variable_header = OptionalHeaderFields</v>
        <v>FixedEventHeader = #'CosNotification_FixedEventHeader'{event_type, event_name}</v>
        <v>event_type = EventType</v>
        <v>event_name = string()</v>
        <v>EventType = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
        <v>OptionalHeaderFields = [#'CosNotification_Property'{name, value}]</v>
      </type>
      <desc>
        <p>This operation try to pull next event from the target object. If no event have arrived
          an empty event is returned and the out parameter <c>HasEvent</c> is set to false. Otherwise,
          the boolean flag is set to true and an valid event is returned.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_structured_pull_supplier(StructuredProxyPullSupplier) -> ok</name>
      <fsummary>Close connection and terminate the proxy</fsummary>
      <type>
        <v>StructuredProxyPullSupplier = #objref</v>
      </type>
      <desc>
        <p>This operation cause the target object to close the connection and terminate.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

