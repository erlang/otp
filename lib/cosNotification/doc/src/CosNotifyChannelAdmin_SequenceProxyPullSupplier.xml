<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_SequenceProxyPullSupplier</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_SequenceProxyPullSupplier</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::SequenceProxyPullSupplier interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifySubscribe">CosNotifyComm_NotifySubscribe</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxySupplier">CosNotifyChannelAdmin_ProxySupplier</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_sequence_pull_consumer(SequenceProxyPullSupplier, PullConsumer) -> Reply</name>
      <fsummary>Connect a consumer to the proxy</fsummary>
      <type>
        <v>SequenceProxyPullSupplier = #objref</v>
        <v>PullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PullConsumer</c> to the target object. If a connection
          already exists an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>pull_structured_events(SequenceProxyPullSupplier, MaxEvents) -> Reply</name>
      <fsummary>Pull structured events from the proxy</fsummary>
      <type>
        <v>SequenceProxyPullSupplier = #objref</v>
        <v>MaxEvents = long()</v>
        <v>Reply = EventBatch | {'EXCEPTION', #'CosEventChannelAdmin_Disconnected'{}}</v>
        <v>EventBatch = [StructuredEvent]</v>
        <v>StructuredEvent = #'CosNotification_StructuredEvent'{header, filterable_data, remainder_of_body}</v>
        <v>header = EventHeader</v>
        <v>filterable_data = [#'CosNotification_Property'{name, value}]</v>
        <v>name = string()</v>
        <v>value = #any</v>
        <v>remainder_of_body = #any</v>
        <v>EventHeader = #'CosNotification_EventHeader'{fixed_header, variable_header}</v>
        <v>fixed_header = FixedEventHeader</v>
        <v>variable_header = OptionalHeaderFields</v>
        <v>FixedEventHeader = #'CosNotification_FixedEventHeader'{event_type, event_name}</v>
        <v>event_type = EventType</v>
        <v>event_name = string()</v>
        <v>EventType = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
        <v>OptionalHeaderFields = [#'CosNotification_Property'{name, value}]</v>
      </type>
      <desc>
        <p>A client use this operation to pull next event sequence of maximum length 
          <c>MaxEvents</c>. This operation is blocking and will not reply until the
          requested amount of events can be delivered or the QoS property <c>PacingInterval</c>
          is reached. For more information see the <c>User's Guide</c>.</p>
      </desc>
    </func>
    <func>
      <name>try_pull_structured_events(SequenceProxyPullSupplier, MaxEvents) -> Reply</name>
      <fsummary>Try to pull structured events from the proxy</fsummary>
      <type>
        <v>SequenceProxyPullSupplier = #objref</v>
        <v>MaxEvents = long()</v>
        <v>Reply = {EventBatch, HasEvent} | {'EXCEPTION', #'CosEventChannelAdmin_Disconnected'{}}</v>
        <v>HasEvent = boolean()</v>
        <v>EventBatch = [StructuredEvent]</v>
        <v>StructuredEvent = #'CosNotification_StructuredEvent'{header, filterable_data, remainder_of_body}</v>
        <v>header = EventHeader</v>
        <v>filterable_data = [#'CosNotification_Property'{name, value}]</v>
        <v>name = string()</v>
        <v>value = #any</v>
        <v>remainder_of_body = #any</v>
        <v>EventHeader = #'CosNotification_EventHeader'{fixed_header, variable_header}</v>
        <v>fixed_header = FixedEventHeader</v>
        <v>variable_header = OptionalHeaderFields</v>
        <v>FixedEventHeader = #'CosNotification_FixedEventHeader'{event_type, event_name}</v>
        <v>event_type = EventType</v>
        <v>event_name = string()</v>
        <v>EventType = #'CosNotification_EventType'{domain_name, type_name}</v>
        <v>domain_name = type_name = string()</v>
        <v>OptionalHeaderFields = [#'CosNotification_Property'{name, value}]</v>
      </type>
      <desc>
        <p>This operation pulls an event sequence of the maximum length <c>MaxEvents</c>, 
          but do not block if the target object have no events to forward. The outparameter,
          <c>HasEvent</c> is true if the sequence contain any events.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_sequence_pull_supplier(SequenceProxyPullSupplier) -> ok</name>
      <fsummary>Close the connection and terminate the proxy</fsummary>
      <type>
        <v>SequenceProxyPullSupplier = #objref</v>
      </type>
      <desc>
        <p>This operation cause the target object to close the connection and terminate.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

