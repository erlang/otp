<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_SequenceProxyPullConsumer</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_SequenceProxyPullConsumer</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::SequenceProxyPullConsumer interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifyPublish">CosNotifyComm_NotifyPublish</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxyConsumer">CosNotifyChannelAdmin_ProxyConsumer</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_sequence_pull_supplier(SequenceProxyPullConsumer, PullSupplier) -> Reply</name>
      <fsummary>Connect a supplier to the proxy</fsummary>
      <type>
        <v>SequenceProxyPullConsumer = #objref</v>
        <v>PullSupplier = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}} | {'EXCEPTION', #'CosEventChannelAdmin_TypeError'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PullSupplier</c> to the target object. If a 
          connection already exists or the supplied client does not support the functions
          <c>pull_structured_events</c> and <c>try_pull_structured_events</c> an exception
          is raised.</p>
      </desc>
    </func>
    <func>
      <name>suspend_connection(SequenceProxyPullConsumer) -> Reply</name>
      <fsummary>Suspend the connection with the proxy</fsummary>
      <type>
        <v>SequenceProxyPullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>If a connection exist, invoking this operation will suspend the connection
          until instructed otherwise. Otherwise, no client have been connected or this operation
          already have been invoked an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>resume_connection(SequenceProxyPullConsumer) -> Reply</name>
      <fsummary>Resume a previously suspended connection with the proxy</fsummary>
      <type>
        <v>SequenceProxyPullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>If an connection have been suspended this operation must be used to resume the
          connection. If the connection already is active or no client have been connected an
          exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_sequence_pull_consumer(SequenceProxyPullConsumer) -> ok</name>
      <fsummary>Close connection and terminate the proxy</fsummary>
      <type>
        <v>SequenceProxyPullConsumer = #objref</v>
      </type>
      <desc>
        <p>This operation close the connection to the client and terminates the target object.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

