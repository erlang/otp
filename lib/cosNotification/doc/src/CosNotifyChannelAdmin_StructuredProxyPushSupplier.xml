<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_StructuredProxyPushSupplier</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_StructuredProxyPushSupplier</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::StructuredProxyPushSupplier interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifySubscribe">CosNotifyComm_NotifySubscribe</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxySupplier">CosNotifyChannelAdmin_ProxySupplier</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_structured_push_consumer(StructuredProxyPushSupplier, PushConsumer) -> Reply</name>
      <fsummary>Connect a consumer to the proxy</fsummary>
      <type>
        <v>StructuredProxyPushSupplier = #objref</v>
        <v>PushConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}} | {'EXCEPTION', #'CosEventChannelAdmin_TypeError'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PushConsumer</c> to the target object. If
          a connection already exists or the function <c>push_structured_event</c>
          is not supported by the client object an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>suspend_connection(StructuredProxyPushSupplier) -> Reply</name>
      <fsummary>Suspend the connection with the target object</fsummary>
      <type>
        <v>StructuredProxyPushSupplier = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>This operation suspends the connection with the target object. If no connection
          exists or the connection already is suspended an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>resume_connection(StructuredProxyPushSupplier) -> Reply</name>
      <fsummary>Resume a previously suspended connection</fsummary>
      <type>
        <v>StructuredProxyPullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>If the connection with the target object have been suspended this function 
          must be used to resume the connection. If no client have been connected or
          the connection is active an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_structured_push_supplier(StructuredProxyPushSupplier) -> ok</name>
      <fsummary>Close the connection and terminate the target object</fsummary>
      <type>
        <v>StructuredProxyPushSupplier = #objref</v>
      </type>
      <desc>
        <p>This operation cause the target object to close the connection and terminate.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

