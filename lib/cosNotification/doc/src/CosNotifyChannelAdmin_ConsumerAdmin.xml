<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_ConsumerAdmin</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_ConsumerAdmin</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::ConsumerAdmin interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyComm_NotifySubscribe">CosNotifyComm_NotifySubscribe</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmin</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>_get_MyID(ConsumerAdmin) -> AdminID</name>
      <fsummary>Return the target object's Id</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>AdminID = long()</v>
      </type>
      <desc>
        <p>The ID returned by the creating channel is equal to the value encapsulated by
          this readonly attribute.</p>
      </desc>
    </func>
    <func>
      <name>_get_MyChannel(ConsumerAdmin) -> Channel</name>
      <fsummary>Return the ancestor channel</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>Channel = #objref</v>
      </type>
      <desc>
        <p>The creating channel's reference is maintained by this readonly attribute.</p>
      </desc>
    </func>
    <func>
      <name>_get_MyOperator(ConsumerAdmin) -> OpType</name>
      <fsummary>Return the filtering schema used by the target object</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>OpType = 'AND_OP' | 'OR_OP'</v>
      </type>
      <desc>
        <p>When <c>ConsumerAdmin's</c> are created an operation type,
          i.e., <c>'AND_OP'</c> or <c>'OR_OP'</c>, is supplied, which determines
          the semantics used by the target object concerning evaluation against
          any associated <c>Filter</c> objects.</p>
      </desc>
    </func>
    <func>
      <name>_get_priority_filter(ConsumerAdmin) -> MappingFilter</name>
      <fsummary>Return the associated priority <c>MappingFilter</c></fsummary>
      <type>
        <v>ConsumerAdmin = MappingFilter = #objref</v>
      </type>
      <desc>
        <p>If set, this operation returns the associated priority <c>MappingFilter</c>, otherwise
          a <c>NIL</c> object reference is returned.</p>
      </desc>
    </func>
    <func>
      <name>_set_priority_filter(ConsumerAdmin, MappingFilter) -> ok</name>
      <fsummary>Set the priority <c>MappingFilter</c></fsummary>
      <type>
        <v>ConsumerAdmin = MappingFilter = #objref</v>
      </type>
      <desc>
        <p>To associate a priority <c>MappingFilter</c> with the target object this operation
          must be used.</p>
      </desc>
    </func>
    <func>
      <name>_get_lifetime_filter(ConsumerAdmin) -> MappingFilter</name>
      <fsummary>Return the associated lifetime <c>MappingFilter</c></fsummary>
      <type>
        <v>ConsumerAdmin = MappingFilter = #objref</v>
      </type>
      <desc>
        <p>Unless a lifetime <c>MappingFilter</c> have been associated with the target object
          a <c>NIL</c> object reference is returned by this operation.</p>
      </desc>
    </func>
    <func>
      <name>_set_lifetime_filter(ConsumerAdmin, MappingFilter) -> ok</name>
      <fsummary>Set the lifetime <c>MappingFilter</c></fsummary>
      <type>
        <v>ConsumerAdmin = MappingFilter = #objref</v>
      </type>
      <desc>
        <p>This operation associate a lifetime <c>MappingFilter</c> with the target object.</p>
      </desc>
    </func>
    <func>
      <name>_get_pull_suppliers(ConsumerAdmin) -> ProxyIDSeq</name>
      <fsummary>Return a list of all associated pull supplier Id:s</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>ProxyIDSeq = [ProxyID]</v>
        <v>ProxyID = long()</v>
      </type>
      <desc>
        <p>This readonly attribute maintains the Id's for all <c>PullProxies</c> created
          by the target object and still alive.</p>
      </desc>
    </func>
    <func>
      <name>_get_push_suppliers(ConsumerAdmin) -> ProxyIDSeq</name>
      <fsummary>Return a list of all associated push supplier Id:s</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>ProxyIDSeq = [ProxyID]</v>
        <v>ProxyID = long()</v>
      </type>
      <desc>
        <p>This attribute is similar to the <c>_get_pull_suppliers</c> attribute but maintains
          the Id's for all <c>PushProxies</c> created by the target object and still alive.</p>
      </desc>
    </func>
    <func>
      <name>get_proxy_supplier(ConsumerAdmin, ProxyID) -> Reply</name>
      <fsummary>Return the proxy supplier with matching Id</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>ProxyID = long()</v>
        <v>Reply = Proxy |  {'EXCEPTION', #'CosNotifyChannelAdmin_ProxyNotFound'{}}</v>
        <v>Proxy = #objref</v>
      </type>
      <desc>
        <p>If a proxy with the given Id exists the reference to the object is returned, but if
          the object have terminated, or an incorrect Id is supplied, an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>obtain_notification_pull_supplier(ConsumerAdmin, ConsumerType) -> Reply</name>
      <fsummary>Create a supplier proxy</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>ConsumerType = 'ANY_EVENT' | 'STRUCTURED_EVENT' | 'SEQUENCE_EVENT'</v>
        <v>Reply = {Proxy, ProxyID}</v>
        <v>Proxy = #objref</v>
        <v>ProxyID = long()</v>
      </type>
      <desc>
        <p>Determined by the parameter <c>ConsumerType</c>, a proxy which will
          accept events of the defined type is created. Along with the object reference an
          Id is returned. </p>
      </desc>
    </func>
    <func>
      <name>obtain_pull_supplier(ConsumerAdmin) -> Proxy</name>
      <fsummary>Create a supplier proxy</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>Proxy = #objref</v>
      </type>
      <desc>
        <p>This operation creates a new proxy which accepts <c>#any{}</c> events.</p>
      </desc>
    </func>
    <func>
      <name>obtain_notification_push_supplier(ConsumerAdmin, ConsumerType) -> Reply</name>
      <fsummary>Create a supplier proxy</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>ConsumerType = 'ANY_EVENT' | 'STRUCTURED_EVENT' | 'SEQUENCE_EVENT'</v>
        <v>Reply = {Proxy, ProxyID}</v>
        <v>Proxy = #objref</v>
        <v>ProxyID = long()</v>
      </type>
      <desc>
        <p>A proxy which accepts events of the type described by the parameter <c>ConsumerType</c>
          is created by this operation. A unique Id is returned as an out parameter.</p>
      </desc>
    </func>
    <func>
      <name>obtain_push_supplier(ConsumerAdmin) -> Proxy</name>
      <fsummary>Create a supplier proxy</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
        <v>Proxy = #objref</v>
      </type>
      <desc>
        <p>The object created by this function is a proxy which accepts <c>#any{}</c> events.</p>
      </desc>
    </func>
    <func>
      <name>destroy(ConsumerAdmin) -> ok</name>
      <fsummary>Terminate the target object and all its children</fsummary>
      <type>
        <v>ConsumerAdmin = #objref</v>
      </type>
      <desc>
        <p>To terminate the target object this operation should be used. The associated
          <c>Channel</c> will be notified.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

