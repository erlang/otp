<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosNotifyChannelAdmin_ProxyPushSupplier</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2000-02-01</date>
    <rev>1.0</rev>
  </header>
  <module>CosNotifyChannelAdmin_ProxyPushSupplier</module>
  <modulesummary>This module implements the OMG  CosNotifyChannelAdmin::ProxyPushSupplier interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosNotification/include/*.hrl").</c></p>
    <p>This module also exports the functions described in:</p>
    <list type="bulleted">
      <item>
        <p><seealso marker="CosNotifyComm_NotifySubscribe">CosNotifyComm_NotifySubscribe</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotification_QoSAdmin">CosNotification_QoSAdmin</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyFilter_FilterAdmin">CosNotifyFilter_FilterAdmi</seealso></p>
      </item>
      <item>
        <p><seealso marker="CosNotifyChannelAdmin_ProxySupplier">CosNotifyChannelAdmin_ProxySupplier</seealso></p>
      </item>
    </list>
  </description>
  <funcs>
    <func>
      <name>connect_any_push_consumer(ProxyPushSupplier, PushConsumer) -> Reply</name>
      <fsummary>Connect a consumer to the proxy</fsummary>
      <type>
        <v>ProxyPushSupplier = #objref</v>
        <v>PushConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}} | {'EXCEPTION', #'CosEventChannelAdmin_TypeError'{}}</v>
      </type>
      <desc>
        <p>This operation connects a <c>PushConsumer</c> to the target object. If
          a connection already exists or the given client does not support
          the operation <c>push</c> an exception, <c>AlreadyConnected</c> and
          <c>TypeError</c> respectively, is raised.</p>
      </desc>
    </func>
    <func>
      <name>suspend_connection(ProxyPushSupplier) -> Reply</name>
      <fsummary>Suspend the connection between the proxy and the client</fsummary>
      <type>
        <v>ProxyPushSupplier = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>This operation suspends the connection with the client object. If the connection 
          already is suspended or no client have been associated an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>resume_connection(ProxyPushSupplier) -> Reply</name>
      <fsummary>Resume a previously suspended connection with the proxy</fsummary>
      <type>
        <v>ProxyPullConsumer = #objref</v>
        <v>Reply = ok | {'EXCEPTION', #'CosNotifyChannelAdmin_ConnectionAlreadyInactive'{}} | {'EXCEPTION', #'CosNotifyChannelAdmin_NotConnected'{}}</v>
      </type>
      <desc>
        <p>If a connection have been suspended earlier, calling this operation will resume the connection.
          If the connection already is active or no client have been connected an exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_push_supplier(ProxyPushSupplier) -> ok</name>
      <fsummary>Close the connection and terminate the proxy</fsummary>
      <type>
        <v>ProxyPushSupplier = #objref</v>
      </type>
      <desc>
        <p>This operation cause the target object to close the connection and terminate.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

