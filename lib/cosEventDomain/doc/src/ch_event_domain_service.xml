<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2001</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>Event Domain Service</title>
    <prepared>Niclas Eklund</prepared>
    <docno></docno>
    <date>2001-08-20</date>
    <rev>A</rev>
    <file>ch_event_domain_service.xml</file>
  </header>

  <section>
    <title>Overview of the CosEventDomain Service</title>
    <p>The Event Domain service allows programmers to manage a cluster
      of information channels.</p>

    <section>
      <title>Event Domain Service Components</title>
      <p>There are two components in the OMG CosEventDomainAdmin service architecture:</p>
      <list type="bulleted">
        <item><em>EventDomainFactory:</em> a factory for creating EventDomains.</item>
        <item><em>EventDomain:</em> supplies a tool, which makes it easy to create
         topologies of interconnected channels (i.e. a directed graph).</item>
      </list>
    </section>

    <section>
      <title>A Tutorial on How to Create a Simple Service</title>
      <p>To be able to use the cosEventDomain application, the cosNotification
        and, possibly, the cosTime application must be installed.</p>
    </section>

    <section>
      <title>How to Run Everything</title>
      <p>Below is a short transcript on how to run cosEventDomain. </p>
      <code type="none"><![CDATA[
 
%% Start Mnesia and Orber
mnesia:delete_schema([node()]),
mnesia:create_schema([node()]),
orber:install([node()]),
mnesia:start(),
orber:start(),
 
%% Install and start cosNotification.
cosNotificationApp:install(),
cosNotificationApp:start(),

%% Install and start cosEventDomain.
cosEventDomainApp:install(),
cosEventDomainApp:start(),

%% Start a CosEventDomainAdmin factory.
AdminFac = cosEventDomainApp:start_factory(),

%% Define the desired QoS settings:
QoS = 
   [#'CosNotification_Property'
    {name='CosEventDomainAdmin':'DiamondDetection'(), 
     value=any:create(orber_tc:short(),
     'CosEventDomainAdmin':'AuthorizeDiamonds'())},
    #'CosNotification_Property'
    {name='CosEventDomainAdmin':'CycleDetection'(), 
     value=any:create(orber_tc:short(),
     'CosEventDomainAdmin':'ForbidCycles'())}],

%% Create a new EventDomain:
{ED, EDId} = 'CosEventDomainAdmin_EventDomainFactory':
                        create_event_domain(Fac, QoS, []),

%% Now we can add Notification Channels to the Domain. How this
%% is done, see the cosNotification documentation. Let us assume
%% that we have gained access to two Channel Objects; add them to the
%% domain:
ID1 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch1),
ID2 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch2),

%% To connect them, we must first define a connection struct:
C1 = #'CosEventDomainAdmin_Connection'{supplier_id=ID1, 
                                       consumer_id=ID2,
                                       ctype='STRUCTURED_EVENT',
                                       notification_style='Pull'},

%% Connect them:
'CosEventDomainAdmin_EventDomain':add_connection(ED, C1),
      ]]></code>
    </section>
  </section>
</chapter>

