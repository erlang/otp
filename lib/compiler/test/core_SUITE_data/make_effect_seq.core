module 'make_effect_seq' ['make_effect_seq'/0]
    attributes []
'make_effect_seq'/0 =
    fun () ->
	case <> of
	  <> when 'true' ->
	      let <_cor0> =
		  catch
		      apply 't'/1
			  ('a')
	      in
		  case _cor0 of
		    <{'EXIT',{'badarg',_cor3}}> when 'true' ->
			let <_cor4> =
			    apply 't'/1
				({'a','b','c'})
			in
			    case _cor4 of
			      <'ok'> when 'true' ->
				  ( _cor4
				    -| ['compiler_generated'] )
			      ( <_cor2> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor2})
				-| ['compiler_generated'] )
			    end
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause'})
		  -| [{'function_name',{'make_effect_seq',0}}] )
	    -| ['compiler_generated'] )
	end
't'/1 =
    fun (_cor0) ->
	case _cor0 of
	  <T> when 'true' ->
	      do
		  {'ok',call 'erlang':'element'(2, T)}
		  'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'t',1}}] )
	    -| ['compiler_generated'] )
	end
end
