<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>httpd_conf</title>
    <prepared>Joakim Greben&ouml;</prepared>
    <docno></docno>
    <date>1997-10-14</date>
    <rev>2.2</rev>
    <file>httpd_conf.sgml</file>
  </header>
  <module>httpd_conf</module>
  <modulesummary>Configuration utility functions to be used by the Erlang
    Web server API programmer.</modulesummary>
  <description>
    <p>This module provides the Erlang Webserver API programmer with
    utility functions for adding run-time configuration directives.</p>

    <marker id="check_enum"></marker>
  </description>

  <funcs>
    <func>
      <name>check_enum(EnumString, ValidEnumStrings) -> Result</name>
      <fsummary>Check if string is a valid enumeration.</fsummary>
      <type>
        <v>EnumString = string()</v>
        <v>ValidEnumStrings = [string()]</v>
        <v>Result = {ok,atom()} | {error,not_valid}</v>
      </type>
      <desc>
        <marker id="check_enum"></marker>
        <p><c>check_enum/2</c> checks if <c>EnumString</c> is a valid
	enumeration of <c>ValidEnumStrings</c> in which case it is
	returned as an atom.</p>

	<marker id="clean"></marker>
      </desc>
    </func>

    <func>
      <name>clean(String) -> Stripped</name>
      <fsummary>Remove leading and/or trailing white spaces.</fsummary>
      <type>
        <v>String = Stripped = string()</v>
      </type>
      <desc>
        <marker id="clean"></marker>
        <p><c>clean/1</c> removes leading and/or trailing white spaces
	from <c>String</c>.</p>

	<marker id="custom_clean"></marker>
      </desc>
    </func>

    <func>
      <name>custom_clean(String,Before,After) -> Stripped</name>
      <fsummary>Remove leading and/or trailing white spaces and custom characters.</fsummary>
      <type>
        <v>Before = After = regexp()</v>
        <v>String = Stripped = string()</v>
      </type>
      <desc>
        <marker id="custom_clean"></marker>
        <p><c>custom_clean/3</c> removes leading and/or trailing white
	spaces and custom characters from <c>String</c>. <c>Before</c>
	and <c>After</c> are regular expressions, as defined in
	<c>regexp(3)</c>, describing the custom characters.</p>

	<marker id="is_directory"></marker>
      </desc>
    </func>

    <func>
      <name>is_directory(FilePath) -> Result</name>
      <fsummary>Check if a file path is a directory.</fsummary>
      <type>
        <v>FilePath = string()</v>
        <v>Result = {ok,Directory} | {error,Reason}</v>
        <v>Directory = string()</v>
        <v>Reason = string() | enoent | eaccess | enotdir | FileInfo</v>
        <v>FileInfo = File info record</v>
      </type>
      <desc>
        <marker id="is_directory"></marker>
        <p><c>is_directory/1</c> checks if <c>FilePath</c> is a
	directory in which case it is returned. Please read
	<c>file(3)</c> for a description of <c>enoent</c>,
	<c>eaccess</c> and <c>enotdir</c>. The definition of 
	the file info record can be found by including <c>file.hrl</c> 
	from the kernel application, see file(3).</p>

	<marker id="is_file"></marker>
      </desc>
    </func>

    <func>
      <name>is_file(FilePath) -> Result</name>
      <fsummary>Check if a file path is a regular file.</fsummary>
      <type>
        <v>FilePath = string()</v>
        <v>Result = {ok,File} | {error,Reason}</v>
        <v>File = string()</v>
        <v>Reason = string() | enoent | eaccess | enotdir | FileInfo</v>
        <v>FileInfo = File info record</v>
      </type>
      <desc>
        <marker id="is_file"></marker>
        <p><c>is_file/1</c> checks if <c>FilePath</c> is a regular
	file in which case it is returned. Read <c>file(3)</c> for a
	description of <c>enoent</c>, <c>eaccess</c> and
	<c>enotdir</c>. The definition of the file info record can be 
	found by including <c>file.hrl</c> from the kernel application, 
	see file(3).</p>

	<marker id="make_integer"></marker>
      </desc>
    </func>

    <func>
      <name>make_integer(String) -> Result</name>
      <fsummary>Return an integer representation of a string.</fsummary>
      <type>
        <v>String = string()</v>
        <v>Result = {ok,integer()} | {error,nomatch}</v>
      </type>
      <desc>
        <marker id="make_integer"></marker>
        <p><c>make_integer/1</c> returns an integer representation of
          <c>String</c>.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <marker id="see_also"></marker>
    <title>SEE ALSO</title>
    <p><seealso marker="httpd">httpd(3)</seealso></p>
  </section>
  
</erlref>


