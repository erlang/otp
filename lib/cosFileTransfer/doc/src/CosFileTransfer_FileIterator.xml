<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2000</year><year>2011</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      The contents of this file are subject to the Erlang Public License,
      Version 1.1, (the "License"); you may not use this file except in
      compliance with the License. You should have received a copy of the
      Erlang Public License along with this software. If not, it can be
      retrieved online at http://www.erlang.org/.
    
      Software distributed under the License is distributed on an "AS IS"
      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
      the License for the specific language governing rights and limitations
      under the License.
    
    </legalnotice>

    <title>CosFileTransfer_FileIterator</title>
    <prepared></prepared>
    <docno></docno>
    <checked></checked>
    <date>2000-11-09</date>
    <rev>PA1</rev>
  </header>
  <module>CosFileTransfer_FileIterator</module>
  <modulesummary>This module implements the OMG CosFileTransfer::FileIterator interface.</modulesummary>
  <description>
    <p>To get access to the record definitions for the structures use:      <br></br>
<c>-include_lib("cosFileTransfer/include/*.hrl").</c></p>
  </description>
  <funcs>
    <func>
      <name>next_one(Iterator) -> Return</name>
      <fsummary>Return the next <c>FileWrapper</c>and a boolean which indicate whether the <c>FileWrapper</c>is valid or not.</fsummary>
      <type>
        <v>Iterator = #objref</v>
        <v>Return = {boolean(), #'CosFileTransfer_FileWrapper'{the_file = File file_type = Type}}</v>
        <v>File = #objref</v>
        <v>Type = nfile | ndirectory</v>
      </type>
      <desc>
        <p>This operation returns true if a <c>FileWrapper</c> exists at the
          current position and the out parameter contains a valid <c>File</c>
          reference. If false is returned the out parameter is a non-valid 
          <c>FileWrapper</c>.</p>
      </desc>
    </func>
    <func>
      <name>next_n(Iterator, Max) -> Return</name>
      <fsummary>Return a list, of length <c>Max</c>or less, containing <c>FileWrappers</c>and a boolean which indicates if more <c>FileWrappers</c>exists</fsummary>
      <type>
        <v>Iterator = #objref</v>
        <v>Max = unsigned long()</v>
        <v>Return = {boolean(), FileList}</v>
        <v>FileList = [#'CosFileTransfer_FileWrapper'{the_file = File file_type = Type}]</v>
        <v>File = #objref</v>
        <v>Type = nfile | ndirectory</v>
      </type>
      <desc>
        <p>This operation returns true if the requested number of <c>FileWrappers</c> 
          can be delivered and there are additional <c>FileWrappers</c>. If false is 
          returned a list, of length <c>Max</c> or less, containing the last valid
          <c>FileWrappers</c> associated with the target object.</p>
      </desc>
    </func>
    <func>
      <name>destroy(Iterator) -> ok</name>
      <fsummary>Terminate the target object</fsummary>
      <type>
        <v>Iterator = #objref</v>
      </type>
      <desc>
        <p>This operation terminates the target object.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

