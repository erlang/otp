# 
# %CopyrightBegin%
# 
# Copyright Ericsson AB 2002-2022. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# %CopyrightEnd%

include $(ERL_TOP)/make/target.mk

ifeq ($(TYPE),debug)
ERL_COMPILE_FLAGS += -Ddebug -W
endif

EBIN = .
MEGACO_INCLUDEDIR = ../../include

include $(ERL_TOP)/make/$(TARGET)/otp.mk


# ----------------------------------------------------
# Application version
# ----------------------------------------------------
include ../../vsn.mk
VSN=$(MEGACO_VSN)


# ----------------------------------------------------
# Configured variables
# ----------------------------------------------------
PERL = @PERL@


# ----------------------------------------------------
# Release directory specification
# ----------------------------------------------------
RELSYSDIR         = $(RELEASE_PATH)/lib/megaco-$(VSN)
EXAMPLE_RELSYSDIR = $(RELSYSDIR)/examples
MEAS_RELSYSDIR    = $(EXAMPLE_RELSYSDIR)/meas


# ----------------------------------------------------
# Target Specs
# ----------------------------------------------------

include modules.mk

ERL_FILES = $(MODULES:%=%.erl)

SCRIPT_SKELETONS = $(SCRIPT_SKELETON_SRC:%.src=%)

ERL_TARGETS = \
	$(ERL_FILES:%.erl=$(EBIN)/%.$(EMULATOR))

TARGET_FILES = $(SCRIPT_SKELETONS) $(ERL_TARGETS)


# ----------------------------------------------------
# FLAGS
# ----------------------------------------------------

ifeq ($(WARN_UNUSED_WARS),true)
ERL_COMPILE_FLAGS += +warn_unused_vars
endif

ifeq ($(USE_VERBOSE_STATS),true)
ERL_COMPILE_FLAGS += -DVERBOSE_STATS=true
endif

ifneq ($(MSTONE_TIME),)
ERL_COMPILE_FLAGS += -DMSTONE_TIME=$(MSTONE_TIME)
endif

ERL_COMPILE_FLAGS += \
	-pa $(ERL_TOP)/lib/megaco/ebin \
	-I../include

DIA_PLT      = megaco_example_meas.plt
DIA_ANALYSIS = $(basename $(DIA_PLT)).dialyzer_analysis
ifeq ($(DIAW_EH),true)
DIA_WARNINGS += -Werror_handling
endif
ifeq ($(DIAW_US),true)
DIA_WARNINGS += -Wunderspecs
endif
ifeq ($(DIAW_UR),true)
DIA_WARNINGS += -Wunmatched_returns
endif
DIA_PLT_APPS = \
	erts et asn1 kernel stdlib compiler debugger \
	runtime_tools crypto mnesia wx


# ----------------------------------------------------
# Special Build Targets
# ----------------------------------------------------


# ----------------------------------------------------
# Targets
# ----------------------------------------------------
$(filter-out opt, $(TYPES)):
	@${MAKE} TYPE=$@ opt

opt: $(TARGET_FILES) 

script_skeletons: $(SCRIPT_SKELETONS)

info:
	@echo "MODULES   = $(MODULES)"
	@echo "ERL_FILES = $(ERL_FILES)"
	@echo ""
	@echo "SCRIPT_SKELETON_SRC = $(SCRIPT_SKELETON_SRC)"
	@echo "SCRIPT_SKELETONS    = $(SCRIPT_SKELETONS)"
	@echo ""
	@echo "TARGET_FILES = $(TARGET_FILES)"
	@echo ""
	@echo "DIA_PLT      = $(DIA_PLT)"
	@echo "DIA_ANALYSIS = $(DIA_ANALYSIS)"
	@echo "DIA_PLT_APPS = $(DIA_PLT_APPS)"
	@echo ""

clean:
	rm -f $(TARGET_FILES) 
	rm -f errs core *~

docs:

conf: 
	cd ../..; $(MAKE) conf


# ----------------------------------------------------
# Release Target
# ---------------------------------------------------- 
include $(ERL_TOP)/make/otp_release_targets.mk


release_spec: opt
	$(INSTALL_DIR)  "$(EXAMPLE_RELSYSDIR)"
	$(INSTALL_DIR)  "$(MEAS_RELSYSDIR)"
	$(INSTALL_DATA) $(MESSAGE_PACKAGES) "$(MEAS_RELSYSDIR)"
	$(INSTALL_DATA) $(SCRIPT_SKELETONS) "$(MEAS_RELSYSDIR)"
	$(INSTALL_DATA) $(TARGET_FILES) "$(MEAS_RELSYSDIR)"
	$(INSTALL_DATA) $(ERL_FILES) "$(MEAS_RELSYSDIR)"


release_docs_spec:


dclean:
	rm -f $(DIA_PLT)
	rm -f $(DIA_ANALYSIS)

dialyzer_plt: $(DIA_PLT)

$(DIA_PLT): $(ERL_FILES)
	@echo "Building $(basename $(DIA_PLT)) plt file"
	@dialyzer --build_plt \
                  --output_plt $@ \
                  --apps --apps $(sort $(APPLICATION) $(DIA_PLT_APPS)) \
                  --output $(DIA_ANALYSIS) \
                  --verbose

dialyzer: $(DIA_PLT)
	@echo "Running dialyzer on megaco example meas"
	@dialyzer --plt $< \
                  $(ERL_TOP)/lib/megaco/examples/meas \
                  $(DIA_WARNINGS) \
                  --verbose


# ----------------------------------------------------
# Include dependencies
# ----------------------------------------------------

meas.sh.skel: meas.sh.skel.src
	$(V_colon)@echo "transforming $< to $@"
	$(vsn_verbose)$(PERL) -p -e 's?%VSN%?$(VSN)? ' < $< > $@

mstone1.sh.skel: mstone1.sh.skel.src
	$(V_colon)@echo "transforming $< to $@"
	$(vsn_verbose)$(PERL) -p -e 's?%VSN%?$(VSN)? ' < $< > $@

mstone2.sh.skel: mstone2.sh.skel.src
	$(V_colon)@echo "transforming $< to $@"
	$(vsn_verbose)$(PERL) -p -e 's?%VSN%?$(VSN)? ' < $< > $@

megaco_codec_transform.$(EMULATOR): megaco_codec_transform.erl

megaco_codec_meas.$(EMULATOR): megaco_codec_meas.erl

megaco_codec_mstone1.$(EMULATOR): megaco_codec_mstone1.erl

megaco_codec_mstone2.$(EMULATOR): megaco_codec_mstone2.erl

megaco_codec_mstone_lib.$(EMULATOR): megaco_codec_mstone_lib.erl

