<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1999</year><year>2022</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    </legalnotice>

    <title>crypto</title>
  </header>
  <module since="">crypto</module>
  <modulesummary>Crypto Functions</modulesummary>
  <description>
    <p>This module provides a set of cryptographic functions.
      </p>
      <taglist>
	<tag>Hash functions</tag>
	<item>
	  <p></p>
	  <taglist>
	    <tag>SHA1, SHA2</tag>
	    <item>
	      <url href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf">
		Secure Hash Standard [FIPS PUB 180-4]
	      </url>
	    </item>
	    <tag>SHA3</tag>
	      <item>
		<url href="https://www.nist.gov/publications/sha-3-standard-permutation-based-hash-and-extendable-output-functions?pub_id=919061">
		  SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions [FIPS PUB 202]
		</url>		
	      </item>
            <tag>BLAKE2</tag>
              <item>
                <url href="https://blake2.net/">BLAKE2 â€” fast secure hashing</url>
              </item>
	    <tag>MD5</tag>
	    <item>
	      <url href="http://www.ietf.org/rfc/rfc1321.txt">The MD5 Message Digest Algorithm [RFC 1321]</url>
	    </item>
	    <tag>MD4</tag>
	    <item>
	      <url href="http://www.ietf.org/rfc/rfc1320.txt">The MD4 Message Digest Algorithm [RFC 1320]</url>
	    </item>
	  </taglist>
	  <p></p>
	</item>

	<tag>MACs - Message Authentication Codes</tag>
	<item>
	  <p></p>
	  <taglist>
	    <tag>Hmac functions</tag>
	    <item>
              <url href="http://www.ietf.org/rfc/rfc2104.txt">
		Keyed-Hashing for Message Authentication [RFC 2104]
	      </url>
	    </item>
	    <tag>Cmac functions</tag>
	    <item>
              <url href="http://www.ietf.org/rfc/rfc4493.txt">
		The AES-CMAC Algorithm [RFC 4493]
	      </url>
	    </item>
	    <tag>POLY1305</tag>
	    <item>
	      <url href="http://www.ietf.org/rfc/rfc7539.txt">
		ChaCha20 and Poly1305 for IETF Protocols [RFC 7539]
	      </url>
	    </item>
	  </taglist>
	  <p></p>
	</item>

	<tag>Symmetric Ciphers</tag>
	<item>
	  <p></p>
	  <taglist>
            <tag>DES, 3DES and AES</tag>
	    <item>
	      <url href="https://csrc.nist.gov/projects/block-cipher-techniques">Block Cipher Techniques [NIST]</url>
	    </item>
	    <tag>Blowfish</tag>
	    <item>
	      <url href="https://www.schneier.com/academic/archives/1994/09/description_of_a_new.html">
		Fast Software Encryption, Cambridge Security Workshop Proceedings (December 1993), Springer-Verlag, 1994, pp. 191-204.
	      </url>
	    </item>
	    <tag>Chacha20</tag>
	    <item>
	      <url href="http://www.ietf.org/rfc/rfc7539.txt">
		ChaCha20 and Poly1305 for IETF Protocols [RFC 7539]
	      </url>
	    </item>
	    <tag>Chacha20_poly1305</tag>
	    <item>
	      <url href="http://www.ietf.org/rfc/rfc7539.txt">
		ChaCha20 and Poly1305 for IETF Protocols [RFC 7539]
	      </url>
	    </item>
	  </taglist>
	  <p></p>
	</item>

	<tag>Modes</tag>
	<item>
	  <p></p>
	  <taglist>
	    <tag>ECB, CBC, CFB, OFB and CTR</tag>
	    <item>
	      <url href="https://csrc.nist.gov/publications/detail/sp/800-38a/final">
		Recommendation for Block Cipher Modes of Operation: Methods and Techniques [NIST SP 800-38A]
	      </url>
	    </item>
	    <tag>GCM</tag>
	    <item>
              <url href="https://csrc.nist.gov/publications/detail/sp/800-38d/final">
		Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC [NIST SP 800-38D]
	      </url>
	    </item>
	    <tag>CCM</tag>
	    <item>
	      <url href="https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38c.pdf">
		Recommendation for Block Cipher Modes of Operation:
		The CCM Mode for Authentication and Confidentiality [NIST SP 800-38C]
	      </url>
	    </item>
	  </taglist>
	  <p></p>
	</item>

	<tag>Asymmetric Ciphers - Public Key Techniques</tag>
	<item>
	  <p></p>
	  <taglist>
	    <tag>RSA</tag>
	    <item>
              <url href="http://www.ietf.org/rfc/rfc3447.txt">
		PKCS #1: RSA Cryptography Specifications [RFC 3447]
	      </url>
	    </item>
	    <tag>DSS</tag>
	    <item>
	      <url href="https://csrc.nist.gov/publications/detail/fips/186/4/final">
		Digital Signature Standard (DSS) [FIPS 186-4]
	      </url>
	    </item>
	    <tag>ECDSA</tag>
	    <item>
	      <url href="http://csrc.nist.gov/groups/STM/cavp/documents/dss2/ecdsa2vs.pdf">
		Elliptic Curve Digital Signature Algorithm [ECDSA]
	      </url>
	    </item>
	    <tag>SRP</tag>
	    <item>
              <url href="http://www.ietf.org/rfc/rfc2945.txt">
		The SRP Authentication and Key Exchange System [RFC 2945]
	      </url>
	    </item>
	  </taglist>
	  <p></p>
	</item>
      </taglist>

    <note>
      <p>The actual supported algorithms and features depends on their availability in the actual libcrypto used.
      See the <seeapp marker="crypto:crypto_app">crypto (App)</seeapp> about dependencies.
      </p>
      <p>Enabling FIPS mode will also disable algorithms and features.
      </p>
    </note>

    <p>The <seeguide marker="index">CRYPTO User's Guide</seeguide> has more information on
    FIPS, Engines and Algorithm Details like key lengths.
    </p>
  </description>

  <datatypes>
    <datatype_title>Ciphers</datatype_title>
    <datatype>
      <name name="cipher"/>
      <desc>
      </desc>
    </datatype>
    <datatype>
      <name name="cipher_no_iv"/>
      <desc>
      </desc>
    </datatype>
    <datatype>
      <name name="cipher_iv"/>
      <desc>
      </desc>
    </datatype>
    <datatype>
      <name name="cipher_aead"/>
      <desc>
	<p>Ciphers known by the CRYPTO application.</p>
	<p>Note that this list might be reduced if the underlying libcrypto does not support all of them.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="crypto_opts"/>
      <name name="crypto_opt"/>
      <desc>
	<p>Selects encryption (<c>{encrypt,true}</c>) or decryption (<c>{encrypt,false}</c>).
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="padding"/>
      <desc>
	<p>This option handles padding in the last block. If not set, no padding is done
	and any bytes in the last unfilled block is silently discarded.
	</p>
      </desc>
    </datatype>
    <datatype>
      <name name="cryptolib_padding"/>
      <desc>
	<p>The <c>cryptolib_padding</c> are paddings that may be present in the underlying cryptolib
	linked to the Erlang/OTP crypto app.
	</p>
	<p>For OpenSSL, see the	<url href="http:www.openssl.org">OpenSSL documentation</url>.
	and find <c>EVP_CIPHER_CTX_set_padding()</c> in cryptolib for your linked version.
	</p>
      </desc>
    </datatype>
    <datatype>
      <name name="otp_padding"/>
      <desc>
	<p>Erlang/OTP adds a either padding of zeroes or padding with random bytes.</p>
      </desc>
    </datatype>

    <datatype_title>Digests and hash</datatype_title>
    <datatype>
      <name name="hash_algorithm"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="hash_xof_algorithm"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="hmac_hash_algorithm"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="cmac_cipher_algorithm"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="rsa_digest_type"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="dss_digest_type"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="ecdsa_digest_type"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="sha1"/>
      <name name="sha2"/>
      <name name="sha3"/>
      <name name="sha3_xof"/>
      <name name="blake2"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="compatibility_only_hash"/>
      <desc>
	<p>The <c>compatibility_only_hash()</c> algorithms are recommended only for compatibility with existing applications.</p>
      </desc>
    </datatype>

    <datatype_title>Elliptic Curves</datatype_title>
    <datatype>
      <name name="ec_named_curve"/>
      <name name="edwards_curve_dh"/>
      <name name="edwards_curve_ed"/>
      <desc>
	<p>Note that some curves are disabled if FIPS is enabled.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="ec_explicit_curve"/>
      <name name="ec_field"/>
      <name name="ec_curve"/>
      <desc>
	<p>Parametric curve definition.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="ec_prime_field"/>
      <name name="ec_characteristic_two_field"/>
      <name name="ec_basis"/>
      <desc>
	<p>Curve definition details.</p>
      </desc>
    </datatype>

    <datatype_title>Keys</datatype_title>
    <datatype>
      <name name="key_integer"/>
      <desc>
	<p>Always <c>binary()</c> when used as return value</p>
      </desc>
    </datatype>

    <datatype_title>Public/Private Keys</datatype_title>
    <datatype>
      <name name="rsa_public"/>
      <name name="rsa_private"/>
      <name name="rsa_params"/>
      <desc>
	<code>rsa_public() = [E, N]</code>
	<code>rsa_private() = [E, N, D] | [E, N, D, P1, P2, E1, E2, C]</code>
	<p>Where E is the public exponent, N is public modulus and D is
	the private exponent. The longer key format contains redundant
	information that will make the calculation faster. P1 and P2 are first
	and second prime factors. E1 and E2 are first and second exponents. C
	is the CRT coefficient. The terminology is taken from
	<url href="http://www.ietf.org/rfc/rfc3447.txt"> RFC 3447</url>.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="dss_public"/>
      <name name="dss_private"/>
      <desc>
	<code>dss_public() = [P, Q, G, Y] </code>
	<p>Where P, Q and G are the dss parameters and Y is the public key.</p>

	<code>dss_private() = [P, Q, G, X] </code>
	<p>Where P, Q and G are the dss parameters and X is the private key.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="ecdsa_public"/>
      <name name="ecdsa_private"/>
      <name name="ecdsa_params"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="eddsa_public"/>
      <name name="eddsa_private"/>
      <name name="eddsa_params"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="srp_public"/>
      <name name="srp_private"/>
      <desc>
	<code>srp_public() = key_integer() </code>
	<p>Where is <c>A</c> or <c>B</c> from <url href="http://srp.stanford.edu/design.html">SRP design</url></p>
	
	<code>srp_private() = key_integer() </code>
	<p>Where is  <c>a</c> or <c>b</c> from <url href="http://srp.stanford.edu/design.html">SRP design</url></p>
      </desc>
    </datatype>

    <datatype>
      <name name="srp_gen_params"/>
      <name name="srp_comp_params"/>
      <name>srp_user_gen_params() = [DerivedKey::binary(), Prime::binary(), Generator::binary(), Version::atom()]</name>
      <name>srp_host_gen_params() = [Verifier::binary(), Prime::binary(), Version::atom() ]</name>
      <name>srp_user_comp_params() = [DerivedKey::binary(), Prime::binary(), Generator::binary(), Version::atom() | ScramblerArg::list()]</name>
      <name>srp_host_comp_params() = [Verifier::binary(), Prime::binary(), Version::atom() | ScramblerArg::list()]</name>
      <desc>
        <p>Where Verifier is <c>v</c>, Generator is <c>g</c> and Prime is<c> N</c>, DerivedKey is <c>X</c>, and Scrambler is
        <c>u</c> (optional will be generated if not provided) from <url href="http://srp.stanford.edu/design.html">SRP design</url>
      Version = '3' |  '6' |  '6a'
        </p>
      </desc>
    </datatype>

    <datatype_title>Public Key Ciphers</datatype_title>

    <datatype>
      <name name="pk_encrypt_decrypt_algs"/>
      <desc>
	<p>Algorithms for public key encrypt/decrypt. Only RSA is supported.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="pk_encrypt_decrypt_opts"/>
      <name name="rsa_opt"/>
      <name name="rsa_padding"/>
      <desc>
	<p>Options for public key encrypt/decrypt. Only RSA is supported.</p>
	 <warning>
	   <!-- In RefMan rsa_opt(), rsa_sign_verify_opt() and User's man RSA -->
	   <p>The RSA options are experimental.
	   </p>
	   <p>The exact set of options and there syntax <em>may</em> be changed
	   without prior notice.</p>
	</warning>
      </desc>
    </datatype>

    <datatype>
      <name name="rsa_compat_opts"/>
      <desc>
	<p>Those option forms are kept only for compatibility and should not be used in new code.</p>
      </desc>
    </datatype>

    <datatype_title>Public Key Sign and Verify</datatype_title>

    <datatype>
      <name name="pk_sign_verify_algs"/>
      <desc>
	<p>Algorithms for sign and verify.</p>
      </desc>
    </datatype>

    <datatype>
      <name name="pk_sign_verify_opts"/>
      <name name="rsa_sign_verify_opt"/>
      <name name="rsa_sign_verify_padding"/>
      <desc>
	<p>Options for sign and verify.</p>
	 <warning>
	   <!-- In RefMan rsa_opt(), rsa_sign_verify_opt() and User's man RSA -->
	   <p>The RSA options are experimental.
	   </p>
	   <p>The exact set of options and there syntax <em>may</em> be changed
	   without prior notice.</p>
	</warning>
      </desc>
    </datatype>

    <datatype_title>Diffie-Hellman Keys and parameters</datatype_title>
    <datatype>
      <name name="dh_public"/>
      <name name="dh_private"/>
      <desc>
      </desc>
    </datatype>

    <datatype>
      <name name="dh_params"/>
      <desc>
	<code>dh_params() = [P, G] | [P, G, PrivateKeyBitLength]</code>
      </desc>
    </datatype>

    <datatype>
      <name name="ecdh_public"/>
      <name name="ecdh_private"/>
      <name name="ecdh_params"/>
      <desc>
      </desc>
    </datatype>

    <datatype_title>Types for Engines</datatype_title>

    <datatype>
      <name name="engine_key_ref"/>
      <name name="engine_ref"/>
      <desc>
	<p>The result of a call to <seemfa marker="#engine_load/3">engine_load/3</seemfa>.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="key_id"/>
      <desc>
	<p>Identifies the key to be used. The format depends on the loaded engine. It is passed to
	the <c>ENGINE_load_(private|public)_key</c> functions in libcrypto.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="password"/>
      <desc>
	<p>The password of the key stored in an engine.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="engine_method_type"/>
    </datatype>

    <datatype>
      <name name="engine_cmnd"/>
      <desc>
	<p>Pre and Post commands for <seemfa marker="#engine_load/3">engine_load/3 and /4</seemfa>.
	</p>
      </desc>
    </datatype>

    <datatype_title>Internal data types</datatype_title>

    <datatype>
      <name name="crypto_state"/>
      <name name="hash_state"/>
      <name name="mac_state"/>
      <desc>
	<p>Contexts with an internal state that should not be manipulated but passed between function calls.
	</p>
      </desc>
    </datatype>

  </datatypes>


  <section>
    <title>Exceptions</title>
    <section>
      <title>Atoms - the older style</title>
      <marker id="error_old"/>
      <p>The exception <c>error:badarg</c> signifies that one or more arguments are of wrong data type,
      or are otherwise badly formed.
      </p>
      <p>The exception <c>error:notsup</c> signifies that the algorithm is known but is not supported
      by current underlying libcrypto or explicitly disabled when building that.
      </p>
      <p>For a list of supported algorithms, see <seemfa marker="#supports/1">supports(ciphers)</seemfa>.
      </p>
    </section>

    <section>
      <title>3-tuples - the new style</title>
      <marker id="error_3tup"/>
      <p>The exception is:</p>
      <pre>
error:{Tag, C_FileInfo, Description}

Tag = badarg | notsup | error
C_FileInfo = term()    % Usually only useful for the OTP maintainer
Description = string() % Clear text, sometimes only useful for the OTP maintainer
      </pre>

      <p>The exception tags are:</p>
      <taglist>
	<tag><c>badarg</c></tag>
	<item><p>Signifies that one or more arguments are of wrong data type or are otherwise badly formed.</p>
	</item>

	<tag><c>notsup</c></tag>
	<item><p>Signifies that the algorithm is known but is not supported by current underlying libcrypto
	or explicitly disabled when building that one.</p>
	</item>

	<tag><c>error</c></tag>
	<item><p>An error condition that should not occur, for example a memory allocation failed or
	the underlying cryptolib returned an error code, for example <c>"Can't initialize context, step 1"</c>.
	Those text usually needs searching the C-code to be understood.</p>
	</item>
      </taglist>

      <p>Usually there are more information in the call stack about which argument caused the exception
      and what the values where.</p>
      <p>To catch the exception, use for example:</p>
      <code>
try crypto:crypto_init(Ciph, Key, IV, true)
    catch
        error:{Tag, _C_FileInfo, Description} ->
            do_something(......)
         .....
end
	</code>
    </section>
  </section>

  <!--================ FUNCTIONS ================-->
 

  <funcs>
    <func>
      <name name="crypto_init" arity="3" since="OTP 22.0"/>
      <fsummary>Initializes a series of encryptions or decryptions</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Equivalent to the call
	<seemfa marker="#crypto_init/4"><c>crypto_init(Cipher, Key, &lt;&lt;>>, FlagOrOptions)</c></seemfa>.
	It is intended for ciphers without an IV (nounce).
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_init" arity="4" since="OTP 22.0"/>
      <fsummary>Initializes a series of encryptions or decryptions</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	Initializes a series of encryptions or decryptions and creates an internal state
	with a reference that is returned.
	</p>
	<p>If <c>IV = &lt;&lt;>></c>, no IV is used. This is intended for ciphers without an IV (nounce).
	See <seemfa marker="#crypto_init/3">crypto_init/3</seemfa>.
	</p>
	<p>
	If <c>IV = undefined</c>, the IV must be added by calls to
	<seemfa marker="crypto#crypto_dyn_iv_update/3">crypto_dyn_iv_update/3</seemfa>. This is intended
	for cases where the IV (nounce) need to be changed for each encryption and decryption.
	See <seemfa marker="#crypto_dyn_iv_init/3">crypto_dyn_iv_init/3</seemfa>.
	</p>
	<p>
	The actual encryption or decryption is done by
	<seemfa marker="crypto#crypto_update/2">crypto_update/2</seemfa> (or
	<seemfa marker="crypto#crypto_dyn_iv_update/3">crypto_dyn_iv_update/3</seemfa>
	).
	</p>
	<p>For encryption, set the <c>FlagOrOptions</c> to <c>true</c> or <c>[{encrypt,true}]</c>.
	For decryption, set it to <c>false</c> or <c>[{encrypt,false}]</c>.
	</p>
	<p>Padding could be enabled with the option
	<seetype marker="#padding">{padding,Padding}</seetype>. The
	<seetype marker="#cryptolib_padding">cryptolib_padding</seetype> enables
	<c>pkcs_padding</c> or no padding (<c>none</c>).
	The paddings <c>zero</c> or <c>random</c> fills the last part of the last block with zeroes or random bytes.
	If the last block is already full, nothing is added.
	</p>
	<p>In decryption, the <seetype marker="#cryptolib_padding">cryptolib_padding</seetype> removes
	such padding, if present.
	The <seetype marker="#otp_padding">otp_padding</seetype> is not
	removed - it has to be done elsewhere.
	</p>
	<p>If padding is <c>{padding,none}</c> or not specified and the total data from all subsequent
	<seemfa marker="crypto#crypto_update/2">crypto_updates</seemfa> does
	not fill the last block fully, that last data is lost. In case of <c>{padding,none}</c> there will
	be an error in this case. If padding is not specified, the bytes of the unfilled block is silently
	discarded.
	</p>
	<p>The actual padding is performed by
	<seemfa marker="crypto#crypto_final/1">crypto_final/1</seemfa>.
	</p>
	<p>
	For blocksizes call <seemfa marker="#cipher_info/1">cipher_info/1</seemfa>.
	</p>
	<p>See <seeguide marker="crypto:new_api#examples-of-crypto_init-4-and-crypto_update-2">
	examples in the User's Guide.</seeguide>
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_update" arity="2" since="OTP 22.0"/>
      <fsummary>Do an actual crypto operation on a part of the full text</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	It does an actual crypto operation on a part of the full text. If the part is less
	than a number of full blocks, only the full blocks (possibly none) are encrypted 
	or decrypted and the remaining bytes are saved to the next <c>crypto_update</c> operation.
	The <c>State</c> should be created with
	<seemfa marker="crypto#crypto_init/3">crypto_init/3</seemfa>
	or
	<seemfa marker="crypto#crypto_init/4">crypto_init/4</seemfa>.
	</p>
	<p>See <seeguide marker="crypto:new_api#examples-of-crypto_init-4-and-crypto_update-2">
	examples in the User's Guide.</seeguide>
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_dyn_iv_init" arity="3" since="OTP 22.0"/>
      <fsummary>Initializes a series of encryptions or decryptions where the IV is provided later</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Initializes a series of encryptions or decryptions where the IV is provided later.
	The actual encryption or decryption is done by
	<seemfa marker="crypto#crypto_dyn_iv_update/3">crypto_dyn_iv_update/3</seemfa>.
	</p>
	<p>The function is equivalent to
	<seemfa marker="#crypto_init/4"><c>crypto_init(Cipher, Key, undefined, FlagOrOptions)</c></seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_final" arity="1" since="OTP 23.0"/>
      <fsummary>Ends a series of encryptions or decryptions</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	Finalizes a series of encryptions or decryptions and delivers the final bytes of the final block.
	The data returned from this function may be empty if no padding was enabled in
	<seemfa marker="#crypto_init/3">crypto_init/3,4</seemfa> or
	<seemfa marker="#crypto_dyn_iv_init/3">crypto_dyn_iv_init/3</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_get_data" arity="1" since="OTP 23.0"/>
      <fsummary>Get information about crypto states</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	  Returns information about the State in the argument. The information is the form of a map,
	  which currently contains at least:
	</p>
	<taglist>
	  <tag><c>size</c></tag>
	  <item>The number of bytes encrypted or decrypted so far.
	  </item>
	  <tag><c>padding_size</c></tag>
	  <item>After a call to
	  <seemfa marker="#crypto_final/1">crypto_final/1</seemfa> it contains
	  the number of bytes padded. Otherwise 0.
	  </item>
	  <tag><c>padding_type</c></tag>
	  <item>The type of the padding as provided in the call to
	  <seemfa marker="#crypto_init/3">crypto_init/3,4</seemfa>.
	  </item>
	  <tag><c>encrypt</c></tag>
	  <item>Is <c>true</c> if encryption is performed. It is <c>false</c> otherwise.
	  </item>
	</taglist>
      </desc>
    </func>

    <func>
      <name name="crypto_dyn_iv_update" arity="3" since="OTP 22.0"/>
      <fsummary>Do an actual crypto operation on a part of the full text and the IV is supplied for each part</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	Do an actual crypto operation on a part of the full text and the IV is supplied for each part.
	The <c>State</c> should be created with
	<seemfa marker="crypto#crypto_dyn_iv_init/3">crypto_dyn_iv_init/3</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_one_time" arity="4" since="OTP 22.0"/>
      <fsummary>Do a complete encrypt or decrypt of the full text</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>As <seemfa marker="#crypto_one_time/5">crypto_one_time/5</seemfa> but for ciphers without IVs.</p>
      </desc>
    </func>

    <func>
      <name name="crypto_one_time" arity="5" since="OTP 22.0"/>
      <fsummary>Do a complete encrypt or decrypt of the full text</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	Do a complete encrypt or decrypt of the full text in the argument <c>Data</c>.
	</p>
	<p>For encryption, set the <c>FlagOrOptions</c> to <c>true</c>. For decryption, set it to <c>false</c>.
	For setting other options, see
	<seemfa marker="crypto#crypto_init/4">crypto_init/4</seemfa>.
	</p>
	<p>See <seeguide marker="crypto:new_api#example-of-crypto_one_time-5">examples in the User's Guide.</seeguide>
	</p>
      </desc>
    </func>

    <func>
      <name name="crypto_one_time_aead" arity="6" since="OTP 22.0"/>
      <name name="crypto_one_time_aead" arity="7" since="OTP 22.0"/>
      <fsummary>Do a complete encrypt or decrypt with an AEAD cipher of the full text</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>
	Do a complete encrypt or decrypt with an AEAD cipher of the full text.
	</p>
	<p>For encryption, set the <c>EncryptFlag</c> to <c>true</c> and set the <c>TagOrTagLength</c>
	to the wanted size (in bytes) of the tag, that is, the tag length.  If the default length is wanted, the
	<c>crypto_aead/6</c> form may be used.
	</p>
	<p>For decryption, set the <c>EncryptFlag</c> to <c>false</c> and put the tag to be checked
	in the argument	<c>TagOrTagLength</c>.
	</p>
	<p>See <seeguide marker="crypto:new_api#example-of-crypto_one_time_aead-6">examples in the User's Guide.</seeguide>
	</p>
      </desc>
    </func>

   <!--func>
      <name name="supports" arity="0" since="OTP R16B01"/>
      <fsummary>Provide a list of available crypto algorithms.</fsummary>
      <desc>
	<dont><p>Don't use this function for new programs! Use
	<seemfa marker="crypto#supports/1">supports/1</seemfa> in
	<seeguide marker="crypto:new_api">the new api</seeguide>.</p></dont>
        <p> Can be used to determine which crypto algorithms that are supported
	by the underlying libcrypto library</p>
	<p>See <seemfa marker="#hash_info/1">hash_info/1</seemfa> and <seemfa marker="#cipher_info/1">cipher_info/1</seemfa>
	for information about the hash and cipher algorithms.
	</p>
      </desc>
    </func-->

    <func>
      <name name="supports" arity="1" since="OTP 22.0"/>
      <fsummary>Provide a list of available crypto algorithms.</fsummary>
      <desc>
        <p> Can be used to determine which crypto algorithms that are supported
	by the underlying libcrypto library</p>
	<p>See <seemfa marker="#hash_info/1">hash_info/1</seemfa> and <seemfa marker="#cipher_info/1">cipher_info/1</seemfa>
	for information about the hash and cipher algorithms.
	</p>
      </desc>
    </func>

    <func>
      <name name="mac" arity="3" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Short for <seemfa marker="#mac/4">mac(Type, undefined, Key, Data)</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="mac" arity="4" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Computes a MAC (Message Authentication Code) of type <c>Type</c> from <c>Data</c>.
	</p>

	<p><c>SubType</c> depends on the MAC <c>Type</c>:
	</p>
	<list>
	  <item>For <c>hmac</c> it is a hash algorithm, see
	  <seeguide marker="algorithm_details#hmac">Algorithm Details</seeguide> in the User's Guide.
	  </item>
	  <item>For <c>cmac</c> it is a cipher suitable for cmac, see
	  <seeguide marker="algorithm_details#cmac">Algorithm Details</seeguide> in the User's Guide.
	  </item>
	  <item>For <c>poly1305</c> it should be set to <c>undefined</c> or the
	  <seemfa marker="#mac_init/2">mac/2</seemfa> function could be used instead, see
	  <seeguide marker="algorithm_details#poly1305">Algorithm Details</seeguide> in the User's Guide.
	  </item>
	</list>

	<p><c>Key</c> is the authentication key with a length according to the
	<c>Type</c> and <c>SubType</c>.
	The key length could be found with the
	<seemfa marker="#hash_info/1">hash_info/1</seemfa> (<c>hmac</c>) for and
	<seemfa marker="#cipher_info/1">cipher_info/1</seemfa> (<c>cmac</c>)
	functions. For <c>poly1305</c> the key length is 32 bytes. Note that
	the cryptographic quality of the key is not checked.
	</p>

	<p>The <c>Mac</c> result will have a default length depending on the <c>Type</c> and <c>SubType</c>.
	To set a shorter length, use <seemfa marker="#macN/4">macN/4</seemfa> or
	<seemfa marker="#macN/5">macN/5</seemfa> instead.
	The default length is documented in
	<seeguide marker="algorithm_details#message-authentication-codes--macs-">Algorithm Details</seeguide>
	in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="macN" arity="4" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Short for <seemfa marker="#macN/5">macN(Type, undefined, Key, Data, MacLength)</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="macN" arity="5" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
        <p>Computes a MAC (Message Authentication Code)
	as <seemfa marker="#mac/3">mac/3</seemfa> and <seemfa marker="#mac/4">mac/4</seemfa> but
	<c>MacLength</c> will limit the size of the resultant <c>Mac</c> to
	at most <c>MacLength</c> bytes.
	Note that if <c>MacLength</c> is greater than the actual number of
	bytes returned from the underlying hash, the returned hash will have
	that shorter length instead.
	</p>
	<p>The max <c>MacLength</c> is documented in
	<seeguide marker="algorithm_details#message-authentication-codes--macs-">Algorithm Details</seeguide>
	in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="mac_init" arity="2" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Short for <seemfa marker="#mac_init/3">mac_init(Type, undefined, Key)</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="mac_init" arity="3" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Initializes the context for streaming MAC operations.
	</p>
	<p><c>Type</c> determines which mac algorithm to use in the MAC operation.
	</p>

	<p><c>SubType</c> depends on the MAC <c>Type</c>:
	</p>
	<list>
	  <item>For <c>hmac</c> it is a hash algorithm, see
	  <seeguide marker="algorithm_details#hmac">Algorithm Details</seeguide> in the User's Guide.
	  </item>
	  <item>For <c>cmac</c> it is a cipher suitable for cmac, see
	  <seeguide marker="algorithm_details#cmac">Algorithm Details</seeguide> in the User's Guide.
	  </item>
	  <item>For <c>poly1305</c> it should be set to <c>undefined</c> or the
	  <seemfa marker="#mac_init/2">mac/2</seemfa> function could be used instead, see
	  <seeguide marker="algorithm_details#poly1305">Algorithm Details</seeguide> in the User's Guide.
	  </item>
	</list>

	<p><c>Key</c> is the authentication key with a length according to the
	<c>Type</c> and <c>SubType</c>.
	The key length could be found with the
	<seemfa marker="#hash_info/1">hash_info/1</seemfa> (<c>hmac</c>) for and
	<seemfa marker="#cipher_info/1">cipher_info/1</seemfa> (<c>cmac</c>)
	functions. For <c>poly1305</c> the key length is 32 bytes.  Note that
	the cryptographic quality of the key is not checked.
	</p>

	<p>The returned <c>State</c> should be used in one or more subsequent calls to
	<seemfa marker="#mac_update/2">mac_update/2</seemfa>.
	The MAC value is finally returned by calling
	<seemfa marker="#mac_final/1">mac_final/1</seemfa> or
	<seemfa marker="#mac_finalN/2">mac_finalN/2</seemfa>.
	</p>

	<p>See <seeguide marker="crypto:new_api#example-of-mac_init-mac_update-and-mac_final">
	examples in the User's Guide.</seeguide>
	</p>
      </desc>
    </func>

    <func>
      <name name="mac_update" arity="2" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Updates the MAC represented by <c>State0</c> using the given <c>Data</c> which
	could be of any length.
	</p>
	<p>The <c>State0</c> is the State value originally from a MAC init function, that is
	<seemfa marker="#mac_init/2">mac_init/2</seemfa>,
	<seemfa marker="#mac_init/3">mac_init/3</seemfa> or
	a previous call of <c>mac_update/2</c>.
	The value <c>State0</c> is returned unchanged by the function as <c>State</c>.
        </p>
      </desc>
    </func>

    <func>
      <name name="mac_final" arity="1" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Finalizes the MAC operation referenced by <c>State</c>. The <c>Mac</c> result will have
	a default length depending on the <c>Type</c> and <c>SubType</c> in the
	<seemfa marker="#mac_init/3">mac_init/2,3</seemfa> call.
	To set a shorter length, use <seemfa marker="#mac_finalN/2">mac_finalN/2</seemfa> instead.
	The default length is documented in
	<seeguide marker="algorithm_details#message-authentication-codes--macs-">Algorithm Details</seeguide>
	in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="mac_finalN" arity="2" since="OTP 22.1"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Finalizes the MAC operation referenced by <c>State</c>.
	</p>
	<p><c>Mac</c> will be a binary with at most <c>MacLength</c> bytes.
	Note that if <c>MacLength</c> is greater than the actual number of
	bytes returned from the underlying hash, the returned hash will have
	that shorter length instead.
	</p>
	<p>The max <c>MacLength</c> is documented in
	<seeguide marker="algorithm_details#message-authentication-codes--macs-">Algorithm Details</seeguide>
	in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="bytes_to_integer" arity="1" since="OTP R16B01"/>
      <fsummary>Convert binary representation, of an integer, to an Erlang integer.</fsummary>
      <desc>
        <p>Convert binary representation, of an integer, to an Erlang integer.
         </p>
      </desc>
    </func>

    <func>
      <name name="compute_key" arity="4" since="OTP R16B01"/>
      <fsummary>Computes the shared secret</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Computes the shared secret from the private key and the other party's public key.
	 See also <seemfa marker="public_key:public_key#compute_key/2">public_key:compute_key/2</seemfa>
	</p>
      </desc>
    </func>

    <func>
      <name name="exor" arity="2" since=""/>
      <fsummary>XOR data</fsummary>
      <desc>
	<p>Performs bit-wise XOR (exclusive or) on the data supplied.</p>
      </desc>
    </func>


    <func>
      <name name="generate_key" arity="2" since="OTP R16B01"/>
      <name name="generate_key" arity="3" since="OTP R16B01"/>
      <fsummary>Generates a public key of type <c>Type</c></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Generates a public key of type <c>Type</c>.
	See also <seemfa marker="public_key:public_key#generate_key/1">public_key:generate_key/1</seemfa>.
        </p>
	<note>
	  <p>If the linked version of cryptolib is OpenSSL 3.0</p>
	  <list type="bulleted">
	    <item>
	    <p>and the <c>Type</c> is <c>dh</c> (diffie-hellman)</p>
	    </item>
	    <item>
	      <p>and the parameter <c>P</c> (in <seetype marker="#dh_params">dh_params()</seetype>)
	      is one of the MODP groups (see <url href="https://tools.ietf.org/html/rfc3526">RFC 3526</url>)</p>
	    </item>
	    <item>
	      <p>and the optional <c>PrivateKeyBitLength</c> parameter
	      (in <seetype marker="#dh_params">dh_params()</seetype>)
	      is present,</p>
	    </item>
	  </list>
	  <p>then the optional key length parameter must be at least
	  224, 256, 302, 352 and 400 for group sizes of
	  2048, 3072, 4096, 6144 and 8192, respectively.</p>
	</note>
	<note>
	  <p>RSA key generation is only available if the runtime was
	  built with dirty scheduler support. Otherwise, attempting to
	  generate an RSA key will raise the exception <c>error:notsup</c>.</p>
	</note>
      </desc>
    </func>

     <func>
      <name name="hash" arity="2" since="OTP R15B02"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Computes a message digest of type <c>Type</c> from <c>Data</c>.</p>
      </desc>
    </func>

    <func>
      <name name="hash_xof" arity="3" since="OTP 26.0"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
          <p>Computes a message digest of type <c>Type</c> from <c>Data</c> of <c>Length</c>
              for the chosen <c>xof_algorithm</c>.</p>
          <p>May raise exception <c>error:notsup</c> in case the chosen <c>Type</c>
              is not supported by the underlying libcrypto implementation.</p>
      </desc>
    </func>

    <func>
      <name name="hash_init" arity="1" since="OTP R15B02"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Initializes the context for streaming hash operations. <c>Type</c> determines
        which digest to use. The returned context should be used as argument
	to <seemfa marker="#hash_update/2">hash_update</seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="hash_update" arity="2" since="OTP R15B02"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Updates the digest represented by <c>Context</c> using the given <c>Data</c>. <c>Context</c>
        must have been generated using <seemfa marker="#hash_init/1">hash_init</seemfa>
	or a previous call to this function. <c>Data</c> can be any length. <c>NewContext</c>
        must be passed into the next call to <c>hash_update</c>
	or <seemfa marker="#hash_final/1">hash_final</seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="hash_final" arity="1" since="OTP R15B02"/>
      <fsummary></fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>Finalizes the hash operation referenced by <c>Context</c> returned
	from a previous call to <seemfa marker="#hash_update/2">hash_update</seemfa>.
	The size of <c>Digest</c> is determined by the type of hash
	function used to generate it.</p>
      </desc>
    </func>

    <func>
      <name name="info_fips" arity="0" since="OTP 20.0"/>
      <fsummary>Provides information about the FIPS operating status.</fsummary>
      <desc>
        <p>Provides information about the FIPS operating status of
        crypto and the underlying libcrypto library. If crypto was built
        with FIPS support this can be either <c>enabled</c> (when
        running in FIPS mode) or <c>not_enabled</c>. For other builds
        this value is always <c>not_supported</c>.
	</p>
	<p>See <seemfa marker="#enable_fips_mode/1">enable_fips_mode/1</seemfa> about how to enable
	FIPS mode.
	</p>
        <warning>
          <p>In FIPS mode all non-FIPS compliant algorithms are
          disabled and raise exception <c>error:notsup</c>. Check
          <seemfa marker="#supports/1">supports(ciphers)</seemfa> that in
          FIPS mode returns the restricted list of available
          algorithms.</p>
        </warning>
      </desc>
    </func>

    <func>
      <name name="enable_fips_mode" arity="1" since="OTP 21.1"/>
      <fsummary>Change FIPS mode.</fsummary>
      <desc>
        <p>Enables (<c>Enable = true</c>) or disables (<c>Enable = false</c>) FIPS mode. Returns <c>true</c> if
	the operation was successful or <c>false</c> otherwise.
	</p>
	<p>Note that to enable FIPS mode successfully, OTP must be built with the configure option <c>--enable-fips</c>,
	and the underlying libcrypto must also support FIPS.
	</p>
	<p>See also <seemfa marker="#info_fips/0">info_fips/0</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="info" arity="0" since="OTP 24.2"/>
      <fsummary>Provides information about crypto and the library used by crypto.</fsummary>
      <desc>
        <p>Provides a map with information about the compilation and linking of crypto.
	</p>
	<p>Example:</p>
	<code>
1> crypto:info().
#{compile_type => normal,
  cryptolib_version_compiled => "OpenSSL 3.0.0 7 sep 2021",
  cryptolib_version_linked => "OpenSSL 3.0.0 7 sep 2021",
  link_type => dynamic,
  otp_crypto_version => "5.0.2"}
2>
	</code>
	<p>More association types than documented may be present in the map.
	</p>
      </desc>
    </func>

    <func>
      <name name="info_lib" arity="0" since=""/>
      <fsummary>Provides information about the libraries used by crypto.</fsummary>
      <desc>
        <p>Provides the name and version of the libraries used by crypto.</p>
        <p><c>Name</c> is the name of the library. <c>VerNum</c> is
        the numeric version according to the library's own versioning
        scheme. <c>VerStr</c> contains a text variant of the version.</p>
        <pre>
> <input>info_lib().</input>
[{&lt;&lt;"OpenSSL"&gt;&gt;,269484095,&lt;&lt;"OpenSSL 1.1.0c  10 Nov 2016""&gt;&gt;}]
        </pre>
	<note><p>
	  From OTP R16 the <em>numeric version</em> represents the version of the OpenSSL
	  <em>header files</em> (<c>openssl/opensslv.h</c>) used when crypto was compiled.
	  The text variant represents the libcrypto library used at runtime.
	  In earlier OTP versions both numeric and text was taken from the library.
	</p></note>
      </desc>
    </func>

    <func>
      <name name="hash_info" arity="1" since="OTP 22.0"/>
      <fsummary>Information about supported hash algorithms.</fsummary>
      <desc>
	<p>Provides a map with information about block_size, size and possibly other properties of the
	hash algorithm in question.
	</p>
	<p>For a list of supported hash algorithms, see <seemfa marker="#supports/1">supports(hashs)</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="cipher_info" arity="1" since="OTP 22.0"/>
      <fsummary>Information about supported ciphers.</fsummary>
      <desc>
	<p>Provides a map with information about block_size, key_length, iv_length, aead support and possibly other properties of the
	cipher algorithm in question.
	</p>
        <note>
	  <p>The ciphers <c>aes_cbc</c>, <c>aes_cfb8</c>, <c>aes_cfb128</c>, <c>aes_ctr</c>,
	  <c>aes_ecb</c>, <c>aes_gcm</c> and <c>aes_ccm</c>
	  has no keylength in the <c>Type</c> as opposed to for example <c>aes_128_ctr</c>. They adapt to the length of
	  the key provided in the encrypt and decrypt function. Therefore it is impossible to return a valid keylength
	  in the map.</p>
	  <p>Always use a <c>Type</c> with an explicit key length,
	  </p>
	</note>
	<p>For a list of supported cipher algorithms, see <seemfa marker="#supports/1">supports(ciphers)</seemfa>.
	</p>
      </desc>
    </func>

    <func>
      <name name="mod_pow" arity="3" since="OTP R16B01"/>
      <fsummary>Computes the function: N^P mod M</fsummary>
      <desc>
	<p>Computes the function <c>N^P mod M</c>.</p>
      </desc>
    </func>

    <func>
      <name name="private_decrypt" arity="4" since="OTP R16B01"/>
      <fsummary>Decrypts CipherText using the private Key.</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Decrypts the <c>CipherText</c>, encrypted with
	<seemfa marker="#public_encrypt/4">public_encrypt/4</seemfa> (or equivalent function)
	  using the <c>PrivateKey</c>, and returns the
	  plaintext (message digest). This is a low level signature  verification operation
	used for instance by older versions of the SSL protocol.
	  See also <seemfa marker="public_key:public_key#decrypt_private/2">public_key:decrypt_private/[2,3]</seemfa>
	</p>
      </desc>
    </func>

    <func>
      <name name="private_encrypt" arity="4" since="OTP R16B01"/>
      <fsummary>Encrypts PlainText using the private Key.</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Encrypts the <c>PlainText</c> using the <c>PrivateKey</c>
	and returns the ciphertext. This is a low level signature operation
	used for instance by older versions of the SSL protocol. See
	also <seemfa
	marker="public_key:public_key#encrypt_private/2">public_key:encrypt_private/[2,3]</seemfa>
	</p>
      </desc>
    </func>

    <func>
      <name name="public_decrypt" arity="4" since="OTP R16B01"/>
      <fsummary>Decrypts CipherText using the public Key.</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Decrypts the <c>CipherText</c>, encrypted with
	<seemfa marker="#private_encrypt/4">private_encrypt/4</seemfa>(or equivalent function)
	  using the <c>PrivateKey</c>, and returns the
	  plaintext (message digest). This is a low level signature verification operation
	  used for instance by older versions of the SSL protocol.
	  See also <seemfa marker="public_key:public_key#decrypt_public/2">public_key:decrypt_public/[2,3]</seemfa>
	</p>
      </desc>
    </func>

    <func>
      <name name="public_encrypt" arity="4" since="OTP R16B01"/>
      <fsummary>Encrypts PlainText using the public Key.</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Encrypts the <c>PlainText</c> (message digest) using the <c>PublicKey</c>
	and returns the <c>CipherText</c>. This is a low level signature operation
	used for instance by older versions of the SSL protocol. See also <seemfa
	marker="public_key:public_key#encrypt_public/2">public_key:encrypt_public/[2,3]</seemfa>
	</p>
      </desc>
    </func>

    <func>
      <name name="rand_seed" arity="1" since="OTP 17.0"/>
      <fsummary>Set the seed for random bytes generation</fsummary>
      <desc>
        <p>Set the seed for PRNG to the given binary. This calls the
        RAND_seed function from openssl. Only use this if the system
        you are running on does not have enough "randomness" built in.
        Normally this is when
        <seemfa marker="#strong_rand_bytes/1">strong_rand_bytes/1</seemfa>
        raises <c>error:low_entropy</c></p>
      </desc>
    </func>

     <func>
      <name since="">rand_uniform(Lo, Hi) -> N</name>
      <fsummary>Generate a random number</fsummary>
      <type>
        <v>Lo, Hi, N = integer()</v>
      </type>
      <desc>
        <p>Generate a random number <c><![CDATA[N, Lo =< N < Hi.]]></c> Uses the
	<c>crypto</c> library pseudo-random number generator.
	<c>Hi</c> must be larger than <c>Lo</c>.</p>
      </desc>
    </func>

    <func>
      <name name="start" arity="0" since=""/>
      <fsummary> Equivalent to application:start(crypto). </fsummary>
      <desc>
        <p> Equivalent to application:start(crypto).</p>
      </desc>
    </func>

    <func>
      <name name="stop" arity="0" since=""/>
      <fsummary> Equivalent to application:stop(crypto).</fsummary>
      <desc>
        <p> Equivalent to application:stop(crypto).</p>
      </desc>
    </func>

    <func>
      <name name="strong_rand_bytes" arity="1" since="OTP R14B03"/>
      <fsummary>Generate a binary of random bytes</fsummary>
      <desc>
        <p>Generates N bytes randomly uniform 0..255, and returns the
        result in a binary. Uses a cryptographically secure prng seeded and
        periodically mixed with operating system provided entropy. By default
        this is the <c>RAND_bytes</c> method from OpenSSL.</p>
	<p>May raise exception <c>error:low_entropy</c> in case the random generator
	failed due to lack of secure "randomness".</p>
      </desc>
    </func>

    <func>
      <name name="rand_seed" arity="0" since="OTP 20.0"/>
      <fsummary>Strong random number generation plugin state</fsummary>
      <desc>
	<p>
          Creates state object for
	  <seeerl marker="stdlib:rand">random number generation</seeerl>,
          in order to generate cryptographically strong random numbers
          (based on OpenSSL's <c>BN_rand_range</c>),
          and saves it in the process dictionary before returning it as well.
          See also
	  <seemfa marker="stdlib:rand#seed/1">rand:seed/1</seemfa> and
	  <seemfa marker="#rand_seed_s/0">rand_seed_s/0</seemfa>.
	</p>
	<p>
	  When using the state object from this function the
	  <seeerl marker="stdlib:rand">rand</seeerl> functions using it
	  may raise exception <c>error:low_entropy</c> in case the random generator
	  failed due to lack of secure "randomness".
	</p>
        <p><em>Example</em></p>
        <pre>
_ = crypto:rand_seed(),
_IntegerValue = rand:uniform(42), % [1; 42]
_FloatValue = rand:uniform().     % [0.0; 1.0[</pre>
      </desc>
    </func>

    <func>
      <name name="rand_seed_s" arity="0" since="OTP 20.0"/>
      <fsummary>Strong random number generation plugin state</fsummary>
      <desc>
	<p>
          Creates state object for
	  <seeerl marker="stdlib:rand">random number generation</seeerl>,
          in order to generate cryptographically strongly random numbers
          (based on OpenSSL's <c>BN_rand_range</c>).
          See also
	  <seemfa marker="stdlib:rand#seed_s/1">rand:seed_s/1</seemfa>.
	</p>
	<p>
	  When using the state object from this function the
	  <seeerl marker="stdlib:rand">rand</seeerl> functions using it
	  may raise exception <c>error:low_entropy</c> in case the random generator
	  failed due to lack of secure "randomness".
	</p>
	<note>
	  <p>
	    The state returned from this function cannot be used
	    to get a reproducible random sequence as from
	    the other
	    <seeerl marker="stdlib:rand">rand</seeerl>
	    functions,
	    since reproducibility does not match cryptographically safe.
	  </p>
	  <p>
	    The only supported usage is to generate one distinct
	    random sequence from this start state.
	  </p>
	</note>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">rand_seed_alg(Alg) -> rand:state()</name>
      <fsummary>Strong random number generation plugin state</fsummary>
      <type>
        <v>Alg = crypto | crypto_cache</v>
      </type>
      <desc>
	<marker id="rand_seed_alg-1" />
	<p>
          Creates state object for
	  <seeerl marker="stdlib:rand">random number generation</seeerl>,
          in order to generate cryptographically strong random numbers,
          and saves it in the process dictionary before returning it as well.
          See also
	  <seemfa marker="stdlib:rand#seed/1">rand:seed/1</seemfa> and
	  <seemfa marker="#rand_seed_alg_s/1">rand_seed_alg_s/1</seemfa>.
	</p>
	<p>
	  When using the state object from this function the
	  <seeerl marker="stdlib:rand">rand</seeerl> functions using it
	  may raise exception <c>error:low_entropy</c> in case the random generator
	  failed due to lack of secure "randomness".
	</p>
        <p><em>Example</em></p>
        <pre>
_ = crypto:rand_seed_alg(crypto_cache),
_IntegerValue = rand:uniform(42), % [1; 42]
_FloatValue = rand:uniform().     % [0.0; 1.0[</pre>
      </desc>
    </func>

    <func>
      <name since="OTP-22.0">rand_seed_alg(Alg, Seed) -> rand:state()</name>
      <fsummary>Strong random number generation plugin state</fsummary>
      <type>
        <v>Alg = crypto_aes</v>
      </type>
      <desc>
	<marker id="rand_seed_alg-2" />
	<p>
          Creates a state object for
	  <seeerl marker="stdlib:rand">random number generation</seeerl>,
          in order to generate cryptographically unpredictable random numbers,
          and saves it in the process dictionary before returning it as well.
          See also
	  <seemfa marker="#rand_seed_alg_s/2">rand_seed_alg_s/2</seemfa>.
	</p>
        <p><em>Example</em></p>
        <pre>
_ = crypto:rand_seed_alg(crypto_aes, "my seed"),
IntegerValue = rand:uniform(42), % [1; 42]
FloatValue = rand:uniform(),     % [0.0; 1.0[
_ = crypto:rand_seed_alg(crypto_aes, "my seed"),
IntegerValue = rand:uniform(42), % Same values
FloatValue = rand:uniform().     % again
	</pre>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">rand_seed_alg_s(Alg) -> rand:state()</name>
      <fsummary>Strong random number generation plugin state</fsummary>
      <type>
        <v>Alg = crypto | crypto_cache</v>
      </type>
      <desc>
	<marker id="rand_seed_alg_s-1" />
	<p>
          Creates state object for
	  <seeerl marker="stdlib:rand">random number generation</seeerl>,
          in order to generate cryptographically strongly random numbers.
          See also
	  <seemfa marker="stdlib:rand#seed_s/1">rand:seed_s/1</seemfa>.
	</p>
	<p>
	  If <c>Alg</c> is <c>crypto</c> this function behaves exactly like
	  <seemfa marker="#rand_seed_s/0">rand_seed_s/0</seemfa>.
	</p>
	<p>
	  If <c>Alg</c> is <c>crypto_cache</c> this function
	  fetches random data with OpenSSL's <c>RAND_bytes</c>
	  and caches it for speed using an internal word size
	  of 56 bits that makes calculations fast on 64 bit machines.
	</p>
	<p>
	  When using the state object from this function the
	  <seeerl marker="stdlib:rand">rand</seeerl> functions using it
	  may raise exception <c>error:low_entropy</c> in case the random generator
	  failed due to lack of secure "randomness".
	</p>
	<p>
	  The cache size can be changed from its default value using the
	  <seeapp marker="crypto_app">
	    crypto app's
	  </seeapp> configuration parameter <c>rand_cache_size</c>.
	</p>
	<p>
	  When using the state object from this function the
	  <seeerl marker="stdlib:rand">rand</seeerl> functions using it
	  may throw exception <c>low_entropy</c> in case the random generator
	  failed due to lack of secure "randomness".
	</p>
	<note>
	  <p>
	    The state returned from this function cannot be used
	    to get a reproducible random sequence as from
	    the other
	    <seeerl marker="stdlib:rand">rand</seeerl>
	    functions,
	    since reproducibility does not match cryptographically safe.
	  </p>
	  <p>
	    In fact since random data is cached some numbers may
	    get reproduced if you try, but this is unpredictable.
	  </p>
	  <p>
	    The only supported usage is to generate one distinct
	    random sequence from this start state.
	  </p>
	</note>
      </desc>
    </func>

    <func>
      <name since="OTP 22.0">rand_seed_alg_s(Alg, Seed) -> rand:state()</name>
      <fsummary>Strong random number generation plugin state</fsummary>
      <type>
        <v>Alg = crypto_aes</v>
      </type>
      <desc>
	<marker id="rand_seed_alg_s-2" />
	<p>
          Creates a state object for
	  <seeerl marker="stdlib:rand">random number generation</seeerl>,
          in order to generate cryptographically unpredictable random numbers.
          See also
	  <seemfa marker="#rand_seed_alg/1">rand_seed_alg/1</seemfa>.
	</p>
	<p>
	  To get a long period the Xoroshiro928 generator from the
	  <seeerl marker="stdlib:rand">rand</seeerl>
	  module is used as a counter (with period 2^928 - 1)
	  and the generator states are scrambled through AES
	  to create 58-bit pseudo random values.
	</p>
	<p>
	  The result should be statistically completely unpredictable
	  random values, since the scrambling is cryptographically strong
	  and the period is ridiculously long.  But the generated numbers
	  are not to be regarded as cryptographically strong since
	  there is no re-keying schedule.
	</p>
	<list type="bulleted">
	  <item>
	    <p>
	      If you need cryptographically strong random numbers use
	      <seemfa marker="#rand_seed_alg_s/1">rand_seed_alg_s/1</seemfa>
	      with <c>Alg =:= crypto</c> or <c>Alg =:= crypto_cache</c>.
	    </p>
	  </item>
	  <item>
	    <p>
	      If you need to be able to repeat the sequence use this function.
	    </p>
	  </item>
	  <item>
	    <p>
	      If you do not need the statistical quality of this function,
	      there are faster algorithms in the
	      <seeerl marker="stdlib:rand">rand</seeerl>
	      module.
	    </p>
	  </item>
	</list>
	<p>
	  Thanks to the used generator the state object supports the
	  <seemfa marker="stdlib:rand#jump/0"><c>rand:jump/0,1</c></seemfa>
	  function with distance 2^512.
	</p>
	<p>
	  Numbers are generated in batches and cached for speed reasons.
	  The cache size can be changed from its default value using the
	  <seeapp marker="crypto_app">
	    crypto app's
	  </seeapp> configuration parameter <c>rand_cache_size</c>.
	</p>
      </desc>
    </func>

    <func>
      <name name="ec_curves" arity="0" since="OTP 17.0"/>
      <fsummary>Provide a list of available named elliptic curves.</fsummary>
      <desc>
        <p>Can be used to determine which named elliptic curves are supported.</p>
      </desc>
    </func>

    <func>
      <name name="ec_curve" arity="1" since="OTP 17.0"/>
      <fsummary>Get the defining parameters of a elliptic curve.</fsummary>
      <desc>
        <p>Return the defining parameters of a elliptic curve.</p>
      </desc>
    </func>

    <func>
      <name name="sign" arity="4" since="OTP R16B01"/>
      <name name="sign" arity="5" since="OTP 20.1"/>
      <fsummary> Create digital signature.</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Creates a digital signature.</p>
	<p>The msg is either the binary "cleartext" data to be
	signed or it is the hashed value of "cleartext" i.e. the
	digest (plaintext).</p>
	<p>Algorithm <c>dss</c> can only be used together with digest type
	<c>sha</c>.</p>
	<p>See also <seemfa marker="public_key:public_key#sign/3">public_key:sign/3</seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="verify" arity="5" since="OTP R16B01"/>
      <name name="verify" arity="6" since="OTP 20.1"/>
      <fsummary>Verifies a digital signature.</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
	<p>Verifies a digital signature</p>
	<p>The msg is either the binary "cleartext" data to be
	signed or it is the hashed value of "cleartext" i.e. the
	digest (plaintext).</p>
	<p>Algorithm <c>dss</c> can only be used together with digest type
	<c>sha</c>.</p>

	<p>See also <seemfa marker="public_key:public_key#verify/4">public_key:verify/4</seemfa>.</p>
      </desc>
    </func>

  </funcs>
   

  <funcs>
    <fsdescription>
        <title>Engine API</title>
      </fsdescription>
    <!-- Engine functions -->
    <func>
      <name name="privkey_to_pubkey" arity="2" since="OTP 20.2"/>
      <fsummary>Fetches a public key from an Engine stored private key.</fsummary>
      <desc>
	<p>Fetches the corresponding public key from a private key stored in an Engine.
	The key must be of the type indicated by the Type parameter.
	</p>	
      </desc>
    </func>

    <func>
      <name name="engine_get_all_methods" arity="0" since="OTP 20.2"/>
      <fsummary>Return list of all possible engine methods</fsummary>
      <desc>
	<p>
	  Returns a list of all possible engine methods.
	</p>
	<p>
	  May raise exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
	<p>
	  See also the chapter <seeguide marker="crypto:engine_load#engine_load">Engine Load</seeguide>
	  in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_load" arity="3" since="OTP 20.2"/>
      <fsummary>Load an encryption engine</fsummary>
      <desc>
	<p>
	  Loads the OpenSSL engine given by <c>EngineId</c> if it is available and intialize it.
	  Returns ok and an engine handle, if the engine can't be loaded an error tuple is returned.
	</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
	<p>
	  See also the chapter <seeguide marker="crypto:engine_load#engine_load">Engine Load</seeguide>
	  in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_unload" arity="1" since="OTP 20.2"/>
      <fsummary>Unload an encryption engine</fsummary>
      <desc>
	<p>
	  Unloads the OpenSSL engine given by <c>Engine</c>.
	  An error tuple is returned if the engine can't be unloaded.
	</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameter is in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
	<p>
	  See also the chapter <seeguide marker="crypto:engine_load#engine_load">Engine Load</seeguide>
	  in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_by_id" arity="1" since="OTP 21.0.6"/>
      <fsummary>Get a reference to an already loaded engine</fsummary>
      <desc>
	<p>
	  Get a reference to an already loaded engine with <c>EngineId</c>.
	  An error tuple is returned if the engine can't be unloaded.
	</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameter is in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
	<p>
	  See also the chapter <seeguide marker="crypto:engine_load#engine_load">Engine Load</seeguide>
	  in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_ctrl_cmd_string" arity="3" since="OTP 20.2"/>
      <fsummary>Sends ctrl commands to an OpenSSL engine</fsummary>
      <desc>
	<p>
	  Sends ctrl commands to the OpenSSL engine given by <c>Engine</c>.
	  This function is the same as calling <c>engine_ctrl_cmd_string/4</c> with
	  <c>Optional</c> set to <c>false</c>.
	</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_ctrl_cmd_string" arity="4" since="OTP 20.2"/>
      <fsummary>Sends ctrl commands to an OpenSSL engine</fsummary>
      <desc>
	<p>
	  Sends ctrl commands to the OpenSSL engine given by <c>Engine</c>.
	  <c>Optional</c> is a boolean argument that can relax the semantics of the function.
	  If set to <c>true</c> it will only return failure if the ENGINE supported the given
	  command name but failed while executing it, if the ENGINE doesn't support the command
	  name it will simply return success without doing anything. In this case we assume
	  the user is only supplying commands specific to the given ENGINE so we set this to
	  <c>false</c>.
	</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_add" arity="1" since="OTP 21.0.6"/>
      <fsummary>Add engine to OpenSSL internal list</fsummary>
      <desc>
	<p>Add the engine to OpenSSL's internal list.</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_remove" arity="1" since="OTP 21.0.6"/>
      <fsummary>Remove engine to OpenSSL internal list</fsummary>
      <desc>
	<p>Remove the engine from OpenSSL's internal list.</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_register" arity="2" since="OTP 25.1"/>
      <fsummary>Register engine for some methods</fsummary>
      <desc>
	<p>Register engine to handle some type of methods, for example engine_method_digests.</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_unregister" arity="2" since="OTP 25.1"/>
      <fsummary>Unregister engine for some methods</fsummary>
      <desc>
	<p>Unregister engine so it don't handle some type of methods.</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_get_id" arity="1" since="OTP 21.0.6"/>
      <fsummary>Fetch engine ID</fsummary>
      <desc>
	<p>Return the ID for the engine, or an empty binary if there is no id set.</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_get_name" arity="1" since="OTP 21.0.6"/>
      <fsummary>Fetch engine name</fsummary>
      <desc>
	<p>Return the name (eg a description) for the engine, or an empty binary if there is no name set.</p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="engine_list" arity="0" since="OTP 20.2"/>
      <fsummary>List the known engine ids</fsummary>
      <desc>
	<p>List the id's of all engines in OpenSSL's internal list.</p>
	<p>
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
	<p>
	  See also the chapter <seeguide marker="crypto:engine_load#engine_load">Engine Load</seeguide>
	  in the User's Guide.
	</p>
	<p>
	  May raise exception <c>error:notsup</c> in case engine functionality is not supported by the underlying
	  OpenSSL implementation.
	</p>
      </desc>
    </func>

    <func>
      <name name="ensure_engine_loaded" arity="2" since="OTP 21.0.6"/>
      <fsummary>Ensure encryption engine just loaded once</fsummary>
      <desc>
	<p>
	  Loads an engine given by <c>EngineId</c> and the path to the dynamic library
	  implementing the engine. An error tuple is returned if the engine can't be loaded. 

	</p>
	<p>
	  This function differs from the normal engine_load in the sense that it
	  also add the engine id to OpenSSL's internal engine list. The difference between
	  the first call and the following is that the first loads the engine with the dynamical 
	  engine and the following calls fetch it from the OpenSSL's engine list.
	  All references that is returned are equal.
	</p>
	<p>
	  Use <c>engine_unload/1</c> function to remove the references. But remember that
	  <c>engine_unload/1</c> just removes the references to the engine and not the
	  tag in OpenSSL's engine list. That has to be done with the <c>engine_remove/1</c> 
	  function when needed (just called once, from any of the references you got).
        </p>
	<p>
	  The function raises a <c>error:badarg</c> if the parameters are in wrong format.
	  It may also raise the exception <c>error:notsup</c> in case there is
	  no engine support in the underlying OpenSSL implementation.
	</p>
	<p>
	  See also the chapter <seeguide marker="crypto:engine_load#engine_load">Engine Load</seeguide>
	  in the User's Guide.
	</p>
      </desc>
    </func>

    <func>
      <name name="hash_equals" arity="2" since="OTP 25.0"/>
      <fsummary>Constant time memory comparison for fixed length binaries</fsummary>
      <desc>
        <p>
          Constant time memory comparison for fixed length binaries, such as results of HMAC computations.
        </p>
        <p>
          Returns true if the binaries are identical, false if they are of the same length but not identical.
          The function raises an <c>error:badarg</c> exception if the binaries are of different size.
	</p>
      </desc>
    </func>

    <func>
      <name name="pbkdf2_hmac" arity="5" since="OTP 24.2"/>
      <fsummary>PBKDF2 in combination with HMAC</fsummary>
      <desc>
	<p>Uses the <seeerl marker="#error_3tup">3-tuple style</seeerl> for error handling.</p>
        <p>
          PKCS #5 PBKDF2 (Password-Based Key Derivation Function 2) in combination with HMAC.
        </p>
      </desc>
    </func>

 </funcs>

</erlref>
