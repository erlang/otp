<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1998</year><year>2020</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>snmp_notification_mib</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date></date>
    <rev></rev>
    <file>snmp_notification_mib.xml</file>
  </header>
  <module since="">snmp_notification_mib</module>
  <modulesummary>Instrumentation Functions for SNMP-NOTIFICATION-MIB</modulesummary>
  <description>
    <p>The module <c>snmp_notification_mib</c> implements the
      instrumentation functions for the
      SNMP-NOTIFICATION-MIB, and functions for configuring the database.
      </p>
    <p>The configuration files are described in the SNMP User's Manual.</p>
  </description>
  <funcs>
    <func>
      <name since="">configure(ConfDir) -> void()</name>
      <fsummary>Configure the SNMP-NOTIFICATION-MIB</fsummary>
      <type>
        <v>ConfDir = string()</v>
      </type>
      <desc>
        <p>This function is called from the supervisor at system
          start-up.
          </p>
        <p>Inserts all data in the configuration files into the
          database and destroys all old rows with StorageType
          <c>volatile</c>.  The rows created from the configuration file
          will have StorageType <c>nonVolatile</c>.
          </p>
        <p>If an error is found in the configuration file, it is
          reported using the function <c>config_err/2</c> of the 
          error report module,
          and the function fails with reason <c>configuration_error</c>.
          </p>
        <p><c>ConfDir</c> is a string which points to the directory
          where the configuration files are found.
          </p>
        <p>The configuration file read is: <c>notify.conf</c>.
          </p>
      </desc>
    </func>
    <func>
      <name since="">reconfigure(ConfDir) -> void()</name>
      <fsummary>Configure the SNMP-NOTIFICATION-MIB</fsummary>
      <type>
        <v>ConfDir = string()</v>
      </type>
      <desc>
        <p>Inserts all data in the configuration files into the
          database and destroys all old data, including the rows with
          StorageType <c>nonVolatile</c>.  The rows created from the
          configuration file will have StorageType <c>nonVolatile</c>.
          </p>
        <p>Thus, the data in the SNMP-NOTIFICATION-MIB, after this
          function has been called, is from the configuration files.
          </p>
        <p>If an error is found in the configuration file, it is
          reported using the function <c>config_err/2</c> of the 
          error report module,
          and the function fails with reason <c>configuration_error</c>.
          </p>
        <p><c>ConfDir</c> is a string which points to the directory
          where the configuration files are found.
          </p>
        <p>The configuration file read is: <c>notify.conf</c>.
                    <marker id="add_notify"></marker>
</p>
      </desc>
    </func>
    <func>
      <name since="">add_notify(Name, Tag, Type) -> Ret</name>
      <fsummary>Added one notify definition</fsummary>
      <type>
        <v>Name = string()</v>
        <v>Tag = string()</v>
        <v>Type = trap | inform</v>
        <v>Ret = {ok, Key} | {error, Reason}</v>
        <v>Key = term()</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Adds a notify definition to the agent config. 
          Equivalent to one line in the <c>notify.conf</c> file.</p>
        <marker id="delete_notify"></marker>
      </desc>
    </func>
    <func>
      <name since="">delete_notify(Key) -> Ret</name>
      <fsummary>Delete one notify definition</fsummary>
      <type>
        <v>Key = term()</v>
        <v>Ret = ok | {error, Reason}</v>
        <v>Reason = term()</v>
      </type>
      <desc>
        <p>Delete a notify definition from the agent config.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

