%%	-*- erlang -*-
%%
%% %CopyrightBegin%
%%
%% Copyright Ericsson AB 2008-2014. All Rights Reserved.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%
%% %CopyrightEnd%
%
%% Api defs file, defines the classes and members we want.

%% {class,wxObject,Options,[Function|{Func,Opt}]}.
%% {enum, Type, SkipPart}

{const_skip, [wxGenericFindReplaceDialog]}.
{not_const,  [wxHAS_INT64,wxBYTE_ORDER,wxRETAINED,
	      wxFONTENCODING_UTF32,wxFONTENCODING_UTF16,
	      wxDEFAULT_CONTROL_BORDER,wxMOD_CMD,
	      wxMAJOR_VERSION, wxMINOR_VERSION, 
	      wxRELEASE_NUMBER,wxSUBRELEASE_NUMBER,wxBETA_NUMBER,
	      %%
	      wxALWAYS_NATIVE_DOUBLE_BUFFER,
	      wxGAUGE_EMULATE_INDETERMINATE_MODE,
	      wxTR_DEFAULT_STYLE,
	      wxSL_LABELS,
	      wxCURSOR_DEFAULT,
	      wxCURSOR_ARROWWAIT,
	      wxCURSOR_MAX,
	      wxLanguage
	     ]}.

{gvars, 
 [
  {wxITALIC_FONT, wxFont},
  {wxNORMAL_FONT, wxFont},
  {wxSMALL_FONT,  wxFont},
  {wxSWISS_FONT,  wxFont},
  
  {wxBLACK_DASHED_PEN, wxPen},
  {wxBLACK_PEN, wxPen},
  {wxCYAN_PEN, wxPen},
  {wxGREEN_PEN, wxPen},
  {wxGREY_PEN, wxPen},
  {wxLIGHT_GREY_PEN, wxPen},
  {wxMEDIUM_GREY_PEN, wxPen},
  {wxRED_PEN, wxPen},
  {wxTRANSPARENT_PEN, wxPen},
  {wxWHITE_PEN, wxPen},

  {wxBLACK_BRUSH, wxBrush},
  {wxBLUE_BRUSH, wxBrush},
  {wxCYAN_BRUSH, wxBrush},
  {wxGREEN_BRUSH, wxBrush},
  {wxGREY_BRUSH, wxBrush},
  {wxLIGHT_GREY_BRUSH, wxBrush},
  {wxMEDIUM_GREY_BRUSH, wxBrush},
  {wxRED_BRUSH, wxBrush},
  {wxTRANSPARENT_BRUSH, wxBrush},
  {wxWHITE_BRUSH, wxBrush},

  {wxCROSS_CURSOR, wxCursor},
  {wxHOURGLASS_CURSOR, wxCursor},
  {wxSTANDARD_CURSOR, wxCursor},

  {wxBLACK, wxColour},
  {wxBLUE,  wxColour},
  {wxCYAN,  wxColour},
  {wxGREEN, wxColour},
  {wxLIGHT_GREY, wxColour},
  {wxRED,   wxColour},
  {wxWHITE, wxColour},

  {wxNullBitmap,     {address,wxBitmap}},
  {wxNullIcon,       {address,wxIcon}},
  {wxNullCursor,     {address,wxCursor}},
  {wxNullPen,        {address,wxPen}},
  {wxNullBrush,      {address,wxBrush}},
  {wxNullPalette,    {address,wxPalette}},
  {wxNullFont,       {address,wxFont}}]}.
{enum, wxBackgroundStyle, "wxBG_STYLE_"}.
{enum, wxWindowVariant, "wxWINDOW_VARIANT_"}.
{enum, wxBitmapType, "wxBITMAP_TYPE_"}.

{class, wxeEvtHandler, object, [taylormade, {alias, [{wxeEvtHandler, wxEvtHandler}]}],
 [{'Connect',   [{"eventType",{base,eventType}},{"userData",nowhere}]},
  {'Disconnect',[{"eventType",{base,eventType}},{"userData",nowhere}]}]
}.

{class, wxWindowGTK, wxEvtHandler, 
 [{alias, [{wxWindowGTK, wxWindow}]}],
 [wxWindow,'~wxWindow', %% 'AddChild',
  'CacheBestSize','CaptureMouse',
  'Center','CenterOnParent','Centre','CentreOnParent','ClearBackground',
  {'ClientToScreen',[{"x",both},{"y",both}]}, 'Close',
  'ConvertDialogToPixels','ConvertPixelsToDialog','Destroy','DestroyChildren',
  'Disable',%%'DoGetBestSize','DoUpdateWindowUI', 'DragAcceptFiles',
  'Enable',
  'FindFocus','FindWindow','FindWindowById','FindWindowByName','FindWindowByLabel',
  'Fit','FitInside','Freeze', 'GetAcceleratorTable', % 'GetAccessible',
  'GetBackgroundColour','GetBackgroundStyle',
  'GetBestSize','GetCaret','GetCapture','GetCharHeight',
  'GetCharWidth','GetChildren',
  %%'GetClassDefaultAttributes','GetConstraints'
  'GetClientSize','GetContainingSizer','GetCursor',
  %%'GetDefaultAttributes',
  'GetDropTarget','GetEventHandler','GetExtraStyle','GetFont','GetForegroundColour',
  'GetGrandParent',
  {'GetHandle', [{return, [{type,"wxUIntPtr"}, {ref,pointer}, {base, int}]}]},
  'GetHelpText','GetId','GetLabel','GetMaxSize',
  'GetMinSize','GetName','GetParent','GetPosition','GetRect',
  {'GetScreenPosition', [{"x",out},{"y",out}]}, 'GetScreenRect',
  'GetScrollPos','GetScrollRange','GetScrollThumb','GetSize','GetSizer',
  {'GetTextExtent', [{"descent", out}, {"externalLeading", out}]},
  'GetToolTip','GetUpdateRegion',%'GetValidator',
  'GetVirtualSize','GetWindowStyleFlag','GetWindowVariant','HasCapture','HasScrollbar',
  'HasTransparentBackground','Hide','InheritAttributes','InitDialog',
  'InvalidateBestSize','IsEnabled','IsExposed','IsRetained','IsShown','IsTopLevel',
  'Layout','LineDown','LineUp','Lower','MakeModal','Move','MoveAfterInTabOrder',
  'MoveBeforeInTabOrder','Navigate',%'OnInternalIdle',
  'PageDown','PageUp',
  'PopEventHandler','PopupMenu',%'PushEventHandler',
  'Raise', 'Refresh', 'RefreshRect',%'RegisterHotKey',
  'ReleaseMouse','RemoveChild',%'RemoveEventHandler',
  'Reparent',
  'ScreenToClient','ScrollLines','ScrollPages','ScrollWindow','SetAcceleratorTable',
  %%'SetAccessible',
  'SetAutoLayout','SetBackgroundColour','SetBackgroundStyle',
  'SetCaret','SetClientSize','SetContainingSizer','SetCursor',
  %%'SetConstraints','SetInitialBestSize',
  'SetMaxSize','SetMinSize',
  'SetOwnBackgroundColour','SetOwnFont','SetOwnForegroundColour','SetDropTarget',
  %%'SetEventHandler',
  'SetExtraStyle','SetFocus','SetFocusFromKbd','SetFont',
  'SetForegroundColour','SetHelpText','SetId','SetLabel','SetName','SetPalette',
  'SetScrollbar','SetScrollPos','SetSize','SetSizeHints','SetSizer','SetSizerAndFit',
  'SetThemeEnabled','SetToolTip',%'SetValidator',
  'SetVirtualSize',
  'SetVirtualSizeHints','SetWindowStyle','SetWindowStyleFlag','SetWindowVariant',
  'ShouldInheritColours','Show','Thaw','TransferDataFromWindow',
  'TransferDataToWindow',%'UnregisterHotKey',
  'Update','UpdateWindowUI','Validate',
  'WarpPointer',
  {'SetTransparent', [{test_if, "wxCHECK_VERSION(2,8,12)"}]},
  {'CanSetTransparent', [{test_if, "wxCHECK_VERSION(2,8,12)"}]},
  {'IsDoubleBuffered', [{test_if, "wxCHECK_VERSION(3,0,0)"}]},
  {'SetDoubleBuffered', [{test_if, "wxCHECK_VERSION(3,0,0) && !defined(__WXMAC__)"}]}
]}.

{class, wxTopLevelWindowGTK, wxWindow, 
 [{alias, [{wxTopLevelWindowGTK, wxTopLevelWindow}]}],
 [{'GetIcon', [{return, {by_val, true}}]},
  'GetIcons','GetTitle','IsActive','Iconize',
  'IsFullScreen','IsIconized','IsMaximized','Maximize',
  'RequestUserAttention','SetIcon','SetIcons',
  'CenterOnScreen', 'CentreOnScreen',
  %%'SetLeftMenu', 'SetRightMenu',
  'SetShape','SetTitle','ShowFullScreen'
 ]}.

{class, wxFrame, wxTopLevelWindow, [],
 ['wxFrame','~wxFrame',%'Centre',
  'Create','CreateStatusBar','CreateToolBar',
  'GetClientAreaOrigin','GetMenuBar','GetStatusBar','GetStatusBarPane',
  'GetToolBar',%'OnCreateStatusBar','OnCreateToolBar',
  'ProcessCommand','SendSizeEvent','SetMenuBar','SetStatusBar',
  'SetStatusBarPane','SetStatusText',
  {'SetStatusWidths', [{"n",{c_only,{length,"widths_field"}}}]},
  'SetToolBar']}.

{class, wxMiniFrame, wxFrame, [],
 ['wxMiniFrame','~wxMiniFrame','Create']}.

%% Hmm what do we do with these
%% {class, wxValidator, root,[],
%%  ['wxValidator','~wxValidator','Clone','GetWindow','SetBellOnError','SetWindow',
%%   'TransferFromWindow','TransferToWindow','Validate']}.
%% {class, wxGenericValidator, wxValidator,[],
%%  ['wxGenericValidator','~wxGenericValidator','Clone',
%%   'TransferFromWindow','TransferToWindow']}.
%% {class, wxTextValidator, wxValidator,[],
%%  ['wxTextValidator','Clone','GetExcludes','GetIncludes','GetStyle',
%%   'OnChar','SetExcludes','SetIncludes','SetStyle','TransferFromWindow',
%%   'TransferToWindow','Validate']}.

{class, wxSplashScreen, wxFrame, [], 
 ['wxSplashScreen','~wxSplashScreen',%'OnCloseWindow',
  'GetSplashStyle', %'GetSplashWindow',
  'GetTimeout']}.

{class, wxPanel, wxWindow, [],
 ['wxPanel','~wxPanel',%'Create',
  %%'GetDefaultItem',
  'InitDialog',
  %%'OnSysColourChanged', %'SetDefaultItem','SetFocus',
  'SetFocusIgnoringChildren'
 ]}.

{class, wxScrolledWindow, wxPanel, [],
 ['wxScrolledWindow','~wxScrolledWindow',
  'CalcScrolledPosition','CalcUnscrolledPosition',%'Create',
  'EnableScrolling','GetScrollPixelsPerUnit','GetViewStart',
  %%'GetVirtualSize','IsRetained',
  'DoPrepareDC',%'OnDraw',
  'PrepareDC','Scroll','SetScrollbars',
  'SetScrollRate',{'SetTargetWindow',[{"pushEventHandler", nowhere}]}]}.

{class, wxSashWindow, wxWindow, [],
 ['wxSashWindow','~wxSashWindow','GetSashVisible','GetMaximumSizeX',
  'GetMaximumSizeY','GetMinimumSizeX','GetMinimumSizeY',
  'SetMaximumSizeX','SetMaximumSizeY','SetMinimumSizeX','SetMinimumSizeY',
  'SetSashVisible' %% ,'HasBorder', 'SetSashBorder' 2.6 only 
 ]}.

{class, wxSashLayoutWindow, wxSashWindow, [],
 ['wxSashLayoutWindow','Create','GetAlignment','GetOrientation',
  %% 'OnCalculateLayout','OnQueryLayoutInfo', Requires events for overloading ?
  'SetAlignment','SetDefaultSize','SetOrientation'
 ]}.

{enum, {"wxGrid","wxGridSelectionModes"}, "wxGrid::wxGrid"}.
{class, wxGrid, wxScrolledWindow, [],
 ['wxGrid','~wxGrid','AppendCols','AppendRows','AutoSize',%'AutoSizeColOrRow',
  'AutoSizeColumn','AutoSizeColumns','AutoSizeRow','AutoSizeRows','BeginBatch',
  'BlockToDeviceRect','CanDragColSize','CanDragRowSize','CanDragGridSize',
  'CanEnableCellControl',%'CanHaveAttributes',
  'CellToRect','ClearGrid','ClearSelection','CreateGrid',
  'DeleteCols','DeleteRows','DisableCellEditControl',
  'DisableDragColSize','DisableDragGridSize','DisableDragRowSize',
  'EnableCellEditControl','EnableDragColSize','EnableDragGridSize',
  'EnableDragRowSize','EnableEditing','EnableGridLines','EndBatch','Fit',
  'ForceRefresh','GetBatchCount','GetCellAlignment','GetCellBackgroundColour',
  'GetCellEditor','GetCellFont','GetCellRenderer','GetCellTextColour','GetCellValue',
						%'GetColLeft',
  'GetColLabelAlignment','GetColLabelSize','GetColLabelValue',
  'GetColMinimalAcceptableWidth',%'GetColMinimalWidth',
						%'GetColRight','GetColSize',
  'GetDefaultCellAlignment','GetDefaultCellBackgroundColour','GetDefaultCellFont',
  'GetDefaultCellTextColour','GetDefaultColLabelSize','GetDefaultColSize',
  'GetDefaultEditor','GetDefaultEditorForCell','GetDefaultEditorForType',
  'GetDefaultRenderer','GetDefaultRendererForCell','GetDefaultRendererForType',
  'GetDefaultRowLabelSize','GetDefaultRowSize','GetGridCursorCol','GetGridCursorRow',
  'GetGridLineColour','GridLinesEnabled','GetLabelBackgroundColour','GetLabelFont',
  'GetLabelTextColour','GetNumberCols','GetNumberRows','GetOrCreateCellAttr',
  'GetRowMinimalAcceptableHeight',%'GetRowMinimalHeight',
  'GetRowLabelAlignment',
  'GetRowLabelSize','GetRowLabelValue','GetRowSize','GetScrollLineX','GetScrollLineY',
						%'GetSelectionMode',
  'GetSelectedCells','GetSelectedCols','GetSelectedRows',
  'GetSelectionBackground','GetSelectionBlockTopLeft','GetSelectionBlockBottomRight',
  'GetSelectionForeground',%'GetTable',
  'GetViewWidth',
  'GetGridWindow', 'GetGridRowLabelWindow', 
  'GetGridColLabelWindow', 'GetGridCornerLabelWindow', 
  'HideCellEditControl',
						%'InitColWidths','InitRowHeights',
  'InsertCols','InsertRows',
  'IsCellEditControlEnabled','IsCurrentCellReadOnly','IsEditable','IsInSelection',
  'IsReadOnly','IsSelection','IsVisible','MakeCellVisible','MoveCursorDown',
  'MoveCursorLeft','MoveCursorRight','MoveCursorUp','MoveCursorDownBlock',
  'MoveCursorLeftBlock','MoveCursorRightBlock','MoveCursorUpBlock','MovePageDown',
  'MovePageUp','RegisterDataType','SaveEditControlValue','SelectAll','SelectBlock',
  'SelectCol', %'SelectionToDeviceRect',
  'SelectRow','SetCellAlignment',
  'SetCellBackgroundColour','SetCellEditor','SetCellFont','SetCellRenderer',
  'SetCellTextColour','SetCellValue','SetColAttr','SetColFormatBool',
  'SetColFormatNumber','SetColFormatFloat','SetColFormatCustom',
  'SetColLabelAlignment','SetColLabelSize','SetColLabelValue','SetColMinimalWidth',
  'SetColMinimalAcceptableWidth','SetColSize','SetDefaultCellAlignment',
  'SetDefaultCellBackgroundColour','SetDefaultCellFont','SetDefaultCellTextColour',
  'SetDefaultEditor','SetDefaultRenderer','SetDefaultColSize','SetDefaultRowSize',
  'SetGridCursor','SetGridLineColour','SetLabelBackgroundColour','SetLabelFont',
  'SetLabelTextColour','SetMargins',%'SetOrCalcColumnSizes','SetOrCalcRowSizes',
  'SetReadOnly','SetRowAttr','SetRowLabelAlignment','SetRowLabelSize',
  'SetRowLabelValue','SetRowMinimalHeight','SetRowMinimalAcceptableHeight',
  'SetRowSize','SetScrollLineX','SetScrollLineY','SetSelectionBackground',
  'SetSelectionForeground','SetSelectionMode',%'SetTable',
  'ShowCellEditControl','XToCol','XToEdgeOfCol','YToEdgeOfRow','YToRow']}.

{class, wxGridCellRenderer, root, [], 
 ['Draw','GetBestSize']}.
{class, wxGridCellEditor,   root, [], 
 ['Create',
  'IsCreated', 'SetSize', 'Show',
  {'PaintBackground', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  'BeginEdit',
  {'EndEdit', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  'Reset', 'StartingKey',
  'StartingClick', 'HandleReturn'
  %'Destroy','Clone','~wxGridCellEditor',
 ]}.

{class, wxGridCellBoolRenderer, wxGridCellRenderer, [], 
 ['wxGridCellBoolRenderer']}.
{class, wxGridCellBoolEditor,   wxGridCellEditor, [], 
 ['wxGridCellBoolEditor', 'IsTrueValue', 'UseStringValues']}.

{class, wxGridCellFloatRenderer,  wxGridCellStringRenderer, [], 
 ['wxGridCellFloatRenderer', 'GetPrecision',  'GetWidth',
  'SetParameters', 'SetPrecision', 'SetWidth']}.
{class, wxGridCellFloatEditor,  wxGridCellEditor, [], 
 ['wxGridCellFloatEditor', 'SetParameters' ]}.

{class, wxGridCellStringRenderer,  wxGridCellRenderer, [], ['wxGridCellStringRenderer']}.
{class, wxGridCellTextEditor,   wxGridCellEditor, [], 
 ['wxGridCellTextEditor','SetParameters']}.
{class, wxGridCellChoiceEditor,   wxGridCellEditor, [{skip, [{'wxGridCellChoiceEditor', 3}]}], 
 ['wxGridCellChoiceEditor','SetParameters']}.

{class, wxGridCellNumberRenderer,  wxGridCellStringRenderer, [], 
 ['wxGridCellNumberRenderer']}.
{class, wxGridCellNumberEditor,   wxGridCellTextEditor, [], 
 ['wxGridCellNumberEditor','GetValue','SetParameters']}.

{class, wxGridCellAttr, root, [], 
 [%'wxGridCellAttr','Clone','IncRef','DecRef',
  'SetTextColour','SetBackgroundColour','SetFont','SetAlignment','SetReadOnly',
  'SetRenderer','SetEditor','HasTextColour','HasBackgroundColour','HasFont',
  'HasAlignment','HasRenderer','HasEditor','GetTextColour','GetBackgroundColour',
  'GetFont','GetAlignment','GetRenderer','GetEditor','IsReadOnly','SetDefAttr']}.

{enum, wxDirection, "wx"}.
{enum, wxLayoutDirection, "wxLayout_"}.

{class, wxDC, object, 
 [{skip, [{'DrawEllipse',5},{'DrawRectangle',5},
	  {'DrawRoundedRectangle',6},{'SetClippingRegion',5}]}],
 [{{'Blit',7},[{"rop", [{base, {enum, "wxRasterOperationMode"}}]}]},
  'CalcBoundingBox','Clear',
  {'ComputeScaleAndOrigin',[{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  {'CrossHair',1},
  'DestroyClippingRegion','DeviceToLogicalX','DeviceToLogicalXRel',
  'DeviceToLogicalY','DeviceToLogicalYRel',{'DrawArc',3},{'DrawBitmap',3},
  {'DrawCheckMark',1},{'DrawCircle',2},'DrawEllipse',{'DrawEllipticArc',4},
  {'DrawIcon',2},{'DrawLabel',4},{'DrawLine',2},
  {'DrawLines', [{"n",{c_only,{length,"points"}}}]},
  {'DrawPolygon', [{"n",{c_only,{length,"points"}}},
		   {"fillStyle", [{base, {enum, "wxPolygonFillMode"}}]}
		  ]},
  %%'DrawPolyPolygon',
  {'DrawPoint',1},'DrawRectangle',
  {'DrawRotatedText',3}, 'DrawRoundedRectangle',%'DrawSpline',
  {'DrawText',2},
  'EndDoc','EndPage',
  {{'FloodFill',3},[{"style", [{base, {enum, "wxFloodFillStyle"}}]}]},
  'GetBackground','GetBackgroundMode',
  'GetBrush','GetCharHeight','GetCharWidth',{'GetClippingBox',[{"rect", skip_member}]},
  'GetFont','GetLayoutDirection','GetLogicalFunction','GetMapMode','GetMultiLineTextExtent',
  {'GetPartialTextExtents', [{"widths", out}]},
  'GetPen',{'GetPixel', [{"col", out}, {"x", skip_member}]},
  'GetPPI','GetSize','GetSizeMM',
  'GetTextBackground','GetTextExtent','GetTextForeground',
  'GetUserScale','GradientFillConcentric','GradientFillLinear',
  'LogicalToDeviceX','LogicalToDeviceXRel','LogicalToDeviceY','LogicalToDeviceYRel',
  'MaxX','MaxY','MinX','MinY','IsOk','ResetBoundingBox','SetAxisOrientation',
  'SetBackground','SetBackgroundMode','SetBrush','SetClippingRegion','SetDeviceOrigin',
  'SetFont','SetLayoutDirection',
  {'SetLogicalFunction', [{"function", [{base, {enum, "wxRasterOperationMode"}}]}]},
  {'SetMapMode', [{"mode", [{base, {enum, "wxMappingMode"}}]}]},
  'SetPalette',
  'SetPen','SetTextBackground','SetTextForeground','SetUserScale','StartDoc','StartPage']}.

{class,wxMirrorDC, wxDC, [], ['wxMirrorDC', '~wxMirrorDC']}.
{class,wxScreenDC, wxDC, [], ['wxScreenDC', '~wxScreenDC']}.
{class,wxPostScriptDC,wxDC,[{ifdef, wxUSE_POSTSCRIPT}],
 ['wxPostScriptDC','~wxPostScriptDC',
  {'SetResolution', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  {'GetResolution', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]}]}.
{class,wxWindowDC, wxDC, [],
 [{'wxWindowDC', [{{func, 0}, [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]}]},
  '~wxWindowDC']}.
{class,wxClientDC,wxWindowDC,[],
 [{'wxClientDC', [{{func, 0}, [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]}]},
  '~wxClientDC']}.
{class,wxPaintDC, wxWindowDC, [],
 [{'wxPaintDC', [{{func, 0}, [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]}]},
  '~wxPaintDC']}.
%%{class,wxPrinterDC, wxDC, [], ['wxPrinterDC','GetPaperRect']}. Not in GTK
{class,wxMemoryDC, wxDC, [], ['wxMemoryDC', '~wxMemoryDC','SelectObject','SelectObjectAsSource']}.
{class,wxBufferedDC,wxMemoryDC,[],['wxBufferedDC','~wxBufferedDC','Init']}.
{class,wxBufferedPaintDC,wxBufferedDC,[],['wxBufferedPaintDC', '~wxBufferedPaintDC']}.
%% Only a typedef!
%%{class,wxAutoBufferedPaintDC,wxBufferedPaintDC,[],['wxAutoBufferedPaintDC']}.

{class, wxGraphicsObject, object, [{ifdef, wxUSE_GRAPHICS_CONTEXT}],
 ['~wxGraphicsObject', 'GetRenderer','IsNull']}.
{class, wxGraphicsContext, wxGraphicsObject,
 [{ifdef, wxUSE_GRAPHICS_CONTEXT}, {skip, [{'StrokeLines',4}]}],
 ['~wxGraphicsContext',
  'Create', %%CreateFromNative CreateFromNativeWindow
  'CreatePen','CreateBrush',
  {'CreateRadialGradientBrush', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  {'CreateLinearGradientBrush', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  'CreateFont','CreateMatrix',
  'CreatePath','Clip','ResetClip',
  'DrawBitmap','DrawEllipse','DrawIcon',
  {'DrawLines', [{"n",{c_only,{length,"points"}}}, {"points", {single,array}},
		 {"fillStyle", [{base, {enum, "wxPolygonFillMode"}}]}]},
  {'DrawPath',[{"fillStyle", [{base, {enum, "wxPolygonFillMode"}}]}]},
  'DrawRectangle','DrawRoundedRectangle','DrawText',
  {'FillPath',[{"fillStyle", [{base, {enum, "wxPolygonFillMode"}}]}]},
  'StrokePath', %% 'GetNativeContext',
  {'GetPartialTextExtents', [{"widths", out}]},
  'GetTextExtent','Rotate','Scale','Translate',
  'GetTransform','SetTransform','ConcatTransform',
  'SetBrush','SetFont','SetPen','StrokeLine',
  {'StrokeLines', [{"n",{c_only,{length,"points"}}}, {"points", {single,array}}]}
 ]}.
{class, wxGraphicsMatrix, wxGraphicsObject, [{ifdef, wxUSE_GRAPHICS_CONTEXT}],
 ['Concat','Get',%%'GetNativeMatrix',
  'Invert','IsEqual','IsIdentity',
  'Rotate','Scale','Translate','Set','TransformPoint','TransformDistance']}.
{class, wxGraphicsPath, wxGraphicsObject, [{ifdef, wxUSE_GRAPHICS_CONTEXT}],
 ['MoveToPoint','AddArc','AddArcToPoint','AddCircle','AddCurveToPoint',
  'AddEllipse','AddLineToPoint','AddPath','AddQuadCurveToPoint',
  'AddRectangle','AddRoundedRectangle','CloseSubpath',
  {'Contains', [{"fillStyle", [{base, {enum, "wxPolygonFillMode"}}]}]},
  'GetBox','GetCurrentPoint','Transform'
  %'GetNativePath','UnGetNativePath'
 ]}.
{class, wxGraphicsRenderer, object, [{ifdef, wxUSE_GRAPHICS_CONTEXT}],
 ['GetDefaultRenderer','CreateContext',
  %%'CreateContextFromNativeContext', 'CreateContextFromNativeWindow',
  'CreatePen','CreateBrush',
  {'CreateLinearGradientBrush', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  {'CreateRadialGradientBrush', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  'CreateFont',
  'CreateMatrix','CreatePath']}.

{class, wxGraphicsPen,  wxGraphicsObject,[{ifdef, wxUSE_GRAPHICS_CONTEXT}], []}.
{class, wxGraphicsBrush,wxGraphicsObject,[{ifdef, wxUSE_GRAPHICS_CONTEXT}], []}.
{class, wxGraphicsFont, wxGraphicsObject,[{ifdef, wxUSE_GRAPHICS_CONTEXT}], []}.

{class, wxMenuBar, wxWindow, [{skip, [{wxMenuBar,4}]}],
 [
  'wxMenuBar','~wxMenuBar','Append','Check','Enable','EnableTop',
  'FindMenu', 'FindMenuItem',{'FindItem', [{"menu",skip}]},'GetHelpString',
  'GetLabel','GetLabelTop','GetMenu','GetMenuCount','Insert','IsChecked',
  'IsEnabled',%'Refresh',
  'Remove','Replace','SetHelpString',
  'SetLabel','SetLabelTop']}.

{class, wxControl, wxWindow, [], [% 'Command','GetLabelText',
				  'GetLabel','SetLabel']}.

{class, wxControlWithItems, wxControl,
 [{skip, [{'GetClientObject',1},{'SetClientObject',2}]}],
 [
  {'Append',[{"clientData",[{skip_member, voidp}]},
	     {"strings", [{erl_func, "appendStrings"}]}]},
  'Clear','Delete','FindString',
  %% 'GetClientData','SetClientData',
  {'GetClientObject', [{"n", [{erl_func, "getClientData"}]}]},
  {'SetClientObject', [{"n", [{erl_func, "setClientData"}]}]},
  'GetCount','GetSelection','GetString','GetStringSelection',
  {'Insert',[{"clientData",[{skip_member, voidp}]}]},%'Number',
  'IsEmpty','Select','SetSelection','SetString','SetStringSelection'
 ]}.

{enum, wxItemKind, "wxITEM_"}.

{class, wxMenu, wxEvtHandler, [],
 ['wxMenu','~wxMenu',{'Append', [{"text",{def,none}}]},
  'AppendCheckItem','AppendRadioItem',
  'AppendSeparator','Break','Check','Delete','Destroy','Enable',
  {'FindItem', [{"menu",skip}]},'FindItemByPosition','GetHelpString','GetLabel',
  'GetMenuItemCount','GetMenuItems','GetTitle','Insert',
  'InsertCheckItem','InsertRadioItem','InsertSeparator','IsChecked',
  'IsEnabled','Prepend','PrependCheckItem','PrependRadioItem',
  'PrependSeparator','Remove','SetHelpString','SetLabel','SetTitle']}.

{class, wxMenuItem, object, [],
 [{'wxMenuItem',[{"isCheckable",skip_member}]},
  '~wxMenuItem','Check','Enable',
  %%'GetBackgroundColour', 
  'GetBitmap', %%'GetFont',
  'GetHelp','GetId','GetKind','GetLabel','GetLabelFromText', 
  %%'GetMarginWidth','GetTextColour',
  'GetMenu',%'GetName', class clash will not compile on windows
  'GetText',
  'GetSubMenu','IsCheckable','IsChecked','IsEnabled',
  'IsSeparator','IsSubMenu',
  %%'SetBackgroundColour',
  'SetBitmap', %%'SetBitmaps',%%'SetFont',
  'SetHelp','SetMenu','SetSubMenu','SetText'
  %%'SetTextColour',%'SetMarginWidth'
 ]}.

{class, wxToolBar, wxControl, [], 
 ['AddControl','AddSeparator','AddTool','AddCheckTool','AddRadioTool',
  {'AddStretchableSpace', [{test_if, "wxCHECK_VERSION(3,0,0)"}]},
  {'InsertStretchableSpace', [{test_if, "wxCHECK_VERSION(3,0,0)"}]},
  'DeleteTool','DeleteToolByPos','EnableTool','FindById','FindControl',
  'FindToolForPosition','GetToolSize','GetToolBitmapSize','GetMargins',
  %%'GetToolClientData' ,  %%'SetToolClientData',
  'GetToolEnabled','GetToolLongHelp','GetToolPacking',
  'GetToolPos','GetToolSeparation','GetToolShortHelp','GetToolState',
  'InsertControl','InsertSeparator','InsertTool',
  %%'OnLeftClick','OnMouseEnter','OnRightClick',
  'Realize','RemoveTool', %'SetBitmapResource',
  {'SetMargins',2},'SetToolBitmapSize', 
  'SetToolLongHelp',
  'SetToolPacking','SetToolShortHelp','SetToolSeparation','ToggleTool'
 ]}.

{class, wxStatusBarGeneric, wxWindow,
 [{alias, [{wxStatusBarGeneric, wxStatusBar}]}],
 [{'wxStatusBar',[{"size", skip_member}]},
  '~wxStatusBar',
  {'Create',[{"size", skip_member}]},
  {'GetFieldRect', [{"rect", out}]},
  'GetFieldsCount','GetStatusText','PopStatusText',
  'PushStatusText', 
  {'SetFieldsCount', [{"number", {def,none}},
		      {"widths", [{single, array}, {def, "(int *) NULL"}]}]},
  'SetMinHeight','SetStatusText',
  {'SetStatusWidths', [{"n",{c_only,{length,"widths_field"}}}]},
  {'SetStatusStyles', [{"n",{c_only,{length,"styles"}}}]}
 ]}.

{class, wxBitmap, object,[],
 [{'wxBitmap',[{"bits",[in,{base,binary}, {single,true}]},{{1,"bits"},skip_member}]},
  '~wxBitmap',%'AddHandler','CleanUpHandlers',
  'ConvertToImage',
  'CopyFromIcon','Create',%'FindHandler',
  'GetDepth','GetHeight',%'GetHandlers',
  'GetPalette',
  'GetMask','GetWidth','GetSubBitmap',
  %%'InitStandardHandlers','InsertHandler','RemoveHandler',
  'LoadFile','Ok','SaveFile','SetDepth',
  'SetHeight','SetMask','SetPalette',
  'SetWidth']}.

{class, wxIcon, wxBitmap,[],
 [%%{'wxIcon',[{"bits",[in,{base,binary}]}]},
  {'wxIcon',[{"bits",skip_member}]},  %% bits is char** in gtk and char[] in mac!!!
  'CopyFromBitmap','~wxIcon']}.

{class, wxIconBundle, root, [],
 ['wxIconBundle','~wxIconBundle','AddIcon',
 {'GetIcon', [{return, {by_val, true}}]}]}.

{class, wxCursor, wxBitmap,[], 
 [{'wxCursor',[{{func, 5}, [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
	       {"bits",[in,{base,binary},{single,true}]},
	       {"maskBits",nowhere},{"fg",nowhere},{"bg",nowhere}]},
  '~wxCursor','Ok']}.

{class, wxMask, object, [], ['wxMask','~wxMask','Create']}.

{class, wxImage, object, [{doc,"All (default) image handlers are initialized."}],
 [{'wxImage',[{"xpmData",skip_member},
	      {"data",[in,{base,binary}]},
	      {"alpha",[in,{base,binary}]},
	      {{4,pre_hook}, 
	       [{c, "if(!static_data) {"
		 "data = (unsigned char *) malloc(Ecmd.bin[0].size);"
		 "memcpy(data,Ecmd.bin[0].base,Ecmd.bin[0].size);}"}]},
	      {{5,pre_hook}, 
	       [{c, "if(!static_data) {"
		 " data = (unsigned char *) malloc(Ecmd.bin[0].size);"
		 " alpha = (unsigned char *) malloc(Ecmd.bin[1].size);"
		 " memcpy(data,Ecmd.bin[0].base,Ecmd.bin[0].size);"
		 " memcpy(alpha,Ecmd.bin[1].base,Ecmd.bin[1].size);}"}]}
	     ]},
  '~wxImage',%'AddHandler',
  'Blur','BlurHorizontal','BlurVertical', 
						%'CleanUpHandlers',%'ComputeHistogram',
  'ConvertAlphaToMask','ConvertToGreyscale',
  'ConvertToMono','Copy',
  {'Create',[{"xpmData",skip_member},
	     {"data",[in,{base,binary}]},
	     {"alpha",[in,{base,binary}]},
	     {{4,pre_hook}, 
	      [{c, "if(!static_data) {"
	       "data = (unsigned char *) malloc(Ecmd.bin[0].size);"
	       "memcpy(data,Ecmd.bin[0].base,Ecmd.bin[0].size);}"}]},
	     {{5,pre_hook}, 
	      [{c, "if(!static_data) {"
		" data =  (unsigned char *) malloc(Ecmd.bin[0].size);"
		" alpha = (unsigned char *) malloc(Ecmd.bin[1].size);"
		" memcpy(data,Ecmd.bin[0].base,Ecmd.bin[0].size);"
		" memcpy(alpha,Ecmd.bin[1].base,Ecmd.bin[1].size);}"}]}
	    ]},
  'Destroy','FindFirstUnusedColour', %  'FindHandler',
  'GetImageExtWildcard',
  {'GetAlpha',[{{0,return},{base,{binary,"(This->GetWidth()*This->GetHeight())"}}}]},
  'GetBlue',
  {'GetData', [{return,{base,{binary,"(This->GetWidth()*This->GetHeight()*3)"}}}]},
  'GetGreen',
  {'GetImageCount', [{"type", [{base, {enum, "wxBitmapType"}}]}]},
  %%'GetHandlers',
  'GetHeight','GetMaskBlue','GetMaskGreen',
  'GetMaskRed','GetOrFindMaskColour','GetPalette',
  'GetRed','GetSubImage', 'GetWidth',%%':HSVValue', 'HSVtoRGB',
  'HasAlpha','HasMask','GetOption','GetOptionInt','HasOption',
  'InitAlpha','InitStandardHandlers',%'InsertHandler',
  'IsTransparent', 'LoadFile','Ok',%%RGBValue 'RGBtoHSV',
  'RemoveHandler','Mirror','Replace',
  {'Rescale', [{"quality", [{base, {enum, "wxImageResizeQuality"}}]}]},
  'Resize',
  'Rotate', 'RotateHue',
  'Rotate90','SaveFile',
  {'Scale', [{"quality", [{base, {enum, "wxImageResizeQuality"}}]}]},
  'Size',
  {'SetAlpha', [{{2,"alpha"},[in,{base,binary}, {def, none}]},
		{{2,pre_hook}, 
		 [{c, "if(!static_data) {"
		   "alpha = (unsigned char *) malloc(Ecmd.bin[0].size);"
		   "memcpy(alpha,Ecmd.bin[0].base,Ecmd.bin[0].size);}"}]}
	       ]},
  {'SetData',  [{"data",[in,{base,binary}]},
		{pre_hook, 
		 [{c, "if(!static_data) {"
		   "data = (unsigned char *) malloc(Ecmd.bin[0].size);"
		   "memcpy(data,Ecmd.bin[0].base,Ecmd.bin[0].size);}"}]}
	       ]},
 'SetMask','SetMaskColour','SetMaskFromImage','SetOption',
  'SetPalette',
  'SetRGB']}.

{class, wxBrush, object, [],
 ['wxBrush','~wxBrush',
  {'GetColour', [{return, {by_val, true}}]},
  'GetStipple','GetStyle',
  'IsHatch','IsOk','SetColour','SetStipple','SetStyle']}.

{class, wxPen, object, [],
 ['wxPen','~wxPen','GetCap',
  {'GetColour', [{return, {by_val, true}}]},
  %%'GetDashes', %'GetStipple',
  'GetJoin', 'GetStyle','GetWidth','IsOk',
  {'SetCap', [{"capStyle", [{base, {enum, "wxPenCap"}}]}]},
  'SetColour',
  %%'SetDashes',  %'SetStipple',
  {'SetJoin', [{"joinStyle", [{base, {enum, "wxPenJoin"}}]}]}, 'SetStyle','SetWidth']}.

{enum, wxRegionContain, "wx"}.

{class, wxRegion, object, 
 [{skip, [{wxRegion,3}]}], % Hmm compiler can't handle that
 [{'wxRegion',[{"region", [skip_member]}]},
  '~wxRegion','Clear','Contains','ConvertToBitmap',
  {'GetBox',0},'Intersect','IsEmpty','Subtract','Offset',
  'Union','Xor']}.

{class, wxAcceleratorTable, object,
 [{skip, [{wxAcceleratorTable,1}]}],
 ['wxAcceleratorTable','~wxAcceleratorTable','Ok']}.

{class, wxAcceleratorEntry, root, [], 
 ['wxAcceleratorEntry','GetCommand','GetFlags','GetKeyCode','Set']}.

{class, wxCaret, root,
 [{skip, [{wxCaret,0}]}],
 ['wxCaret','~wxCaret','Create','GetBlinkTime','GetPosition','GetSize','GetWindow','Hide','IsOk',
  'IsVisible','Move','SetBlinkTime','SetSize','Show']}.

{enum, wxFlexSizerGrowMode, "wxFLEX_GROWMODE_"}.

{class, wxSizer, object, [],
 [{'Add',[{"item", skip_member}]},
  'AddSpacer','AddStretchSpacer','CalcMin','Clear','Detach','Fit','FitInside',
  'GetChildren',%'GetContainingWindow',
  'GetItem','GetSize','GetPosition','GetMinSize',
  'Hide','Insert','InsertSpacer','InsertStretchSpacer','IsShown','Layout','Prepend',
  'PrependSpacer','PrependStretchSpacer','RecalcSizes','Remove', 'Replace',
  'SetDimension','SetMinSize','SetItemMinSize','SetSizeHints',
  'SetVirtualSizeHints','Show']}.

{class, wxSizerFlags, root, [],
 ['wxSizerFlags','Align','Border','Center','Centre',%'DoubleBorder','DoubleHorzBorder',
  'Expand',%'GetDefaultBorder',
  'Left','Proportion','Right'%,'TripleBorder'
 ]}.

{class, wxSizerItem, object, [], 
 ['wxSizerItem','~wxSizerItem','CalcMin','DeleteWindows','DetachSizer','GetBorder',
  'GetFlag','GetMinSize','GetPosition','GetProportion','GetRatio','GetRect','GetSize',
  'GetSizer','GetSpacer','GetUserData','GetWindow','IsSizer','IsShown','IsSpacer',
  'IsWindow','SetBorder','SetDimension','SetFlag','SetInitSize','SetMinSize',
  'SetProportion','SetRatio','SetSizer','SetSpacer','SetWindow','Show']}.

{class,wxBoxSizer,wxSizer,[],['wxBoxSizer','GetOrientation']}.
{class,wxStaticBoxSizer,wxBoxSizer,[],['wxStaticBoxSizer','GetStaticBox']}.

{class,wxGridSizer,wxSizer,[],
 ['wxGridSizer','GetCols','GetHGap','GetRows','GetVGap','SetCols','SetHGap',
  'SetRows','SetVGap']}.

{class,wxFlexGridSizer,wxGridSizer,[],
 ['wxFlexGridSizer','AddGrowableCol','AddGrowableRow','GetFlexibleDirection',  
  'GetNonFlexibleGrowMode','RemoveGrowableCol','RemoveGrowableRow',
  'SetFlexibleDirection','SetNonFlexibleGrowMode']}.

{class,wxGridBagSizer,wxFlexGridSizer,[],
 ['wxGridBagSizer','Add','CalcMin','CheckForIntersection','FindItem',
  'FindItemAtPoint','FindItemAtPosition','FindItemWithData','GetCellSize',
  'GetEmptyCellSize','GetItemPosition','GetItemSpan',
  'SetEmptyCellSize','SetItemPosition','SetItemSpan']}.

{class,wxGBSizerItem,wxSizerItem,[],[]}.
%%  [{skip, [{'GetEndPos',3},{'GetPos',3},{'GetSpan',3}]}],
%%  ['wxGBSizerItem','GetEndPos','GetPos','GetSpan','Intersects','SetPos','SetSpan']}.

{class,wxStdDialogButtonSizer,wxBoxSizer,[],
 ['wxStdDialogButtonSizer','~wxStdDialogButtonSizer','AddButton','Realize',
  'SetAffirmativeButton','SetCancelButton','SetNegativeButton']}.

{enum, wxFontFamily, "wxFONTFAMILY_"}.
{enum, wxFontStyle,  "wxFONTSTYLE_"}.
{enum, wxFontEncoding,"wxFONTENCODING_"}.

{class, wxFont, object, [],
 [{'wxFont',[{"info", [skip_member]},{"family",{base,{enum,"wxFontFamily"}}},
	     {"style",{base,{enum,"wxFontStyle"}}}]},
  '~wxFont','IsFixedWidth','GetDefaultEncoding','GetFaceName',
  {'GetFamily',[{return, {base,{enum,"wxFontFamily"}}}]},
  'GetNativeFontInfoDesc','GetNativeFontInfoUserDesc','GetPointSize',
  {'GetStyle',[{return, {base,{enum,"wxFontStyle"}}}]},
  'GetUnderlined','GetWeight',%% {'New',[{"nativeFontDesc", [skip_member]}]},
  'Ok','SetDefaultEncoding','SetFaceName',
  {'SetFamily',[{"family", {base,{enum,"wxFontFamily"}}}]},
  %%'SetNativeFontInfo','SetNativeFontInfoUserDesc',
  'SetPointSize',
  {'SetStyle', [{"style", {base,{enum,"wxFontStyle"}}}]},
  'SetUnderlined','SetWeight']}.

{class, wxToolTip, object, [],
 ['Enable','SetDelay','wxToolTip','SetTip','GetTip','GetWindow']}.
{class, wxButton, wxControl, [], 
 ['wxButton','~wxButton','Create',%'GetLabel',
  'GetDefaultSize', 'SetDefault','SetLabel']}.
{class, wxBitmapButton, wxButton, [], 
 ['wxBitmapButton','~wxBitmapButton','Create',
  {'GetBitmapDisabled', [{return, {by_val, true}}]},
  {'GetBitmapFocus', [{return, {by_val, true}}]},
  {'GetBitmapLabel', [{return, {by_val, true}}]},
  {'GetBitmapSelected', [{return, {by_val, true}}]},
  'SetBitmapDisabled','SetBitmapFocus','SetBitmapLabel','SetBitmapSelected']}.
{class, wxToggleButton, wxControl, [], 
 ['wxToggleButton','~wxToggleButton','Create','GetValue','SetValue']}.

%%{enum, {"wxDateTime", "WeekDay"}, "wxDateTime::WeekDay"}.
{class, wxDateTime, root, [ignore], []}.  %% Only for ifdefs and enums

{class, wxCalendarCtrl, wxControl, [], 
 ['wxCalendarCtrl','Create','~wxCalendarCtrl','SetDate',
  {'GetDate', [{return, {by_val, true}}]},
  {'EnableYearChange', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]}, %% Temp bug in wx I assume
  'EnableMonthChange','EnableHolidayDisplay',
  'SetHeaderColours','GetHeaderColourFg','GetHeaderColourBg',
  'SetHighlightColours','GetHighlightColourFg','GetHighlightColourBg',
  'SetHolidayColours','GetHolidayColourFg','GetHolidayColourBg',
  'GetAttr','SetAttr','SetHoliday','ResetAttr',
  {'HitTest', [{"date", [out]}, {"wd", [out]}]}
 ]}.

{class, wxCalendarDateAttr, root, [], 
 ['wxCalendarDateAttr',
  'SetTextColour','SetBackgroundColour','SetBorderColour',
  'SetFont','SetBorder','SetHoliday',
  'HasTextColour','HasBackgroundColour','HasBorderColour',
  'HasFont','HasBorder','IsHoliday','GetTextColour',
  'GetBackgroundColour','GetBorderColour','GetFont','GetBorder']}.

{enum, wxCheckBoxState, "wxCHK_"}.

{class, wxCheckBox, wxControl, [], 
 ['wxCheckBox','~wxCheckBox','Create','GetValue','Get3StateValue',
  'Is3rdStateAllowedForUser','Is3State','IsChecked','SetValue',
  'Set3StateValue']}.
{class, wxCheckListBox, wxListBox, [{skip,[{wxCheckListBox,8}]}],
 [{'wxCheckListBox',[{"pos",{def, "wxDefaultPosition"}}, 
		     {"size",{def, "wxDefaultSize"}}, 
		     {"choices",{def, ""}}]},   
  '~wxCheckListBox','Check','IsChecked']}.
{class, wxChoice, wxControlWithItems, [{skip,[{wxChoice,8}, {'Create',9}]}], 
 [{'wxChoice', [{"pos",{def, "wxDefaultPosition"}}, 
		{"size",{def, "wxDefaultSize"}}, 
		{"choices",{def, ""}}]},
  '~wxChoice','Create','Delete','GetColumns',
  %%'GetCurrentSelection',
  'SetColumns']}.
{class, wxComboBox, wxControlWithItems, [{skip,[{wxComboBox,9},{'Create',10}]}], 
 [{'wxComboBox',
   [{"pos",{def, "wxDefaultPosition"}}, 
    {"size",{def, "wxDefaultSize"}}, 
    {"value", {def, "wxEmptyString"}},
    {"choices",{def, ""}}]},
  '~wxComboBox','Create','CanCopy','CanCut','CanPaste',
  'CanRedo','CanUndo','Copy','Cut','GetInsertionPoint','GetLastPosition',
  'GetValue','Paste','Redo','Replace','Remove','SetInsertionPoint',
  'SetInsertionPointEnd','SetSelection','SetValue','Undo']}.
{class, wxGauge, wxControl, [], 
 ['wxGauge','~wxGauge','Create','GetBezelFace','GetRange','GetShadowWidth',
  'GetValue','IsVertical','SetBezelFace','SetRange','SetShadowWidth','SetValue',
  'Pulse']}.
{class, wxGenericDirCtrl, wxControl, [], 
 ['wxGenericDirCtrl','~wxGenericDirCtrl','Create','Init','CollapseTree',
  'ExpandPath','GetDefaultPath','GetPath','GetFilePath', 'GetFilter',
  'GetFilterIndex',%'GetFilterListCtrl',
  'GetRootId','GetTreeCtrl',
  'ReCreateTree','SetDefaultPath','SetFilter','SetFilterIndex','SetPath']}.
%% {class, wxHtmlListBox, wxControl, [], []}.
{class, wxStaticBox, wxControl, [], ['wxStaticBox','~wxStaticBox','Create']}.
{class, wxStaticLine, wxControl, [], ['wxStaticLine','~wxStaticLine','Create',
				      'IsVertical', 'GetDefaultSize']}.

{enum, wxListColumnFormat, "wxLIST_"}.

{class, wxListBox, wxControlWithItems, 
 [{skip,[{wxListBox,8}, {'Create',9}, {'Set',4}]}], 
 [{'wxListBox',[{"pos",{def, "wxDefaultPosition"}}, 
		{"size",{def, "wxDefaultSize"}}, 
		{"choices",{def, ""}}]},
  '~wxListBox','Create','Deselect',{'GetSelections',[{"aSelections", [out]}]},
  {'InsertItems',2},'IsSelected',{'Set',[{"clientData",[nowhere]}, {"n", skip_member}]},
  'HitTest',
  'SetFirstItem']}.

{class, wxListCtrl, wxControl, [],
 [{'wxListCtrl', [{where, taylormade}]},
  '~wxListCtrl','Arrange','AssignImageList','ClearAll',
  {'Create',[{where, taylormade}]},
  'DeleteAllItems','DeleteColumn','DeleteItem',
  {'EditLabel',[{"textControlClass",nowhere}]},
  'EnsureVisible',
  {'FindItem',3},'GetColumn','GetColumnCount','GetColumnWidth','GetCountPerPage',
  'GetEditControl',
  'GetImageList','GetItem','GetItemBackgroundColour',
  'GetItemCount',{'GetItemData', [{return, {base,int}}]},
  'GetItemFont', {'GetItemPosition', [{"pos", out}]},{'GetItemRect',[{"rect", out}]},
  'GetItemSpacing','GetItemState',
  'GetItemText','GetItemTextColour',
  'GetNextItem','GetSelectedItemCount','GetTextColour','GetTopItem',
  'GetViewRect',{'HitTest',[{"pSubItem",nowhere}, {"flags", in}]},
  'InsertColumn','InsertItem',
  %%'OnGetItemAttr', 'OnGetItemImage','OnGetItemText',
  'RefreshItem','RefreshItems','ScrollList',
  'SetBackgroundColour','SetColumn','SetColumnWidth','SetImageList','SetItem',
  'SetItemBackgroundColour','SetItemCount','SetItemData','SetItemFont',
  'SetItemImage','SetItemColumnImage','SetItemPosition','SetItemState',
  'SetItemText','SetItemTextColour','SetSingleStyle','SetTextColour',
  'SetWindowStyleFlag',{'SortItems', [{where, taylormade}]}
 ]}.
{class, wxListView, wxControl, [],
 ['ClearColumnImage','Focus','GetFirstSelected','GetFocusedItem',
  'GetNextSelected','IsSelected','Select','SetColumnImage']}.

{class, wxListItem, object, [],
 ['wxListItem','~wxListItem','Clear','GetAlign','GetBackgroundColour','GetColumn', %'GetData',
  'GetFont','GetId','GetImage','GetMask','GetState',
  'GetText','GetTextColour','GetWidth','SetAlign','SetBackgroundColour',
  'SetColumn',%'SetData',
  'SetFont','SetId','SetImage','SetMask','SetState',
  'SetStateMask','SetText','SetTextColour','SetWidth']}.

{class, wxListItemAttr, root, [],
 ['wxListItemAttr','~wxListItemAttr',
  'GetBackgroundColour', 'GetFont',
  'GetTextColour', 'HasBackgroundColour', 'HasFont',
  'HasTextColour', 'SetBackgroundColour', 'SetFont', 'SetTextColour'
 ]}.

{class, wxImageList, object, [{skip, [{'Create',1}]}], %% No create/0 on windows
 ['wxImageList','~wxImageList','Add','Create','Draw','GetBitmap','GetIcon','GetImageCount',
  'GetSize','Remove','RemoveAll','Replace']}.

{enum, wxTextAttrAlignment, "wxTEXT_ALIGNMENT_"}.

{class, wxTextAttr, root, [], 
 ['wxTextAttr','GetAlignment','GetBackgroundColour',
  {'GetFont', [{return, {by_val, true}}]},
  'GetLeftIndent','GetLeftSubIndent','GetRightIndent','GetTabs','GetTextColour',
  'HasBackgroundColour','HasFont','HasTextColour','GetFlags','IsDefault',
  'SetAlignment','SetBackgroundColour','SetFlags','SetFont','SetLeftIndent',
  'SetRightIndent','SetTabs','SetTextColour']}.

{class, wxTextCtrl, wxControl, [],
 ['wxTextCtrl','~wxTextCtrl','AppendText','CanCopy','CanCut','CanPaste',
  'CanRedo','CanUndo','Clear','Copy','Create','Cut','DiscardEdits',
  'ChangeValue',
  'EmulateKeyPress','GetDefaultStyle','GetInsertionPoint','GetLastPosition',
  'GetLineLength','GetLineText','GetNumberOfLines','GetRange','GetSelection',
  'GetStringSelection','GetStyle','GetValue',%'HitTest', %no Mac
  'IsEditable',
  'IsModified','IsMultiLine','IsSingleLine','LoadFile','MarkDirty',
  %%'OnDropFiles',
  'Paste','PositionToXY','Redo','Remove','Replace',
  'SaveFile','SetDefaultStyle','SetEditable','SetInsertionPoint',
  'SetInsertionPointEnd','SetMaxLength','SetSelection','SetStyle',
  'SetValue','ShowPosition','Undo','WriteText','XYToPosition']}.

{class,wxNotebook, wxControl, [], 
 ['wxNotebook','~wxNotebook','AddPage','AdvanceSelection',
  'AssignImageList','Create','DeleteAllPages',
  %% Remove 'page' only defined for motif
  {'DeletePage', [{"page", skip_member}]},  {'RemovePage', [{"page", skip_member}]},
  'GetCurrentPage','GetImageList','GetPage','GetPageCount',
  'GetPageImage','GetPageText','GetRowCount','GetSelection',
  'GetThemeBackgroundColour',
  'HitTest', 
  'InsertPage',
  %%'OnSelChange', callback
  'SetImageList','SetPadding','SetPageSize',
  'SetPageImage','SetPageText','SetSelection','ChangeSelection']}.

{class,wxChoicebook, wxControl, [], 
 ['wxChoicebook','~wxChoicebook','AddPage','AdvanceSelection',
  'AssignImageList','Create','DeleteAllPages',
  %% Remove 'page' only defined for motif
  {'DeletePage', [{"page", skip_member}]},  {'RemovePage', [{"page", skip_member}]},
  'GetCurrentPage','GetImageList','GetPage','GetPageCount',
  'GetPageImage','GetPageText',
  %% NOTEBOOK ONLY? 'GetRowCount', 'GetThemeBackgroundColour','SetPadding'
  'GetSelection',
  'HitTest', 
  'InsertPage',
  %%'OnSelChange', callback
  'SetImageList','SetPageSize',
  'SetPageImage','SetPageText','SetSelection','ChangeSelection']}.

{class,wxToolbook, wxControl, [], 
 ['wxToolbook','~wxToolbook','AddPage','AdvanceSelection',
  'AssignImageList','Create','DeleteAllPages',
  %% Remove 'page' only defined for motif
  {'DeletePage', [{"page", skip_member}]},  {'RemovePage', [{"page", skip_member}]},
  'GetCurrentPage','GetImageList','GetPage','GetPageCount',
  'GetPageImage','GetPageText',
  %% NOTEBOOK ONLY? 'GetRowCount', 'GetThemeBackgroundColour','SetPadding'
  'GetSelection',
  'HitTest', 
  'InsertPage',
  %%'OnSelChange', callback
  'SetImageList','SetPageSize',
  'SetPageImage','SetPageText','SetSelection','ChangeSelection']}.

{class,wxListbook, wxControl, [], 
 ['wxListbook','~wxListbook','AddPage','AdvanceSelection',
  'AssignImageList','Create','DeleteAllPages',
  %% Remove 'page' only defined for motif
  {'DeletePage', [{"page", skip_member}]},  {'RemovePage', [{"page", skip_member}]},
  'GetCurrentPage','GetImageList','GetPage','GetPageCount',
  'GetPageImage','GetPageText',
  %% NOTEBOOK ONLY? 'GetRowCount', 'GetThemeBackgroundColour','SetPadding'
  'GetSelection',
  'HitTest', 
  'InsertPage',
  %%'OnSelChange', callback
  'SetImageList','SetPageSize',
  'SetPageImage','SetPageText','SetSelection','ChangeSelection']}.

{class,wxTreebook, wxControl, [], 
 ['wxTreebook','~wxTreebook','AddPage','AdvanceSelection',
  'AssignImageList','Create','DeleteAllPages',
  %% Remove 'page' only defined for motif
  {'DeletePage', [{"page", skip_member}]},  {'RemovePage', [{"page", skip_member}]},
  'GetCurrentPage','GetImageList','GetPage','GetPageCount',
  'GetPageImage','GetPageText',
  %% NOTEBOOK ONLY? 'GetRowCount', 'GetThemeBackgroundColour','SetPadding'
  'GetSelection',
  'ExpandNode', 'IsNodeExpanded', 
  'HitTest', 
  'InsertPage','InsertSubPage',
  %%'OnSelChange', callback
  'SetImageList','SetPageSize',
  'SetPageImage','SetPageText','SetSelection','ChangeSelection']}.


{enum, wxTreeItemIcon, "wxTreeItemIcon_"}.

{class, wxTreeCtrl, wxControl,
 [{doc,
   "Note: The representation of treeItemId() have changed "
   "from the original class implementation to be an semi-opaque type,"
   "Equality between TreeItemId's can be tested and zero means that the TreeItem is invalid."
  }],
 ['wxTreeCtrl','~wxTreeCtrl','AddRoot','AppendItem',
  %% Not on Windows 'AssignButtonsImageList','GetButtonsImageList','SetButtonsImageList' 
  'AssignImageList','AssignStateImageList','Collapse','CollapseAndReset',
  'Create','Delete','DeleteAllItems','DeleteChildren',
  {'EditLabel', [{"textCtrlClass", [nowhere]}]}, %'EndEditLabel',
  'EnsureVisible','Expand',{'GetBoundingRect', [{"rect", [out]}]},
  'GetChildrenCount','GetCount','GetEditControl',
  {'GetFirstChild',[{"cookie", out}]}, {'GetNextChild',[{"cookie", [both]}]},
  'GetFirstVisibleItem',{'GetImageList',0},'GetIndent',
  'GetItemBackgroundColour','GetItemData','GetItemFont','GetItemImage',
  'GetItemText','GetItemTextColour','GetLastChild',
  'GetNextSibling','GetNextVisible','GetItemParent',%'GetParent',
  'GetPrevSibling','GetPrevVisible','GetRootItem',
  'GetSelection',{'GetSelections', [{return, nowhere},{"val",out}]},
  'GetStateImageList', {{'HitTest', 2}, [{"flags", out}]},
  {'InsertItem',[{"insertAfter", skip_member}]},
  'IsBold','IsExpanded','IsSelected','IsVisible','ItemHasChildren',
  {'IsTreeItemIdOk', [{where, taylormade}]},
  %%'OnCompareItems',
  'PrependItem','ScrollTo','SelectItem',
  'SetIndent',{'SetImageList',1},'SetItemBackgroundColour',
  'SetItemBold','SetItemData','SetItemDropHighlight','SetItemFont',
  'SetItemHasChildren','SetItemImage','SetItemText',
  'SetItemTextColour','SetStateImageList','SetWindowStyle',{'SortChildren',1},
  'Toggle','ToggleItemSelection','Unselect','UnselectAll','UnselectItem']}.

{class, wxScrollBar, wxControl, [],
 ['wxScrollBar','~wxScrollBar','Create','GetRange','GetPageSize',
  'GetThumbPosition','GetThumbSize','SetThumbPosition','SetScrollbar']}.
{class, wxSpinButton, wxControl, [],
 ['wxSpinButton','~wxSpinButton','Create','GetMax','GetMin','GetValue','SetRange','SetValue']}.
{class, wxSpinCtrl, wxControl, [], 
 ['wxSpinCtrl','Create','SetValue','GetValue','SetRange','SetSelection','GetMin','GetMax']}.

{class, wxStaticText, wxControl, [], 
 ['wxStaticText','Create','GetLabel','SetLabel','Wrap']}.
{class, wxStaticBitmap, wxControl, [], 
 ['wxStaticBitmap','Create','GetBitmap','SetBitmap'
  %%wxStaticIcon::GetIcon wxStaticIcon::SetIcon
 ]}.
{class, wxRadioBox, wxControl, [], 
 [{'wxRadioBox',9},'~wxRadioBox',{'Create',9},'Enable',
  'GetSelection','GetString', 'SetSelection','Show',
  'GetColumnCount','GetItemHelpText','GetItemToolTip','GetItemFromPoint',
  'GetRowCount', 'IsItemEnabled','IsItemShown','SetItemHelpText','SetItemToolTip'
 ]}.
{class, wxRadioButton, wxControl, [], 
 ['wxRadioButton','~wxRadioButton','Create','GetValue','SetValue']}.

{class, wxSlider, wxControl, [], 
 ['wxSlider','~wxSlider', %'ClearSel','ClearTicks',
  'Create','GetLineSize','GetMax','GetMin',
  'GetPageSize',%'GetSelEnd','GetSelStart',
  'GetThumbLength',%'GetTickFreq',
  'GetValue',
  'SetLineSize','SetPageSize','SetRange',%'SetSelection',
  'SetThumbLength',%'SetTick',  'SetTickFreq',
  'SetValue']}.

{class, wxDialog, wxTopLevelWindow, [], 
 ['wxDialog','~wxDialog',%'Centre',
  'Create','CreateButtonSizer',
  'CreateStdDialogButtonSizer',%'DoOK',
  'EndModal','GetAffirmativeId',
  'GetReturnCode', %'GetTitle','GetToolBar','Iconize','IsIconized',
  'IsModal',
  %%'OnApply','OnCancel','OnOK', 'OnSysColourChanged',
  'SetAffirmativeId', %'SetIcon','SetIcons','SetTitle',
  %% 'SetModal', Deprecated
  'SetReturnCode','Show','ShowModal']}.

{class, wxColourDialog, wxDialog, [], 
 ['wxColourDialog','~wxColourDialog','Create','GetColourData']}.

{class, wxColourData, object, [], 
 ['wxColourData','~wxColourData','GetChooseFull','GetColour','GetCustomColour',
  'SetChooseFull','SetColour','SetCustomColour']}.

{class, wxPalette, object, [], 
 [{'wxPalette',[{"n", {c_only,{size,0}}},{"red",[in,{base,binary}]},
		{"green", [in,{base,binary}]},{"blue", [in,{base,binary}]}]},
  '~wxPalette',
  {'Create', [{"n", {c_only,{size,0}}},{"red",[in,{base,binary}]},
	      {"green", [in,{base,binary}]},{"blue", [in,{base,binary}]}]},
  'GetColoursCount','GetPixel',
  'GetRGB',
  'IsOk']}.

{class, wxGenericDirDialog, wxDialog, 
 [{alias, [{wxGenericDirDialog,wxDirDialog}]}, {skip, [{wxDirDialog,0}]}], 
 ['wxDirDialog','~wxDirDialog','GetPath','GetMessage','SetMessage',
  'SetPath']}.

{class, wxFileDialog, wxDialog, [{skip, [{wxFileDialog,0}]}], 
 ['wxFileDialog','~wxFileDialog','GetDirectory','GetFilename',
  {'GetFilenames',[{"files", out}]},
  'GetFilterIndex','GetMessage','GetPath',
  {'GetPaths', [{"paths", out}]},
  'GetWildcard',
  'SetDirectory','SetFilename','SetFilterIndex','SetMessage','SetPath',
  'SetWildcard']}.

%% {class, wxGenericFileDialog, wxDialog, [], 
%%  ['wxFileDialog','~wxFileDialog','GetDirectory','GetFilename','GetFilenames',
%%   'GetFilterIndex','GetMessage','GetPath','GetPaths','GetStyle','GetWildcard',
%%   'SetDirectory','SetFilename','SetFilterIndex','SetMessage','SetPath','SetStyle',
%%   'SetWildcard']}.

{class, wxPickerBase, wxControl, [], 
 ['SetInternalMargin','GetInternalMargin','SetTextCtrlProportion',
  'SetPickerCtrlProportion','GetTextCtrlProportion','GetPickerCtrlProportion',
  'HasTextCtrl','GetTextCtrl','IsTextCtrlGrowable','SetPickerCtrlGrowable',
  'SetTextCtrlGrowable','IsPickerCtrlGrowable']}.

{class, wxFilePickerCtrl, wxPickerBase, [], 
 ['wxFilePickerCtrl','Create','GetPath','SetPath']}.

{class, wxDirPickerCtrl, wxPickerBase, [], 
 ['wxDirPickerCtrl','Create','GetPath','SetPath']}.

{class, wxColourPickerCtrl, wxPickerBase, [],
 ['wxColourPickerCtrl','Create','GetColour','SetColour']}.

{class, wxDatePickerCtrl, wxPickerBase, [],
 ['wxDatePickerCtrl',  %'Create',  
  'GetRange',  'GetValue', %'SetFormat', Not always available 
  'SetRange',  'SetValue']}.

{class, wxFontPickerCtrl, wxPickerBase,  [],
 ['wxFontPickerCtrl','Create','GetSelectedFont','SetSelectedFont',
  'GetMaxPointSize','SetMaxPointSize']}.

{class, wxGenericFindReplaceDialog, wxDialog, 
 [{alias, [{wxGenericFindReplaceDialog,wxFindReplaceDialog}]}], 
 ['wxFindReplaceDialog','~wxFindReplaceDialog','Create','GetData']}.

{class, wxFindReplaceData, object, [], 
 ['wxFindReplaceData','~wxFindReplaceData','GetFindString','GetReplaceString',
  'GetFlags','SetFlags','SetFindString','SetReplaceString']}.

{class, wxMultiChoiceDialog, wxDialog, [{skip, [{wxMultiChoiceDialog, 7}]}], 
 ['wxMultiChoiceDialog','GetSelections','SetSelections']}.
{class, wxSingleChoiceDialog, wxDialog, [{skip, [{wxSingleChoiceDialog, 8}]}], 
 [{'wxSingleChoiceDialog', [{"clientData", [skip,in]}]},
  'GetSelection', %% 'GetSelectionClientData', obsolete
  'GetStringSelection','SetSelection']}.

{class, wxTextEntryDialog, wxDialog, [], 
 ['wxTextEntryDialog','~wxTextEntryDialog','GetValue','SetValue']}.

{class, wxPasswordEntryDialog, wxTextEntryDialog, [], ['wxPasswordEntryDialog']}.

{class, wxFontData, object, [], 
 ['wxFontData','~wxFontData',
  'EnableEffects','GetAllowSymbols','GetColour','GetChosenFont',
  'GetEnableEffects','GetInitialFont','GetShowHelp','SetAllowSymbols',
  'SetChosenFont','SetColour','SetInitialFont','SetRange','SetShowHelp']}.

{class, wxFontDialog, wxDialog, 
 [{skip, [{'wxFontDialog',1}, {'Create',2}]}],  %% Not available on Mac!!
 ['wxFontDialog','Create','GetFontData']}.

{class, wxProgressDialog, wxDialog, [], 
 ['wxProgressDialog','~wxProgressDialog','Resume',{'Update', [{"skip", nowhere}]}]}.
{class, wxMessageDialog, wxDialog, [], 
 ['wxMessageDialog', '~wxMessageDialog']}.

{enum, wxPrintBin, "wxPRINTBIN_"}.
{enum, wxDuplexMode, "wxDUPLEX_"}.
{enum, wxPrintMode, "wxPRINT_MODE_"}.
%%{enum, wxPaperSize,"wxPAPER_"}.

{class, wxPageSetupDialog, object, [], 
 ['wxPageSetupDialog','~wxPageSetupDialog','GetPageSetupData', 'ShowModal']}.

{class, wxPageSetupDialogData, object, [], 
 ['wxPageSetupDialogData','~wxPageSetupDialogData','EnableHelp','EnableMargins',
  'EnableOrientation','EnablePaper','EnablePrinter','GetDefaultMinMargins',
  'GetEnableMargins','GetEnableOrientation','GetEnablePaper','GetEnablePrinter',
  'GetEnableHelp','GetDefaultInfo','GetMarginTopLeft','GetMarginBottomRight',
  'GetMinMarginTopLeft','GetMinMarginBottomRight','GetPaperId','GetPaperSize',
  'GetPrintData','IsOk','SetDefaultInfo','SetDefaultMinMargins','SetMarginTopLeft',
  'SetMarginBottomRight','SetMinMarginTopLeft','SetMinMarginBottomRight',
  'SetPaperId','SetPaperSize','SetPrintData']}.
{class, wxPrintDialog, wxDialog, [], 
 ['wxPrintDialog','~wxPrintDialog','GetPrintDialogData','GetPrintDC']}.
{class,wxPrintDialogData, object, [], 
 ['wxPrintDialogData','~wxPrintDialogData','EnableHelp','EnablePageNumbers',
  'EnablePrintToFile','EnableSelection','GetAllPages','GetCollate','GetFromPage',
  'GetMaxPage','GetMinPage','GetNoCopies','GetPrintData','GetPrintToFile',
  'GetSelection','GetToPage','IsOk','SetCollate','SetFromPage','SetMaxPage',
  'SetMinPage','SetNoCopies','SetPrintData','SetPrintToFile','SetSelection',
  %%'SetSetupDialog', not found
  'SetToPage']}.

{class, wxPrintData, object, [],
 ['wxPrintData','~wxPrintData','GetCollate','GetBin','GetColour',
  'GetDuplex','GetNoCopies','GetOrientation','GetPaperId','GetPrinterName',
  'GetQuality','IsOk','SetBin','SetCollate','SetColour','SetDuplex','SetNoCopies',
  'SetOrientation','SetPaperId','SetPrinterName','SetQuality']}.

{class, wxPrintPreview, object, [], 
 ['wxPrintPreview','~wxPrintPreview','GetCanvas','GetCurrentPage',
  'GetFrame','GetMaxPage','GetMinPage','GetPrintout','GetPrintoutForPrinting',
  'IsOk','PaintPage','Print','RenderPage','SetCanvas','SetCurrentPage',
  'SetFrame','SetPrintout','SetZoom']}.

{class, wxPreviewFrame, wxFrame, [],
 ['wxPreviewFrame','~wxPreviewFrame','CreateControlBar','CreateCanvas',
  'Initialize','OnCloseWindow']}.

{class, wxPreviewControlBar, wxPanel, [],
['wxPreviewControlBar','~wxPreviewControlBar','CreateButtons','GetPrintPreview',
 'GetZoomControl','SetZoomControl']}.

{class, wxPreviewCanvas, wxScrolledWindow, [], []}.

{class, wxPrinter, object, [],
 ['wxPrinter','CreateAbortWindow','GetAbort','GetLastError',
  'GetPrintDialogData','Print','PrintDialog','ReportError','Setup']}.
  
{class, wxXmlResource, object, [], 
 ['wxXmlResource', '~wxXmlResource', 
  %%'AddHandler', removed wxXmlResourceHandler is not implemented yet
  'AttachUnknownControl', 
  'ClearHandlers', 'CompareVersion', 
  'Get', 'GetFlags', 'GetVersion', 
  {'GetXRCID', [{"str_id", [{single, array}]}]},
  'InitAllHandlers', 'Load', 
  'LoadBitmap', 'LoadDialog', 'LoadFrame', 'LoadIcon', 'LoadMenu', 'LoadMenuBar', 'LoadPanel', 
  'LoadToolBar', 'Set', 'SetFlags', 'Unload',
  {xrcctrl,[{where, taylormade}]}
  %,{'GetDomain', [{return, [{single, array}]}]}, 'SetDomain'
  ]}.

{class, wxHtmlEasyPrinting, object, [],
 ['wxHtmlEasyPrinting','~wxHtmlEasyPrinting',
  %'GetParentWindow',  Not found
  'GetPrintData','GetPageSetupData','PreviewFile',
  'PreviewText','PrintFile','PrintText','PageSetup',
  {'SetFonts',[{"sizes", [{single, array}, {def, "(int *) NULL"}]}]},
  'SetHeader','SetFooter'%,'SetParentWindow'
 ]}.

%%{class, wxVListBox, wxControl, [], []}.

{class, wxGLCanvas, wxWindow, 
 [{skip, [{'SetCurrent', 2}]}], %% NA MAC
 [{'wxGLCanvas', [{"attribList", [in, {single,array}]}]},
  'GetContext',
  {'SetCurrent', [{post_hook,[{c, "if(This->GetContext()) setActiveGL(Ecmd.caller,This)"},
			      {erl, "{ok, _} = wxe_master:init_opengl(),"}]}]},
  %%{'SetColour', [{"colour", [in, {single,array}]}]},
  'SwapBuffers']}.

%% {class, wxGLContext, wxWindow, [],  %% NA MAC or rather looks different on mac FIXME
%%  ['wxGLContext','SetCurrent']}.

{class, wxAuiManager, wxEvtHandler, [{ifdef, wxUSE_AUI}],
 ['wxAuiManager','~wxAuiManager','AddPane','DetachPane','GetAllPanes',
  'GetArtProvider','GetDockSizeConstraint','GetFlags','GetManagedWindow',
  'GetManager','GetPane','HideHint','InsertPane','LoadPaneInfo',
  'LoadPerspective',%'ProcessDockResult',  Protected can be derived
  'SavePaneInfo','SavePerspective',
  'SetArtProvider','SetDockSizeConstraint','SetFlags','SetManagedWindow',
  'ShowHint','UnInit','Update']}.

{class, wxAuiPaneInfo, root,
 [{ifdef, wxUSE_AUI}],
 [
  wxAuiPaneInfo,'~wxAuiPaneInfo', 
  'BestSize','Bottom','BottomDockable','Caption','CaptionVisible',
  'Centre','CentrePane','CloseButton','DefaultPane','DestroyOnClose',
  'Direction','Dock',%'DockFixed',
  'Dockable','Fixed','Float',
  'Floatable','FloatingPosition','FloatingSize','Gripper','GripperTop',
  'HasBorder','HasCaption','HasCloseButton','HasFlag',
  'HasGripper','HasGripperTop','HasMaximizeButton','HasMinimizeButton',
  'HasPinButton','Hide','IsBottomDockable','IsDocked','IsFixed',
  'IsFloatable','IsFloating','IsLeftDockable','IsMovable','IsOk',
  'IsResizable','IsRightDockable','IsShown','IsToolbar','IsTopDockable',
  'Layer','Left','LeftDockable','MaxSize','MaximizeButton',
  'MinSize','MinimizeButton','Movable','Name',
  'PaneBorder','PinButton','Position','Resizable','Right',
  'RightDockable','Row','SafeSet','SetFlag','Show','ToolbarPane',
  'Top','TopDockable','Window',
  %% Extended func
  %% These are not initilized by default and thus cause crashes
  %% {'GetName',
  %%  [{pre_hook, [{c, "#if 0\n"}]},
  %%   {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxString Result = This->name"}]}]},
  %% {'GetCaption',
  %%  [{pre_hook, [{c, "#if 0\n"}]},
  %%   {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxString Result = This->caption"}]}]},
  %% {'GetIcon',
  %%  [{pre_hook, [{c, "#if 0\n"}]},
  %%   {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxIcon Result = This->icon"}]}]},
  {'GetWindow',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxWindow* Result = This->window"}]}]},
  {'GetFrame',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxFrame* Result = This->frame"}]}]},
  {'GetDirection',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n int Result = This->dock_direction"}]}]},
  {'GetLayer',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n int Result = This->dock_layer"}]}]},
  {'GetRow',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n int Result = This->dock_row"}]}]},
  {'GetPosition',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n int Result = This->dock_pos"}]}]},
  {'GetFloatingPosition',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxPoint Result = This->floating_pos"}]}]},
  {'GetFloatingSize',
   [{pre_hook, [{c, "#if 0\n"}]},
    {post_hook, [{c, "#endif\n if(!This) throw wxe_badarg(0);\n wxSize Result = This->floating_size"}]}]}

]}.

{class, wxAuiNotebook, wxControl, [{ifdef, wxUSE_AUI}], 
 ['wxAuiNotebook','AddPage',%'AdvanceSelection',
  'Create','DeletePage',
  'GetArtProvider',%%'GetHeightForPageHeight','GetTabCtrlHeight', not found
  'GetPage','GetPageBitmap',
  'GetPageCount','GetPageIndex','GetPageText','GetSelection',
  'InsertPage','RemovePage','SetArtProvider',
  'SetFont',%'SetNormalFont','SetSelectedFont','SetMeasuringFont',not found
  'SetPageBitmap','SetPageText','SetSelection','SetTabCtrlHeight',
  'SetUniformBitmapSize'%,'ShowWindowMenu'
 ]}.

{class,wxAuiTabArt, root, [{ifdef, wxUSE_AUI}], 
 [% Pure virtual funcs
  %'Clone','DrawBackground','DrawButton','DrawTab','GetBestTabCtrlSize',
  %'GetIndentSize','GetTabSize','SetFlags','SetMeasuringFont',
  %'SetNormalFont','SetSelectedFont','SetSizingInfo'%,'ShowWindowList'
  'SetFlags', 'SetMeasuringFont', 'SetNormalFont', 'SetSelectedFont',
  {'SetColour',       [{test_if, "wxCHECK_VERSION(3,0,0)"}]},
  {'SetActiveColour', [{test_if, "wxCHECK_VERSION(3,0,0)"}]}
 ]}.

{class,wxAuiDockArt, root, [{ifdef, wxUSE_AUI}], 
 [%% 'wxAuiDockArt','~wxAuiDockArt' %,
  %%'DrawBackground','DrawBorder','DrawCaption',  %% Pure virtual funcs
  %%'DrawGripper','DrawPaneButton','DrawSash',
  'GetColour','GetFont','GetMetric','SetColour','SetFont','SetMetric'
 ]}.

{class,wxAuiSimpleTabArt, wxAuiTabArt, [{ifdef, wxUSE_AUI}],
 [wxAuiSimpleTabArt]}.


{class, wxMDIParentFrame, wxFrame, [], 
 [
  'wxMDIParentFrame',
  '~wxMDIParentFrame', 'ActivateNext', 'ActivatePrevious',
  'ArrangeIcons', 'Cascade', 'Create', 
  %%'GetClientSize', 'GetToolBar', 'SetToolBar',  defined in parent
  'GetActiveChild', 'GetClientWindow', 
  %% 'GetWindowMenu',  'SetWindowMenu', windows only
  %%'OnCreateClient', 
  'Tile']}.

{class, wxMDIChildFrame, wxFrame, [], 
 ['wxMDIChildFrame','~wxMDIChildFrame','Activate','Create','Maximize','Restore']}.

{class, wxMDIClientWindow, wxWindow, [],
 [{'wxMDIClientWindow', [{{func, 2}, [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]}]},
  '~wxMDIClientWindow','CreateClient']}.

{class, wxLayoutAlgorithm, object, [],
 ['wxLayoutAlgorithm', '~wxLayoutAlgorithm', 
  'LayoutFrame', 'LayoutMDIFrame', 'LayoutWindow']}.

%%%% EVENT's

{class, wxEvent, object, [], 
 [%%'wxEvent','m','propagationLevel','Clone','GetEventObject','GetEventType',
  'GetId','GetSkipped',
  {'GetTimestamp', [{return, [{mod,[unsigned]}]}]},
  'IsCommandEvent','ResumePropagation',
  %% 'SetEventObject','SetEventType','SetId','SetTimestamp',
  'ShouldPropagate','Skip','StopPropagation'
 ]}.

{class, wxCommandEvent, wxEvent, 
 [{acc, [{m_cmdString, "GetString()"}, 
	 {m_commandInt, "GetInt()"}, {m_extraLong,"GetExtraLong()"}]}, 
  {event,
   [wxEVT_COMMAND_BUTTON_CLICKED,wxEVT_COMMAND_CHECKBOX_CLICKED,
    wxEVT_COMMAND_CHOICE_SELECTED,wxEVT_COMMAND_LISTBOX_SELECTED,
    wxEVT_COMMAND_LISTBOX_DOUBLECLICKED,wxEVT_COMMAND_TEXT_UPDATED,
    wxEVT_COMMAND_TEXT_ENTER,wxEVT_COMMAND_MENU_SELECTED,
    wxEVT_COMMAND_SLIDER_UPDATED,wxEVT_COMMAND_RADIOBOX_SELECTED,
    wxEVT_COMMAND_RADIOBUTTON_SELECTED,wxEVT_COMMAND_SCROLLBAR_UPDATED,
    wxEVT_COMMAND_VLBOX_SELECTED,wxEVT_COMMAND_COMBOBOX_SELECTED,
    %% wxEVT_COMMAND_TOOL_CLICKED, This the exactly the same as command_menu_selected
    %% I can't differ them
    wxEVT_COMMAND_TOOL_RCLICKED,
    wxEVT_COMMAND_TOOL_ENTER, wxEVT_COMMAND_CHECKLISTBOX_TOGGLED,
    wxEVT_COMMAND_TOGGLEBUTTON_CLICKED,
    wxEVT_COMMAND_LEFT_CLICK,wxEVT_COMMAND_LEFT_DCLICK,wxEVT_COMMAND_RIGHT_CLICK,
    wxEVT_COMMAND_SET_FOCUS, wxEVT_COMMAND_KILL_FOCUS,
    wxEVT_COMMAND_ENTER
   ]}],
 [{'GetClientObject',[{erl_func, "getClientData"}]},
  'GetExtraLong','GetInt','GetSelection','GetString','IsChecked',
  'IsSelection',%'SetClientData','SetClientObject','SetExtraLong',
  'SetInt','SetString'
 ]}.

{class, wxScrollEvent, wxCommandEvent, 
 [{acc, [{m_commandInt, "GetPosition()"}, {m_extraLong, "GetOrientation()"}]},
  {mixed_event, wxSpinEvent},  
  {event,
   [wxEVT_SCROLL_TOP,wxEVT_SCROLL_BOTTOM,wxEVT_SCROLL_LINEUP,
    wxEVT_SCROLL_LINEDOWN,wxEVT_SCROLL_PAGEUP,
    wxEVT_SCROLL_PAGEDOWN,wxEVT_SCROLL_THUMBTRACK,
    wxEVT_SCROLL_THUMBRELEASE,wxEVT_SCROLL_CHANGED]}],
 ['GetOrientation','GetPosition']}.
{class, wxScrollWinEvent,wxEvent, 
 [{acc, [{m_commandInt, "GetPosition()"}, {m_extraLong, "GetOrientation()"}]},
  {event,
   [wxEVT_SCROLLWIN_TOP,wxEVT_SCROLLWIN_BOTTOM,wxEVT_SCROLLWIN_LINEUP,
    wxEVT_SCROLLWIN_LINEDOWN,wxEVT_SCROLLWIN_PAGEUP,
    wxEVT_SCROLLWIN_PAGEDOWN,wxEVT_SCROLLWIN_THUMBTRACK,
    wxEVT_SCROLLWIN_THUMBRELEASE]}],
 ['GetOrientation','GetPosition']}.

{class, wxMouseEvent, wxEvent, 
 [{event,
   [wxEVT_LEFT_DOWN,wxEVT_LEFT_UP,wxEVT_MIDDLE_DOWN,wxEVT_MIDDLE_UP,
    wxEVT_RIGHT_DOWN,wxEVT_RIGHT_UP,wxEVT_MOTION,wxEVT_ENTER_WINDOW,
    wxEVT_LEAVE_WINDOW,wxEVT_LEFT_DCLICK,wxEVT_MIDDLE_DCLICK,
    wxEVT_RIGHT_DCLICK,wxEVT_MOUSEWHEEL]}],
 ['AltDown','Button','ButtonDClick','ButtonDown','ButtonUp','CmdDown','ControlDown',
  'Dragging',  'Entering',  'GetButton',  'GetPosition',  'GetLogicalPosition',
  'GetLinesPerAction',  'GetWheelRotation',  'GetWheelDelta',  'GetX',  'GetY',
  'IsButton',  'IsPageScroll',  'Leaving',  
  'LeftDClick',  'LeftDown', 'LeftIsDown',  'LeftUp',  
  'MetaDown',  
  'MiddleDClick',  'MiddleDown', 'MiddleIsDown',  'MiddleUp',  
  'Moving',  
  'RightDClick',  'RightDown', 'RightIsDown',  'RightUp',  
  'ShiftDown'
 ]}.

{class, wxSetCursorEvent, wxEvent,
 [{acc, [{m_x, "GetX()"}, {m_y, "GetY()"}, {m_cursor, "GetCursor()"}]},
  {event,[wxEVT_SET_CURSOR]}],
 ['GetCursor','GetX','GetY','HasCursor','SetCursor']}.

{class, wxKeyEvent, wxEvent, 
 [{event,[wxEVT_CHAR,wxEVT_CHAR_HOOK,
	  wxEVT_KEY_DOWN,wxEVT_KEY_UP %,wxEVT_HOTKEY
	 ]}],
 ['AltDown','CmdDown','ControlDown','GetKeyCode',
  'GetModifiers','GetPosition','GetRawKeyCode','GetRawKeyFlags',
  'GetUnicodeKey','GetX','GetY','HasModifiers','MetaDown',
  'ShiftDown'
 ]}.

{class, wxSizeEvent, wxEvent, [{event,[wxEVT_SIZE]}],
 ['GetSize']}.
{class, wxMoveEvent, wxEvent, [{acc, [{m_pos, "GetPosition()"}, {m_rect, "GetRect()"}]}, {event,[wxEVT_MOVE]}],
 ['GetPosition']}.
{class, wxPaintEvent, wxEvent, [{event,[wxEVT_PAINT]}],[]}.
%%{class, wxNcPaintEvent, wxEvent, [{event,[wxEVT_NC_PAINT]}],[]}.
{class, wxEraseEvent, wxEvent, 
 [{acc, [{m_dc, "GetDC()"}]},
  {event, [wxEVT_ERASE_BACKGROUND]}],
 ['GetDC']}.
{class, wxFocusEvent, wxEvent,
 [{acc, [{m_win, "GetWindow()"}]},
  {event,[wxEVT_SET_FOCUS,wxEVT_KILL_FOCUS]}],
 ['GetWindow']}.
{class,wxChildFocusEvent,wxCommandEvent,
 [{event,[wxEVT_CHILD_FOCUS]}],
 ['GetWindow']}.

{class, wxMenuEvent, wxEvent,
 [{acc, [{m_menuId, "GetMenuId()"}, {m_menu, "GetMenu()"}]},
  {event, [wxEVT_MENU_OPEN,wxEVT_MENU_CLOSE,wxEVT_MENU_HIGHLIGHT]}],
 ['GetMenu','GetMenuId','IsPopup']}.
{class, wxCloseEvent, wxEvent, 
 [{event, [wxEVT_CLOSE_WINDOW,wxEVT_END_SESSION,wxEVT_QUERY_END_SESSION]}],
 ['CanVeto','GetLoggingOff','SetCanVeto','SetLoggingOff','Veto']}.
{class, wxShowEvent, wxEvent, [{acc, [{m_show, "GetShow()"}]},{event,[wxEVT_SHOW]}],['SetShow','GetShow']}.
{class, wxIconizeEvent, wxEvent, [{acc, [{m_iconized, "Iconized()"}]},{event,[wxEVT_ICONIZE]}],['Iconized']}.
{class, wxMaximizeEvent, wxEvent, [{event,[wxEVT_MAXIMIZE]}],[]}.
{class, wxJoystickEvent,  wxEvent,
 [{acc, [{m_pos, "GetPosition()"},{m_zPosition, "GetZPosition()"},
	 {m_buttonChange, "GetButtonChange()"}, {m_buttonState, "GetButtonState()"},
	 {m_joyStick, "GetJoystick()"}]},
  {event,[wxEVT_JOY_BUTTON_DOWN,wxEVT_JOY_BUTTON_UP,
	  wxEVT_JOY_MOVE,wxEVT_JOY_ZMOVE]}],
 ['ButtonDown','ButtonIsDown','ButtonUp','GetButtonChange','GetButtonState',
  'GetJoystick','GetPosition','GetZPosition','IsButton','IsMove','IsZMove']}.

%% {class, wxDropFilesEvent, wxEvent, [{event,[wxEVT_DROP_FILES]}],[]}. %FIXME

{enum, wxUpdateUIMode, "wxUPDATE_UI_"}.

{class, wxUpdateUIEvent, wxCommandEvent, 
 [{event,[wxEVT_UPDATE_UI]}],
 ['CanUpdate','Check','Enable','Show','GetChecked','GetEnabled','GetShown',
  'GetSetChecked','GetSetEnabled','GetSetShown','GetSetText','GetText',
  'GetMode','GetUpdateInterval','ResetUpdateTime','SetMode','SetText',
  'SetUpdateInterval']}.
{class, wxSysColourChangedEvent, wxEvent, 
 [{event,[wxEVT_SYS_COLOUR_CHANGED]}],[]}.
{class, wxMouseCaptureChangedEvent, wxEvent, 
 [{event,[wxEVT_MOUSE_CAPTURE_CHANGED]}],['GetCapturedWindow']}.
{class, wxDisplayChangedEvent, wxEvent, [{event,[wxEVT_DISPLAY_CHANGED]}],[]}.
{class, wxPaletteChangedEvent, wxEvent, 
 [{event,[wxEVT_PALETTE_CHANGED]}],['SetChangedWindow','GetChangedWindow']}.
{class, wxQueryNewPaletteEvent, wxEvent, 
 [{event,[wxEVT_QUERY_NEW_PALETTE]}],['SetPaletteRealized','GetPaletteRealized']}.
{class, wxNavigationKeyEvent, wxEvent, [{event,[wxEVT_NAVIGATION_KEY]}],
 ['GetDirection','SetDirection','IsWindowChange','SetWindowChange',
  'IsFromTab','SetFromTab','GetCurrentFocus','SetCurrentFocus']}.
{class, wxWindowCreateEvent, wxCommandEvent, [{event,[wxEVT_CREATE]}],[]}.
{class, wxWindowDestroyEvent, wxCommandEvent, [{event,[wxEVT_DESTROY]}],[]}.
{enum, {"wxHelpEvent","Origin"}, "wxHelpEvent::Origin_"}.
{class, wxHelpEvent, wxEvent, [{event,[wxEVT_HELP,wxEVT_DETAILED_HELP]}],
 [%%{'GetOrigin', [{return, [{type,"wxHelpEvent::Origin"}]}]},
  'GetOrigin',
  'GetPosition',
  %%{'SetOrigin', [{"origin", [{type,"wxHelpEvent::Origin"}]}]},
  'SetOrigin',
  'SetPosition']}.

{class, wxContextMenuEvent, wxCommandEvent,
 [{acc, [{m_pos, "GetPosition()"}]}, {event,[wxEVT_CONTEXT_MENU]}],
 ['GetPosition','SetPosition']}.
{enum, wxIdleMode, "wxIDLE_"}.
{class, wxIdleEvent, wxEvent, [{event,[wxEVT_IDLE]}],
 [{'CanSend', [{deprecated, "!wxCHECK_VERSION(2,9,0)"}]},
  'GetMode','RequestMore','MoreRequested','SetMode']}.
{class, wxGridEvent, wxNotifyEvent, 
 [{acc, [{m_row, "GetRow()"}, {m_col, "GetCol()"}, {m_x, "GetPosition().x"},{m_y, "GetPosition().y"},
	 {m_selecting, "Selecting()"},{m_control,"ControlDown()"},
	 {m_meta, "MetaDown()"}, {m_shift, "ShiftDown()"},{m_alt,"AltDown()"}]}, 
  {event,[wxEVT_GRID_CELL_LEFT_CLICK, wxEVT_GRID_CELL_RIGHT_CLICK, wxEVT_GRID_CELL_LEFT_DCLICK, 
	  wxEVT_GRID_CELL_RIGHT_DCLICK, wxEVT_GRID_LABEL_LEFT_CLICK, wxEVT_GRID_LABEL_RIGHT_CLICK, 
	  wxEVT_GRID_LABEL_LEFT_DCLICK, wxEVT_GRID_LABEL_RIGHT_DCLICK, wxEVT_GRID_ROW_SIZE, 
	  wxEVT_GRID_COL_SIZE, wxEVT_GRID_RANGE_SELECT, wxEVT_GRID_CELL_CHANGE, wxEVT_GRID_SELECT_CELL, 
	  wxEVT_GRID_EDITOR_SHOWN, wxEVT_GRID_EDITOR_HIDDEN, wxEVT_GRID_EDITOR_CREATED, 
	  wxEVT_GRID_CELL_BEGIN_DRAG]}],
 ['AltDown','ControlDown','GetCol','GetPosition','GetRow','MetaDown','Selecting','ShiftDown']}.

{class, wxNotifyEvent, wxCommandEvent, [], ['Allow','IsAllowed','Veto']}.

{enum, wxSashDragStatus, ""}.
{enum, wxSashEdgePosition, ""}.
{class, wxSashEvent, wxCommandEvent, 
 [{acc, [{m_edge, "GetEdge()"}, {m_dragStatus,"GetDragStatus()"}, {m_dragRect,"GetDragRect()"}]},
  {event,[wxEVT_SASH_DRAGGED
	  %% , wxEVT_SASH_DRAGGED_RANGE  Non exitent use connect with id, lastId
	 ]}],
 ['GetEdge','GetDragRect','GetDragStatus']}.

{class, wxListEvent, wxNotifyEvent, 
 [{acc, [{m_itemIndex, "GetIndex()"}, {m_code, "GetKeyCode()"},
	 {m_pointDrag, "GetPoint()"}, {m_item, skip}]},
  {event, [wxEVT_COMMAND_LIST_BEGIN_DRAG,wxEVT_COMMAND_LIST_BEGIN_RDRAG,
	   wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT,wxEVT_COMMAND_LIST_END_LABEL_EDIT,
	   wxEVT_COMMAND_LIST_DELETE_ITEM,wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS,
	   wxEVT_COMMAND_LIST_KEY_DOWN,
	   wxEVT_COMMAND_LIST_INSERT_ITEM,
	   wxEVT_COMMAND_LIST_COL_CLICK,wxEVT_COMMAND_LIST_COL_RIGHT_CLICK,
	   wxEVT_COMMAND_LIST_COL_BEGIN_DRAG,wxEVT_COMMAND_LIST_COL_DRAGGING,
	   wxEVT_COMMAND_LIST_COL_END_DRAG,

	   wxEVT_COMMAND_LIST_ITEM_SELECTED,wxEVT_COMMAND_LIST_ITEM_DESELECTED,
	   wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK,wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK,
	   wxEVT_COMMAND_LIST_ITEM_ACTIVATED,wxEVT_COMMAND_LIST_ITEM_FOCUSED,

	   wxEVT_COMMAND_LIST_CACHE_HINT]}],
 [
  'GetCacheFrom','GetCacheTo','GetKeyCode','GetIndex','GetColumn',
  'GetPoint','GetLabel','GetText','GetImage','GetData','GetMask','GetItem',
  'IsEditCancelled'
 ]}.

{class, wxDateEvent, wxCommandEvent, 
 [{acc, [{m_date, "GetDate()"}]}, {event,[wxEVT_DATE_CHANGED]}],
 [
  'GetDate'
 ]}.

{class, wxCalendarEvent, wxDateEvent, 
 [{acc, [{m_date, "GetDate()"}, {m_wday, "GetWeekDay()"}]},
  {event,[wxEVT_CALENDAR_SEL_CHANGED, wxEVT_CALENDAR_DAY_CHANGED,
	  wxEVT_CALENDAR_MONTH_CHANGED, wxEVT_CALENDAR_YEAR_CHANGED,
	  wxEVT_CALENDAR_DOUBLECLICKED, wxEVT_CALENDAR_WEEKDAY_CLICKED]}],
 [
  'GetWeekDay'
 ]}.

{class, wxFileDirPickerEvent, wxCommandEvent, 
 [{event, [wxEVT_COMMAND_FILEPICKER_CHANGED, wxEVT_COMMAND_DIRPICKER_CHANGED]},
  {acc, [{m_path, "GetPath()"}]}],
 ['GetPath']}.

{class, wxColourPickerEvent, wxCommandEvent, 
 [{event, [wxEVT_COMMAND_COLOURPICKER_CHANGED]},
  {acc, [{m_colour, "GetColour()"}]}],
 ['GetColour']}.

{class, wxFontPickerEvent, wxCommandEvent, 
 [{event, [wxEVT_COMMAND_FONTPICKER_CHANGED]},
  {acc, [{m_font, "GetFont()"}]}],
 ['GetFont']}.

{class, wxStyledTextEvent, wxCommandEvent, 
 [{event, [wxEVT_STC_CHANGE, wxEVT_STC_STYLENEEDED, wxEVT_STC_CHARADDED, 
	   wxEVT_STC_SAVEPOINTREACHED, wxEVT_STC_SAVEPOINTLEFT, wxEVT_STC_ROMODIFYATTEMPT,	   
	   wxEVT_STC_KEY,wxEVT_STC_DOUBLECLICK,wxEVT_STC_UPDATEUI,wxEVT_STC_MODIFIED,	  
	   wxEVT_STC_MACRORECORD,wxEVT_STC_MARGINCLICK,wxEVT_STC_NEEDSHOWN,wxEVT_STC_PAINTED,
	   wxEVT_STC_USERLISTSELECTION,wxEVT_STC_URIDROPPED,wxEVT_STC_DWELLSTART,
	   wxEVT_STC_DWELLEND,wxEVT_STC_START_DRAG,wxEVT_STC_DRAG_OVER,wxEVT_STC_DO_DROP,
	   wxEVT_STC_ZOOM,wxEVT_STC_HOTSPOT_CLICK,wxEVT_STC_HOTSPOT_DCLICK,
	   wxEVT_STC_CALLTIP_CLICK,wxEVT_STC_AUTOCOMP_SELECTION]},
  {acc, [{m_position,"GetPosition()"},{m_key,"GetKey()"}, {m_modifiers,"GetModifiers()"},
	 {m_modificationType,"GetModificationType()"},{m_text,"GetText()"},
	 {m_length,"GetLength()"},{m_linesAdded,"GetLinesAdded()"},{m_line,"GetLine()"},
	 {m_foldLevelNow,"GetFoldLevelNow()"}, {m_foldLevelPrev,"GetFoldLevelPrev()"},
	 {m_margin,"GetMargin()"}, {m_message,"GetMessage()"}, {m_wParam,"GetWParam()"},
	 {m_lParam,"GetLParam()"}, {m_listType,"GetListType()"},{m_x,"GetX()"},
	 {m_y,"GetY()"}, {m_dragText,"GetDragText()"}, {m_dragAllowMove,"GetDragAllowMove()"},
	 {m_dragResult,"GetDragResult()"}]}],
 ['GetPosition','GetKey','GetModifiers','GetModificationType','GetText','GetLength',
  'GetLinesAdded','GetLine','GetFoldLevelNow','GetFoldLevelPrev','GetMargin',
  'GetMessage','GetWParam','GetLParam','GetListType','GetX','GetY',
  'GetDragText','GetDragAllowMove','GetDragResult','GetShift','GetControl','GetAlt']}.

%%{class, , wxEvent, [{event,[]}],[]}.


%% Testing generation on static classless funcs
{class, utils, static, [],
 ['wxGetKeyState',  'wxGetMousePosition', 'wxGetMouseState',
  'wxSetDetectableAutoRepeat',  
  'wxBell',  
  'wxFindMenuItemId',  'wxGenericFindWindowAtPoint',  'wxFindWindowAtPoint',
  'wxBeginBusyCursor',  'wxEndBusyCursor',  'wxIsBusy',
  'wxShutdown',  {'wxShell', 1},  'wxLaunchDefaultBrowser',
  {'wxGetEmailAddress',0},  {'wxGetUserId',0},  {'wxGetHomeDir',0},
  'wxNewId', 'wxRegisterId',  'wxGetCurrentId',
  'wxGetOsDescription',  'wxIsPlatformLittleEndian',  'wxIsPlatform64Bit'
 ]}.

{class, gdicmn, static, [],
 [ {'wxDisplaySize', [{"width", [out]}, {"height", [out]}]}, 'wxSetCursor'
 ]}.


{class, wxPrintout, object, [{alias, [{wxePrintout, wxePrintout}]}],
 [{'wxPrintout', [{where, taylormade}]},'~wxPrintout',
  'GetDC', %% 'GetPageInfo',Callback
  'GetPageSizeMM','GetPageSizePixels','GetPaperRectPixels',
  'GetPPIPrinter','GetPPIScreen','GetTitle', %% 'HasPage', Callback
  'IsPreview',
  'FitThisSizeToPaper','FitThisSizeToPage','FitThisSizeToPageMargins',
  'MapScreenSizeToPaper','MapScreenSizeToPage','MapScreenSizeToPageMargins','MapScreenSizeToDevice',
  'GetLogicalPaperRect','GetLogicalPageRect','GetLogicalPageMarginsRect','SetLogicalOrigin',
  'OffsetLogicalOrigin']}.

%%%%%%%%%%%%%%%%
%% Test requires stc
{class, wxStyledTextCtrl, wxControl, [],
 ['wxStyledTextCtrl','~wxStyledTextCtrl','Create', 'AddText', 'AddStyledText', 'InsertText', 
  'ClearAll', 'ClearDocumentStyle', 'GetLength', 'GetCharAt', 'GetCurrentPos', 'GetAnchor', 
  'GetStyleAt', 'Redo', 'SetUndoCollection', 'SelectAll', 'SetSavePoint', 'GetStyledText', 
  'CanRedo', 'MarkerLineFromHandle', 'MarkerDeleteHandle', 'GetUndoCollection', 
  'GetViewWhiteSpace', 'SetViewWhiteSpace', 
  'PositionFromPoint', 'PositionFromPointClose', 'GotoLine', 'GotoPos', 'SetAnchor', 
  {'GetCurLine', [{"linePos", [out]}]}, 'GetEndStyled', 'ConvertEOLs', 'GetEOLMode', 'SetEOLMode', 
  'StartStyling', 'SetStyling', 'GetBufferedDraw', 'SetBufferedDraw', 'SetTabWidth', 'GetTabWidth', 
  'SetCodePage', 'MarkerDefine', 'MarkerSetForeground', 'MarkerSetBackground', 'MarkerAdd', 'MarkerDelete',
  'MarkerDeleteAll', 'MarkerGet', 'MarkerNext', 'MarkerPrevious', 'MarkerDefineBitmap', 'MarkerAddSet',
  'MarkerSetAlpha', 'SetMarginType', 'GetMarginType', 'SetMarginWidth', 'GetMarginWidth', 'SetMarginMask',
  'GetMarginMask', 'SetMarginSensitive', 'GetMarginSensitive', 'StyleClearAll', 'StyleSetForeground', 
  'StyleSetBackground', 'StyleSetBold', 'StyleSetItalic', 'StyleSetSize', 'StyleSetFaceName', 
  'StyleSetEOLFilled', 'StyleResetDefault', 'StyleSetUnderline', 'StyleSetCase', 'StyleSetHotSpot', 
  'SetSelForeground', 'SetSelBackground', 'GetSelAlpha', 'SetSelAlpha', 'SetCaretForeground', 
  'CmdKeyAssign', 'CmdKeyClear', 'CmdKeyClearAll', 'SetStyleBytes', 'StyleSetVisible', 'GetCaretPeriod', 
  'SetCaretPeriod', 'SetWordChars', 'BeginUndoAction', 'EndUndoAction', 'IndicatorSetStyle', 
  'IndicatorGetStyle', 'IndicatorSetForeground', 'IndicatorGetForeground', 'SetWhitespaceForeground', 
  'SetWhitespaceBackground', 'GetStyleBits', 'SetLineState', 'GetLineState', 'GetMaxLineState', 
  'GetCaretLineVisible', 'SetCaretLineVisible', 'GetCaretLineBackground', 'SetCaretLineBackground', 
  'AutoCompShow', 'AutoCompCancel', 'AutoCompActive', 'AutoCompPosStart', 'AutoCompComplete', 
  'AutoCompStops', 'AutoCompSetSeparator', 'AutoCompGetSeparator', 'AutoCompSelect', 
  'AutoCompSetCancelAtStart', 'AutoCompGetCancelAtStart', 'AutoCompSetFillUps', 'AutoCompSetChooseSingle', 
  'AutoCompGetChooseSingle', 'AutoCompSetIgnoreCase', 'AutoCompGetIgnoreCase', 'UserListShow', 
  'AutoCompSetAutoHide', 'AutoCompGetAutoHide', 'AutoCompSetDropRestOfWord', 'AutoCompGetDropRestOfWord', 
  'RegisterImage', 'ClearRegisteredImages', 'AutoCompGetTypeSeparator', 'AutoCompSetTypeSeparator', 
  'AutoCompSetMaxWidth', 'AutoCompGetMaxWidth', 'AutoCompSetMaxHeight', 'AutoCompGetMaxHeight', 
  'SetIndent', 'GetIndent', 'SetUseTabs', 'GetUseTabs', 'SetLineIndentation', 'GetLineIndentation', 
  'GetLineIndentPosition', 'GetColumn', 'SetUseHorizontalScrollBar', 'GetUseHorizontalScrollBar', 
  'SetIndentationGuides', 'GetIndentationGuides', 'SetHighlightGuide', 'GetHighlightGuide', 
  'GetLineEndPosition', 'GetCodePage', 'GetCaretForeground', 'GetReadOnly', 'SetCurrentPos', 
  'SetSelectionStart', 'GetSelectionStart', 'SetSelectionEnd', 'GetSelectionEnd', 'SetPrintMagnification', 
  'GetPrintMagnification', 'SetPrintColourMode', 'GetPrintColourMode', 'FindText', 'FormatRange', 
  'GetFirstVisibleLine', 'GetLine', 'GetLineCount', 'SetMarginLeft', 'GetMarginLeft', 'SetMarginRight', 
  'GetMarginRight', 'GetModify', 'SetSelection', 'GetSelectedText', 'GetTextRange', 'HideSelection', 
  'LineFromPosition', 'PositionFromLine', 'LineScroll', 'EnsureCaretVisible', 'ReplaceSelection', 
  'SetReadOnly', 'CanPaste', 'CanUndo', 'EmptyUndoBuffer', 'Undo', 'Cut', 'Copy', 'Paste', 'Clear', 
  'SetText', 'GetText', 'GetTextLength', 'GetOvertype', 'SetCaretWidth', 'GetCaretWidth', 
  'SetTargetStart', 'GetTargetStart', 'SetTargetEnd', 'GetTargetEnd', 'ReplaceTarget', 'SearchInTarget', 
  'SetSearchFlags', 'GetSearchFlags', 'CallTipShow', 'CallTipCancel', 'CallTipActive', 'CallTipPosAtStart', 
  'CallTipSetHighlight', 'CallTipSetBackground', 'CallTipSetForeground', 'CallTipSetForegroundHighlight', 
  'CallTipUseStyle', 'VisibleFromDocLine', 'DocLineFromVisible', 'WrapCount', 'SetFoldLevel', 'GetFoldLevel', 
  'GetLastChild', 'GetFoldParent', 'ShowLines', 'HideLines', 'GetLineVisible', 'SetFoldExpanded', 
  'GetFoldExpanded', 'ToggleFold', 'EnsureVisible', 'SetFoldFlags', 'EnsureVisibleEnforcePolicy', 
  'SetTabIndents', 'GetTabIndents', 'SetBackSpaceUnIndents', 'GetBackSpaceUnIndents', 'SetMouseDwellTime',
  'GetMouseDwellTime', 'WordStartPosition', 'WordEndPosition', 'SetWrapMode', 'GetWrapMode', 
  'SetWrapVisualFlags', 'GetWrapVisualFlags', 'SetWrapVisualFlagsLocation', 'GetWrapVisualFlagsLocation', 
  'SetWrapStartIndent', 'GetWrapStartIndent', 'SetLayoutCache', 'GetLayoutCache', 'SetScrollWidth', 
  'GetScrollWidth', 'TextWidth', 'GetEndAtLastLine', 'TextHeight', 'SetUseVerticalScrollBar', 
  'GetUseVerticalScrollBar', 'AppendText', 'GetTwoPhaseDraw', 'SetTwoPhaseDraw', 'TargetFromSelection', 
  'LinesJoin', 'LinesSplit', 'SetFoldMarginColour', 'SetFoldMarginHiColour', 'LineDown', 'LineDownExtend', 
  'LineUp', 'LineUpExtend', 'CharLeft', 'CharLeftExtend', 'CharRight', 'CharRightExtend', 'WordLeft', 
  'WordLeftExtend', 'WordRight', 'WordRightExtend', 'Home', 'HomeExtend', 'LineEnd', 'LineEndExtend', 
  'DocumentStart', 'DocumentStartExtend', 'DocumentEnd', 'DocumentEndExtend', 'PageUp', 'PageUpExtend', 
  'PageDown', 'PageDownExtend', 'EditToggleOvertype', 'Cancel', 'DeleteBack', 'Tab', 'BackTab', 'NewLine', 
  'FormFeed', 'VCHome', 'VCHomeExtend', 'ZoomIn', 'ZoomOut', 'DelWordLeft', 'DelWordRight', 'LineCut', 
  'LineDelete', 'LineTranspose', 'LineDuplicate', 'LowerCase', 'UpperCase', 'LineScrollDown', 'LineScrollUp', 
  'DeleteBackNotLine', 'HomeDisplay', 'HomeDisplayExtend', 'LineEndDisplay', 'LineEndDisplayExtend', 
  'HomeWrapExtend', 'LineEndWrap', 'LineEndWrapExtend', 'VCHomeWrap', 'VCHomeWrapExtend', 'LineCopy', 
  'MoveCaretInsideView', 'LineLength', 'BraceHighlight', 'BraceBadLight', 'BraceMatch', 'GetViewEOL', 
  'SetViewEOL', %'GetDocPointer', 'SetDocPointer', Hmm void pointers
  'SetModEventMask', 'GetEdgeColumn', 'SetEdgeColumn',
  'SetEdgeMode', 'GetEdgeMode', 'GetEdgeColour', 'SetEdgeColour', 'SearchAnchor', 'SearchNext',
  'SearchPrev', 'LinesOnScreen',
  'UsePopUp', 'SelectionIsRectangle', 'SetZoom', 'GetZoom', 
  %%'CreateDocument', 'AddRefDocument', 'ReleaseDocument', Hmm void pointers
  'GetModEventMask', 'SetSTCFocus', 'GetSTCFocus', 'SetStatus', 'GetStatus', 
  'SetMouseDownCaptures', 'GetMouseDownCaptures', 'SetSTCCursor', 'GetSTCCursor', 
  'SetControlCharSymbol',  'GetControlCharSymbol', 'WordPartLeft', 
  'WordPartLeftExtend', 'WordPartRight', 'WordPartRightExtend', 
  'SetVisiblePolicy', 'DelLineLeft', 'DelLineRight', 
  'GetXOffset', 'ChooseCaretX', 'SetXCaretPolicy', 
  'SetYCaretPolicy', 'GetPrintWrapMode', 
  'SetHotspotActiveForeground', 'SetHotspotActiveBackground', 
  'SetHotspotActiveUnderline', 'SetHotspotSingleLine', 
  'ParaDownExtend', 'ParaUp', 'ParaUpExtend', 
  'PositionBefore', 'PositionAfter', 'CopyRange', 'CopyText', 
  'SetSelectionMode', 'GetSelectionMode', 'LineDownRectExtend', 
  'LineUpRectExtend', 'CharLeftRectExtend', 'CharRightRectExtend', 
  'HomeRectExtend', 'VCHomeRectExtend', 
  'LineEndRectExtend', 'PageUpRectExtend', 'PageDownRectExtend', 
  'StutteredPageUp', 'StutteredPageUpExtend', 'StutteredPageDown', 'StutteredPageDownExtend', 
  'WordLeftEnd', 'WordLeftEndExtend', 'WordRightEnd', 
  'WordRightEndExtend', 'SetWhitespaceChars', 'SetCharsDefault', 'AutoCompGetCurrent', 'Allocate', 
  'FindColumn', 'GetCaretSticky', 'SetCaretSticky', 'ToggleCaretSticky', 'SetPasteConvertEndings', 
  'GetPasteConvertEndings', 'SelectionDuplicate', 'SetCaretLineBackAlpha', 'GetCaretLineBackAlpha', 
  'StartRecord', 'StopRecord', 'SetLexer', 'GetLexer', 'Colourise', 'SetProperty', 'SetKeyWords', 
  'SetLexerLanguage', 'GetProperty', 'GetStyleBitsNeeded', 'GetCurrentLine', 'StyleSetSpec', 
  'StyleSetFont', 'StyleSetFontAttr', 'StyleSetCharacterSet', 'StyleSetFontEncoding', 
  'CmdKeyExecute', 
  'SetMargins', {'GetSelection', [{"startPos", [out]}, {"endPos",[out]}]}, 
  'PointFromPosition', 'ScrollToLine', 'ScrollToColumn', %% 'SendMsg',
  'SetVScrollBar', 'SetHScrollBar', 'GetLastKeydownProcessed', 'SetLastKeydownProcessed', 
  'SaveFile', 'LoadFile', 'DoDragOver', 'DoDropText', 'GetUseAntiAliasing', 
  {'AddTextRaw', [{"text", [in, {base, binary}]}]},
  {'InsertTextRaw', [{"text", [in, {base, binary}]}]},
  {'GetCurLineRaw', [{return,{base,{binary,"strlen(Result)"}}}, {"linePos", [out]}]}, 
  {'GetLineRaw',[{return,{base,{binary,"strlen(Result)"}}}]}, 
  {'GetSelectedTextRaw', [{return,{base,{binary,"strlen(Result)"}}}]},
  {'GetTextRangeRaw', [{return,{base,{binary,"strlen(Result)"}}}]},
  {'SetTextRaw', [{"text", [in, {base, binary}]}]}, 
  {'GetTextRaw', [{return,{base,{binary,"strlen(Result)"}}}]},
  {'AppendTextRaw', [{"text", [in, {base, binary}]}]}]}.

{class, wxArtProvider, object, [], 
 [{'GetBitmap', [{"client", {def,"wxART_OTHER"}}]},
  {'GetIcon', [{"client", {def,"wxART_OTHER"}}]}]}.

{class, wxTreeEvent, wxNotifyEvent, 
 [{acc, [{m_item, "GetItem()"}, {m_itemOld, "GetOldItem()"}, 
	 {m_pointDrag, "GetPoint()"}]},
  {event, [wxEVT_COMMAND_TREE_BEGIN_DRAG, wxEVT_COMMAND_TREE_BEGIN_RDRAG,
	   wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT, wxEVT_COMMAND_TREE_END_LABEL_EDIT, 
	   wxEVT_COMMAND_TREE_DELETE_ITEM, wxEVT_COMMAND_TREE_GET_INFO, 
	   wxEVT_COMMAND_TREE_SET_INFO, wxEVT_COMMAND_TREE_ITEM_EXPANDED, 
	   wxEVT_COMMAND_TREE_ITEM_EXPANDING, wxEVT_COMMAND_TREE_ITEM_COLLAPSED, 
	   wxEVT_COMMAND_TREE_ITEM_COLLAPSING, wxEVT_COMMAND_TREE_SEL_CHANGED, 
	   wxEVT_COMMAND_TREE_SEL_CHANGING, wxEVT_COMMAND_TREE_KEY_DOWN, 
	   wxEVT_COMMAND_TREE_ITEM_ACTIVATED, wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK, 
	   wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, wxEVT_COMMAND_TREE_END_DRAG, 
	   wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK, wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP, 
	   wxEVT_COMMAND_TREE_ITEM_MENU]}
 ],
 ['GetKeyCode','GetItem','GetKeyEvent','GetLabel','GetOldItem','GetPoint',
  'IsEditCancelled','SetToolTip']}.

{class, wxNotebookEvent, wxNotifyEvent,
 [{acc, [{m_nSel, "GetSelection()"}, {m_nOldSel, "GetOldSelection()"}]},
  {event, [wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED,
	   wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING]}],
 ['GetOldSelection','GetSelection','SetOldSelection','SetSelection']}.


{class, wxDataObject, root, [], []}.

{class, wxFileDataObject, wxDataObject, [],
 ['wxFileDataObject', 'AddFile','GetFilenames']}.
{class, wxTextDataObject, wxDataObject, [],
 ['wxTextDataObject', 'GetTextLength', 'GetText', 'SetText']}.
{class, wxBitmapDataObject, wxDataObject, [],
 [{'wxBitmapDataObject',1}, 'GetBitmap','SetBitmap']}.

{class, wxClipboard, object, [],
 ['wxClipboard','~wxClipboard','AddData','Clear','Close', 
  'Flush','GetData','IsOpened',
  'Open','SetData','UsePrimarySelection'
  , {'IsSupported', [{"format", [{type, "wxDataFormatId"}, {single,true}]}]},
  'Get'
 ]}. 

{class, wxClipboardTextEvent, wxCommandEvent,
 [{event, [wxEVT_COMMAND_TEXT_COPY,
	   wxEVT_COMMAND_TEXT_CUT,
	   wxEVT_COMMAND_TEXT_PASTE]}],
 []}.

{class, wxSpinEvent, wxNotifyEvent,  
 [{acc, [{m_commandInt, "GetPosition()"}]},
  {event, [wxEVT_COMMAND_SPINCTRL_UPDATED,
	   {wxEVT_SPIN_UP, wxEVT_SCROLL_LINEUP, wxScrollEvent},
	   {wxEVT_SPIN_DOWN, wxEVT_SCROLL_LINEDOWN, wxScrollEvent},
	   {wxEVT_SPIN, wxEVT_SCROLL_THUMBTRACK, wxScrollEvent}
	  ]}],
 ['GetPosition', 'SetPosition']}.

{class, wxSplitterWindow, wxWindow, [],
 [
  'wxSplitterWindow', '~wxSplitterWindow', 'Create', 'GetMinimumPaneSize', 'GetSashGravity',
  'GetSashPosition', 'GetSplitMode', 'GetWindow1', 'GetWindow2', 'Initialize', 'IsSplit',
  %% 'OnDoubleClickSash', 'OnUnsplit', 'OnSashPositionChange',
  'ReplaceWindow', 'SetSashGravity', 'SetSashPosition', 'SetSashSize', 'SetMinimumPaneSize',
  'SetSplitMode', 'SplitHorizontally', 'SplitVertically', 'Unsplit', 'UpdateSize'
 ]}. 


{class, wxSplitterEvent, wxNotifyEvent, 
 [{acc, [{x, skip}, {y, skip}, {pos, skip}, {win, skip}, {pt, skip}]}, %% arrgh doxygen bugs
  {event, 
   [wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, 
    wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING,
    wxEVT_COMMAND_SPLITTER_DOUBLECLICKED, 
    wxEVT_COMMAND_SPLITTER_UNSPLIT 
   ]}],
 ['GetSashPosition', 'GetX', 'GetY',
  'GetWindowBeingRemoved', 'SetSashPosition' 
 ]}.


{class, wxHtmlWindow, wxScrolledWindow, [],
 [
  'wxHtmlWindow',%'AddFilter',
  'AppendToPage',
  %%'GetInternalRepresentation',
  'GetOpenedAnchor',
  'GetOpenedPage','GetOpenedPageTitle','GetRelatedFrame',
  'HistoryBack',  'HistoryCanBack','HistoryCanForward','HistoryClear','HistoryForward',
  'LoadFile','LoadPage',
  %%'OnCellClicked','OnCellMouseHover','OnLinkClicked',OnOpeningURL, OnSetTitle
  %'ReadCustomization',
  'SelectAll','SelectionToText','SelectLine','SelectWord',
  'SetBorders','SetFonts','SetPage','SetRelatedFrame','SetRelatedStatusBar',
  'ToText'
  %%'WriteCustomization'
 ]}.


{class, wxHtmlLinkEvent, wxCommandEvent, 
 [{acc, [{m_linkInfo, "GetLinkInfo()"}]},
  {event, [wxEVT_COMMAND_HTML_LINK_CLICKED]}],
 ['GetLinkInfo']}.

%% New No wxAuiToolBar yet..add when documentation exists
%% {class, wxAuiToolBarEvent, wxNotifyEvent, 
%%  [{acc, [{is_dropdown_clicked, "IsDropDownClicked()"},
%% 	 {click_pt, "GetClickPoint()"},
%% 	 {rect, "GetItemRect()"},
%% 	 {tool_id, "GetToolId()"}]},
%%   {event, [wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN,
%% 	   wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK,
%% 	   wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK,
%% 	   wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG
%% 	  ]}], 
%%  ['IsDropDownClicked', 'SetDropDownClicked', 'SetClickPoint',
%%   'GetItemRect', 'SetItemRect', 'GetToolId', 'SetToolId'
%%  ]}.

{class, wxSystemSettings, object, [],
 [
  'GetColour','GetFont','GetMetric','GetScreenType'
 ]}.

{class, wxSystemOptions, object, [],
 ['GetOption', 'GetOptionInt', 'HasOption', 'IsFalse', 'SetOption']}.

{class, wxAuiNotebookEvent, wxNotifyEvent, 
 [{acc, [{old_selection, "GetOldSelection()"},
	 {selection, "GetSelection()"},
	 {drag_source, "GetDragSource()"}]},
  {event, [wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, 
	   wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
	   wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING,
	   wxEVT_COMMAND_AUINOTEBOOK_BUTTON, 
	   wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, 
	   wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, 
	   wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, 
	   wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, 
	   {wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, {test_if, "wxCHECK_VERSION(2,8,5)"}},
	   {wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP,   {test_if, "wxCHECK_VERSION(2,8,5)"}},
	   {wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN,  {test_if, "wxCHECK_VERSION(2,8,5)"}},
	   {wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP,    {test_if, "wxCHECK_VERSION(2,8,5)"}},
	   {wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED,     {test_if, "wxCHECK_VERSION(2,8,5)"}},
	   {wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE,       {test_if, "wxCHECK_VERSION(2,8,5)"}},
	   {wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK,       {test_if, "wxCHECK_VERSION(2,8,5)"}}
	  ]}],
 ['SetSelection', 'GetSelection', 'SetOldSelection', 'GetOldSelection',
  'SetDragSource', 'GetDragSource'
 ]}.


{class, wxAuiManagerEvent, wxEvent,
 [{acc, [{button, "GetButton()"},
	 {dc, "GetDC()"},
	 {pane, "GetPane()"},
	 {manager, "GetManager()"}
	]},
  {event, [wxEVT_AUI_PANE_BUTTON,
	   wxEVT_AUI_PANE_CLOSE,
	   wxEVT_AUI_PANE_MAXIMIZE,
	   wxEVT_AUI_PANE_RESTORE,
	   {wxEVT_AUI_PANE_ACTIVATED, {test_if, "wxCHECK_VERSION(2,9,5)"}},
	   wxEVT_AUI_RENDER,
	   wxEVT_AUI_FIND_MANAGER
	  ]}],
 [
  'SetManager', 'GetManager','SetPane','GetPane','SetButton','GetButton',
  'SetDC', 'GetDC', 'Veto', 'GetVeto', 'SetCanVeto', 'CanVeto'
 ]}.

{class, wxLogNull, root, [],
 [wxLogNull, '~wxLogNull']}.

{class, wxTaskBarIcon, wxEvtHandler, [],
 [wxTaskBarIcon,'~wxTaskBarIcon',
  %%'CreatePopupMenu', virtual overrided is a callback
  %% 'IsIconInstalled', 'IsOk', not available on mac
  'PopupMenu','RemoveIcon','SetIcon']}.

{class, wxTaskBarIconEvent, wxEvent,
 [{event,[wxEVT_TASKBAR_MOVE,wxEVT_TASKBAR_LEFT_DOWN,wxEVT_TASKBAR_LEFT_UP,
	  wxEVT_TASKBAR_RIGHT_DOWN,wxEVT_TASKBAR_RIGHT_UP,
	  wxEVT_TASKBAR_LEFT_DCLICK,wxEVT_TASKBAR_RIGHT_DCLICK]}],[]}.

{class, wxInitDialogEvent, wxEvent, [{event,[wxEVT_INIT_DIALOG]}], []}.

{class, wxLocale, root, [{skip, [{'wxLocale', 5}, {'Init', 6}]}],
 ['wxLocale', '~wxLocale', 'Init',
  'AddCatalog','AddCatalogLookupPathPrefix',
  %%'AddLanguage','FindLanguageInfo', 'GetLanguageInfo',
  'GetCanonicalName','GetLanguage',
  'GetLanguageName','GetLocale','GetName','GetString',
  'GetHeaderValue',
  'GetSysName',
  'GetSystemEncoding','GetSystemEncodingName',
  'GetSystemLanguage',
  'IsLoaded','IsOk']}.

{class, wxActivateEvent, wxEvent,
 [{acc, [{m_active, "GetActive()"}]},
  {event, [wxEVT_ACTIVATE, wxEVT_ACTIVATE_APP, wxEVT_HIBERNATE]}],
 ['GetActive']}.

{class, wxPopupWindow, wxWindow, [{ifdef, wxUSE_POPUPWIN}],
 ['wxPopupWindow', '~wxPopupWindow', 'Create', 'Position']}.

{class, wxPopupTransientWindow, wxPopupWindow, [{ifdef, wxUSE_POPUPWIN}],
 ['wxPopupTransientWindow', '~wxPopupTransientWindow', 'Popup', 'Dismiss']}.

{class, wxMouseCaptureLostEvent, wxEvent,
 [{event,[wxEVT_MOUSE_CAPTURE_LOST]}],[]}.

{class, wxOverlay, root, [],
 ['wxOverlay', '~wxOverlay', 'Reset']}.

{class, wxDCOverlay, root, [],
 ['wxDCOverlay', '~wxDCOverlay', 'Clear']}.
