<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<!-- THIS FILE IS GENERATED DO NOT EDIT -->


<erlref>
<header>
  <copyright>
    <year>2020</year><year>2021</year>
    <holder>wxWidgets team.</holder></copyright>
  <legalnotice>Licensed under the wxWindows Free Documentation Licence, Version 3
  </legalnotice>
  <title>wxStyledTextCtrl</title>
</header>
<module>wxStyledTextCtrl</module>
<modulesummary>Functions for wxStyledTextCtrl class</modulesummary>
<description><p>A wxWidgets implementation of the Scintilla source code editing component.
      </p><p>As well as features found in standard text editing components, Scintilla includes features especially useful when editing and debugging source code. These include support for syntax styling, error indicators, code completion and call tips.
      </p><p>The selection margin can contain markers like those used in debuggers to indicate breakpoints and the current line. Styling choices are more open than with many editors, allowing the use of proportional fonts, bold and italics, multiple foreground and background colours and multiple fonts.
      </p><p><seeerl marker="wxStyledTextCtrl"><c>wxStyledTextCtrl</c></seeerl> is a 1 to 1 mapping of "raw" scintilla interface, whose documentation can be found in the Scintilla website (<url href="http://www.scintilla.org/">http://www.scintilla.org/</url>).
      </p><p>Please see <seeerl marker="wxStyledTextEvent"><c>wxStyledTextEvent</c></seeerl> for the documentation of all event types you can use with <seeerl marker="wxStyledTextCtrl"><c>wxStyledTextCtrl</c></seeerl>.
      </p><p>Index of the member groups</p> <p>Links for quick access to the various categories of <seeerl marker="wxStyledTextCtrl"><c>wxStyledTextCtrl</c></seeerl> functions:
      </p><p>See: <seeerl marker="wxStyledTextEvent"><c>wxStyledTextEvent</c></seeerl>
      </p>
  <p>This class is derived (and can use functions) from: 
    <seeerl marker="wxControl"><c>wxControl</c></seeerl> <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> <seeerl marker="wxEvtHandler"><c>wxEvtHandler</c></seeerl></p>
  
  <p>wxWidgets docs: <url href="https://docs.wxwidgets.org/3.1/classwx_styled_text_ctrl.html">wxStyledTextCtrl</url></p>
  </description>
<datatypes><datatype><name name="wxStyledTextCtrl"/></datatype></datatypes>

<funcs>
  <func>
    <name name="new" arity="0" clause_i="1" since=""/>
    <fsummary>Default ctor. </fsummary>
    <desc><p>Default ctor. 
      </p></desc>
  </func>
  
  <func>
    <name name="new" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>new/2</c></fsummary>
  </func>
  
  <func>
    <name name="new" arity="2" clause_i="1" since=""/>
    <fsummary>Ctor. </fsummary>
    <desc><p>Ctor. 
      </p></desc>
  </func>
  
  <func>
    <name name="destroy" arity="1" clause_i="1" since=""/>
    <fsummary>Destructor. </fsummary>
    <desc><p>Destructor. 
      </p></desc>
  </func>
  
  <func>
    <name name="create" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>create/3</c></fsummary>
  </func>
  
  <func>
    <name name="create" arity="3" clause_i="1" since=""/>
    <fsummary>Create the UI elements for a STC that was created with the default ctor. </fsummary>
    <desc><p>Create the UI elements for a STC that was created with the default ctor. 
      </p><p>(For 2-phase create.) 
      </p></desc>
  </func>
  
  <func>
    <name name="addText" arity="2" clause_i="1" since=""/>
    <fsummary>Add text to the document at current position. </fsummary>
    <desc><p>Add text to the document at current position. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertText" arity="3" clause_i="1" since=""/>
    <fsummary>Insert string at a position. </fsummary>
    <desc><p>Insert string at a position. 
      </p></desc>
  </func>
  
  <func>
    <name name="clearAll" arity="1" clause_i="1" since=""/>
    <fsummary>Delete all text in the document. </fsummary>
    <desc><p>Delete all text in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="clearDocumentStyle" arity="1" clause_i="1" since=""/>
    <fsummary>Set all style bytes to 0, remove all folding information. </fsummary>
    <desc><p>Set all style bytes to 0, remove all folding information. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLength" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the number of bytes in the document. </fsummary>
    <desc><p>Returns the number of bytes in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCharAt" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the character byte at the position. </fsummary>
    <desc><p>Returns the character byte at the position. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCurrentPos" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the position of the caret. </fsummary>
    <desc><p>Returns the position of the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="getAnchor" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the position of the opposite end of the selection to the caret. </fsummary>
    <desc><p>Returns the position of the opposite end of the selection to the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="getStyleAt" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the style byte at the position. </fsummary>
    <desc><p>Returns the style byte at the position. 
      </p></desc>
  </func>
  
  <func>
    <name name="redo" arity="1" clause_i="1" since=""/>
    <fsummary>Redoes the next action on the undo history. </fsummary>
    <desc><p>Redoes the next action on the undo history. 
      </p></desc>
  </func>
  
  <func>
    <name name="setUndoCollection" arity="2" clause_i="1" since=""/>
    <fsummary>Choose between collecting actions into the undo history and discarding them. </fsummary>
    <desc><p>Choose between collecting actions into the undo history and discarding them. 
      </p></desc>
  </func>
  
  <func>
    <name name="selectAll" arity="1" clause_i="1" since=""/>
    <fsummary>Select all the text in the document. </fsummary>
    <desc><p>Select all the text in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSavePoint" arity="1" clause_i="1" since=""/>
    <fsummary>Remember the current position in the undo history as the position at which the document was saved. </fsummary>
    <desc><p>Remember the current position in the undo history as the position at which the document was saved. 
      </p></desc>
  </func>
  
  <func>
    <name name="canRedo" arity="1" clause_i="1" since=""/>
    <fsummary>Are there any redoable actions in the undo history? </fsummary>
    <desc><p>Are there any redoable actions in the undo history? 
      </p></desc>
  </func>
  
  <func>
    <name name="markerLineFromHandle" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the line number at which a particular marker is located. </fsummary>
    <desc><p>Retrieve the line number at which a particular marker is located. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerDeleteHandle" arity="2" clause_i="1" since=""/>
    <fsummary>Delete a marker. </fsummary>
    <desc><p>Delete a marker. 
      </p></desc>
  </func>
  
  <func>
    <name name="getUndoCollection" arity="1" clause_i="1" since=""/>
    <fsummary>Is undo history being collected? </fsummary>
    <desc><p>Is undo history being collected? 
      </p></desc>
  </func>
  
  <func>
    <name name="getViewWhiteSpace" arity="1" clause_i="1" since=""/>
    <fsummary>Are white space characters currently visible? Returns one of wxSTC_WS_* constants. </fsummary>
    <desc><p>Are white space characters currently visible? Returns one of wxSTC_WS_* constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setViewWhiteSpace" arity="2" clause_i="1" since=""/>
    <fsummary>Make white space characters invisible, always visible or visible outside indentation. </fsummary>
    <desc><p>Make white space characters invisible, always visible or visible outside indentation. 
      </p><p>The input should be one of the ?wxSTC_WS_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="positionFromPoint" arity="2" clause_i="1" since=""/>
    <fsummary>Find the position from a point within the window. </fsummary>
    <desc><p>Find the position from a point within the window. 
      </p></desc>
  </func>
  
  <func>
    <name name="positionFromPointClose" arity="3" clause_i="1" since=""/>
    <fsummary>Find the position from a point within the window but return wxSTC_INVALID_POSITION if not close to text. </fsummary>
    <desc><p>Find the position from a point within the window but return wxSTC_INVALID_POSITION if not close to text. 
      </p></desc>
  </func>
  
  <func>
    <name name="gotoLine" arity="2" clause_i="1" since=""/>
    <fsummary>Set caret to start of a line and ensure it is visible. </fsummary>
    <desc><p>Set caret to start of a line and ensure it is visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="gotoPos" arity="2" clause_i="1" since=""/>
    <fsummary>Set caret to a position and ensure it is visible. </fsummary>
    <desc><p>Set caret to a position and ensure it is visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="setAnchor" arity="2" clause_i="1" since=""/>
    <fsummary>Set the selection anchor to a position. </fsummary>
    <desc><p>Set the selection anchor to a position. 
      </p><p>The anchor is the opposite end of the selection from the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCurLine" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the text of the line containing the caret. </fsummary>
    <desc><p>Retrieve the text of the line containing the caret. 
      </p><p>linePos can optionally be passed in to receive the index of the caret on the line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getEndStyled" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the position of the last correctly styled character. </fsummary>
    <desc><p>Retrieve the position of the last correctly styled character. 
      </p></desc>
  </func>
  
  <func>
    <name name="convertEOLs" arity="2" clause_i="1" since=""/>
    <fsummary>Convert all line endings in the document to one mode. </fsummary>
    <desc><p>Convert all line endings in the document to one mode. 
      </p></desc>
  </func>
  
  <func>
    <name name="getEOLMode" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF. </fsummary>
    <desc><p>Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF. 
      </p></desc>
  </func>
  
  <func>
    <name name="setEOLMode" arity="2" clause_i="1" since=""/>
    <fsummary>Set the current end of line mode. </fsummary>
    <desc><p>Set the current end of line mode. 
      </p><p>The input should be one of the ?wxSTC_EOL_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="startStyling" arity="2" clause_i="1" since=""/>
    <fsummary>Set the current styling position to start. </fsummary>
    <desc><p>Set the current styling position to start. 
      </p></desc>
  </func>
  
  <func>
    <name name="setStyling" arity="3" clause_i="1" since=""/>
    <fsummary>Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment. </fsummary>
    <desc><p>Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment. 
      </p></desc>
  </func>
  
  <func>
    <name name="getBufferedDraw" arity="1" clause_i="1" since=""/>
    <fsummary>Is drawing done first into a buffer or direct to the screen? </fsummary>
    <desc><p>Is drawing done first into a buffer or direct to the screen? 
      </p></desc>
  </func>
  
  <func>
    <name name="setBufferedDraw" arity="2" clause_i="1" since=""/>
    <fsummary>If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker. </fsummary>
    <desc><p>If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker. 
      </p></desc>
  </func>
  
  <func>
    <name name="setTabWidth" arity="2" clause_i="1" since=""/>
    <fsummary>Change the visible size of a tab to be a multiple of the width of a space character. </fsummary>
    <desc><p>Change the visible size of a tab to be a multiple of the width of a space character. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTabWidth" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the visible size of a tab. </fsummary>
    <desc><p>Retrieve the visible size of a tab. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCodePage" arity="2" clause_i="1" since=""/>
    <fsummary>Set the code page used to interpret the bytes of the document as characters. </fsummary>
    <desc><p>Set the code page used to interpret the bytes of the document as characters. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerDefine" arity="3" clause_i="1" since=""/>
    <fsummary>See: <c>markerDefine/4</c></fsummary>
  </func>
  
  <func>
    <name name="markerDefine" arity="4" clause_i="1" since=""/>
    <fsummary>Set the symbol used for a particular marker number, and optionally the fore and background colours. </fsummary>
    <desc><p>Set the symbol used for a particular marker number, and optionally the fore and background colours. 
      </p><p>The second argument should be one of the ?wxSTC_MARK_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerSetForeground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the foreground colour used for a particular marker number. </fsummary>
    <desc><p>Set the foreground colour used for a particular marker number. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerSetBackground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the background colour used for a particular marker number. </fsummary>
    <desc><p>Set the background colour used for a particular marker number. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerAdd" arity="3" clause_i="1" since=""/>
    <fsummary>Add a marker to a line, returning an ID which can be used to find or delete the marker. </fsummary>
    <desc><p>Add a marker to a line, returning an ID which can be used to find or delete the marker. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerDelete" arity="3" clause_i="1" since=""/>
    <fsummary>Delete a marker from a line. </fsummary>
    <desc><p>Delete a marker from a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerDeleteAll" arity="2" clause_i="1" since=""/>
    <fsummary>Delete all markers with a particular number from all lines. </fsummary>
    <desc><p>Delete all markers with a particular number from all lines. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerGet" arity="2" clause_i="1" since=""/>
    <fsummary>Get a bit mask of all the markers set on a line. </fsummary>
    <desc><p>Get a bit mask of all the markers set on a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerNext" arity="3" clause_i="1" since=""/>
    <fsummary>Find the next line at or after lineStart that includes a marker in mask. </fsummary>
    <desc><p>Find the next line at or after lineStart that includes a marker in mask. 
      </p><p>Return -1 when no more lines. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerPrevious" arity="3" clause_i="1" since=""/>
    <fsummary>Find the previous line before lineStart that includes a marker in mask. </fsummary>
    <desc><p>Find the previous line before lineStart that includes a marker in mask. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerDefineBitmap" arity="3" clause_i="1" since=""/>
    <fsummary>Define a marker with a <c>wxBitmap</c>. </fsummary>
    <desc><p>Define a marker with a <seeerl marker="wxBitmap"><c>wxBitmap</c></seeerl>. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerAddSet" arity="3" clause_i="1" since=""/>
    <fsummary>Add a set of markers to a line. </fsummary>
    <desc><p>Add a set of markers to a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="markerSetAlpha" arity="3" clause_i="1" since=""/>
    <fsummary>Set the alpha used for a marker that is drawn in the text area, not the margin. </fsummary>
    <desc><p>Set the alpha used for a marker that is drawn in the text area, not the margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMarginType" arity="3" clause_i="1" since=""/>
    <fsummary>Set a margin to be either numeric or symbolic. </fsummary>
    <desc><p>Set a margin to be either numeric or symbolic. 
      </p><p>The second argument should be one of the ?wxSTC_MARGIN_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMarginType" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the type of a margin. </fsummary>
    <desc><p>Retrieve the type of a margin. 
      </p><p>The return value will be one of the ?wxSTC_MARGIN_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMarginWidth" arity="3" clause_i="1" since=""/>
    <fsummary>Set the width of a margin to a width expressed in pixels. </fsummary>
    <desc><p>Set the width of a margin to a width expressed in pixels. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMarginWidth" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the width of a margin in pixels. </fsummary>
    <desc><p>Retrieve the width of a margin in pixels. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMarginMask" arity="3" clause_i="1" since=""/>
    <fsummary>Set a mask that determines which markers are displayed in a margin. </fsummary>
    <desc><p>Set a mask that determines which markers are displayed in a margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMarginMask" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the marker mask of a margin. </fsummary>
    <desc><p>Retrieve the marker mask of a margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMarginSensitive" arity="3" clause_i="1" since=""/>
    <fsummary>Make a margin sensitive or insensitive to mouse clicks. </fsummary>
    <desc><p>Make a margin sensitive or insensitive to mouse clicks. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMarginSensitive" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the mouse click sensitivity of a margin. </fsummary>
    <desc><p>Retrieve the mouse click sensitivity of a margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleClearAll" arity="1" clause_i="1" since=""/>
    <fsummary>Clear all the styles and make equivalent to the global default style. </fsummary>
    <desc><p>Clear all the styles and make equivalent to the global default style. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetForeground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the foreground colour of a style. </fsummary>
    <desc><p>Set the foreground colour of a style. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetBackground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the background colour of a style. </fsummary>
    <desc><p>Set the background colour of a style. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetBold" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to be bold or not. </fsummary>
    <desc><p>Set a style to be bold or not. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetItalic" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to be italic or not. </fsummary>
    <desc><p>Set a style to be italic or not. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetSize" arity="3" clause_i="1" since=""/>
    <fsummary>Set the size of characters of a style. </fsummary>
    <desc><p>Set the size of characters of a style. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetFaceName" arity="3" clause_i="1" since=""/>
    <fsummary>Set the font of a style. </fsummary>
    <desc><p>Set the font of a style. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetEOLFilled" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to have its end of line filled or not. </fsummary>
    <desc><p>Set a style to have its end of line filled or not. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleResetDefault" arity="1" clause_i="1" since=""/>
    <fsummary>Reset the default style to its state at startup. </fsummary>
    <desc><p>Reset the default style to its state at startup. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetUnderline" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to be underlined or not. </fsummary>
    <desc><p>Set a style to be underlined or not. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetCase" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to be mixed case, or to force upper or lower case. </fsummary>
    <desc><p>Set a style to be mixed case, or to force upper or lower case. 
      </p><p>The second argument should be one of the ?wxSTC_CASE_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetHotSpot" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to be a hotspot or not. </fsummary>
    <desc><p>Set a style to be a hotspot or not. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelForeground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the foreground colour of the main and additional selections and whether to use this setting. </fsummary>
    <desc><p>Set the foreground colour of the main and additional selections and whether to use this setting. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelBackground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the background colour of the main and additional selections and whether to use this setting. </fsummary>
    <desc><p>Set the background colour of the main and additional selections and whether to use this setting. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSelAlpha" arity="1" clause_i="1" since=""/>
    <fsummary>Get the alpha of the selection. </fsummary>
    <desc><p>Get the alpha of the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelAlpha" arity="2" clause_i="1" since=""/>
    <fsummary>Set the alpha of the selection. </fsummary>
    <desc><p>Set the alpha of the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretForeground" arity="2" clause_i="1" since=""/>
    <fsummary>Set the foreground colour of the caret. </fsummary>
    <desc><p>Set the foreground colour of the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="cmdKeyAssign" arity="4" clause_i="1" since=""/>
    <fsummary>When key+modifier combination keyDefinition is pressed perform sciCommand. </fsummary>
    <desc><p>When key+modifier combination keyDefinition is pressed perform sciCommand. 
      </p><p>The second argument should be a bit list containing one or more of the ?wxSTC_KEYMOD_*  constants and the third argument should be one of the ?wxSTC_CMD_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="cmdKeyClear" arity="3" clause_i="1" since=""/>
    <fsummary>When key+modifier combination keyDefinition is pressed do nothing. </fsummary>
    <desc><p>When key+modifier combination keyDefinition is pressed do nothing. 
      </p><p>The second argument should be a bit list containing one or more of the ?wxSTC_KEYMOD_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="cmdKeyClearAll" arity="1" clause_i="1" since=""/>
    <fsummary>Drop all key mappings. </fsummary>
    <desc><p>Drop all key mappings. 
      </p></desc>
  </func>
  
  <func>
    <name name="setStyleBytes" arity="2" clause_i="1" since=""/>
    <fsummary>Set the styles for a segment of the document. </fsummary>
    <desc><p>Set the styles for a segment of the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetVisible" arity="3" clause_i="1" since=""/>
    <fsummary>Set a style to be visible or not. </fsummary>
    <desc><p>Set a style to be visible or not. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretPeriod" arity="1" clause_i="1" since=""/>
    <fsummary>Get the time in milliseconds that the caret is on and off. </fsummary>
    <desc><p>Get the time in milliseconds that the caret is on and off. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretPeriod" arity="2" clause_i="1" since=""/>
    <fsummary>Get the time in milliseconds that the caret is on and off. </fsummary>
    <desc><p>Get the time in milliseconds that the caret is on and off. 
      </p><p>0 = steady on. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWordChars" arity="2" clause_i="1" since=""/>
    <fsummary>Set the set of characters making up words for when moving or selecting by word. </fsummary>
    <desc><p>Set the set of characters making up words for when moving or selecting by word. 
      </p><p>First sets defaults like SetCharsDefault. 
      </p></desc>
  </func>
  
  <func>
    <name name="beginUndoAction" arity="1" clause_i="1" since=""/>
    <fsummary>Start a sequence of actions that is undone and redone as a unit. </fsummary>
    <desc><p>Start a sequence of actions that is undone and redone as a unit. 
      </p><p>May be nested. 
      </p></desc>
  </func>
  
  <func>
    <name name="endUndoAction" arity="1" clause_i="1" since=""/>
    <fsummary>End a sequence of actions that is undone and redone as a unit. </fsummary>
    <desc><p>End a sequence of actions that is undone and redone as a unit. 
      </p></desc>
  </func>
  
  <func>
    <name name="indicatorSetStyle" arity="3" clause_i="1" since=""/>
    <fsummary>Set an indicator to plain, squiggle or TT. </fsummary>
    <desc><p>Set an indicator to plain, squiggle or TT. 
      </p><p>The second argument should be one of the ?wxSTC_INDIC_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="indicatorGetStyle" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the style of an indicator. </fsummary>
    <desc><p>Retrieve the style of an indicator. 
      </p><p>The return value will be one of the ?wxSTC_INDIC_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="indicatorSetForeground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the foreground colour of an indicator. </fsummary>
    <desc><p>Set the foreground colour of an indicator. 
      </p></desc>
  </func>
  
  <func>
    <name name="indicatorGetForeground" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the foreground colour of an indicator. </fsummary>
    <desc><p>Retrieve the foreground colour of an indicator. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWhitespaceForeground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the foreground colour of all whitespace and whether to use this setting. </fsummary>
    <desc><p>Set the foreground colour of all whitespace and whether to use this setting. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWhitespaceBackground" arity="3" clause_i="1" since=""/>
    <fsummary>Set the background colour of all whitespace and whether to use this setting. </fsummary>
    <desc><p>Set the background colour of all whitespace and whether to use this setting. 
      </p></desc>
  </func>
  
  <func>
    <name name="getStyleBits" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve number of bits in style bytes used to hold the lexical state. </fsummary>
    <desc><p>Retrieve number of bits in style bytes used to hold the lexical state. 
      </p><p>Deprecated: 
      
      </p></desc>
  </func>
  
  <func>
    <name name="setLineState" arity="3" clause_i="1" since=""/>
    <fsummary>Used to hold extra styling information for each line. </fsummary>
    <desc><p>Used to hold extra styling information for each line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineState" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the extra styling information for a line. </fsummary>
    <desc><p>Retrieve the extra styling information for a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMaxLineState" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the last line number that has line state. </fsummary>
    <desc><p>Retrieve the last line number that has line state. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretLineVisible" arity="1" clause_i="1" since=""/>
    <fsummary>Is the background of the line containing the caret in a different colour? </fsummary>
    <desc><p>Is the background of the line containing the caret in a different colour? 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretLineVisible" arity="2" clause_i="1" since=""/>
    <fsummary>Display the background of the line containing the caret in a different colour. </fsummary>
    <desc><p>Display the background of the line containing the caret in a different colour. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretLineBackground" arity="1" clause_i="1" since=""/>
    <fsummary>Get the colour of the background of the line containing the caret. </fsummary>
    <desc><p>Get the colour of the background of the line containing the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretLineBackground" arity="2" clause_i="1" since=""/>
    <fsummary>Set the colour of the background of the line containing the caret. </fsummary>
    <desc><p>Set the colour of the background of the line containing the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompShow" arity="3" clause_i="1" since=""/>
    <fsummary>Display a auto-completion list. </fsummary>
    <desc><p>Display a auto-completion list. 
      </p><p>The lengthEntered parameter indicates how many characters before the caret should be used to provide context. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompCancel" arity="1" clause_i="1" since=""/>
    <fsummary>Remove the auto-completion list from the screen. </fsummary>
    <desc><p>Remove the auto-completion list from the screen. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompActive" arity="1" clause_i="1" since=""/>
    <fsummary>Is there an auto-completion list visible? </fsummary>
    <desc><p>Is there an auto-completion list visible? 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompPosStart" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the position of the caret when the auto-completion list was displayed. </fsummary>
    <desc><p>Retrieve the position of the caret when the auto-completion list was displayed. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompComplete" arity="1" clause_i="1" since=""/>
    <fsummary>User has selected an item so remove the list and insert the selection. </fsummary>
    <desc><p>User has selected an item so remove the list and insert the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompStops" arity="2" clause_i="1" since=""/>
    <fsummary>Define a set of character that when typed cancel the auto-completion list. </fsummary>
    <desc><p>Define a set of character that when typed cancel the auto-completion list. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetSeparator" arity="2" clause_i="1" since=""/>
    <fsummary>Change the separator character in the string setting up an auto-completion list. </fsummary>
    <desc><p>Change the separator character in the string setting up an auto-completion list. 
      </p><p>Default is space but can be changed if items contain space. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetSeparator" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the auto-completion list separator character. </fsummary>
    <desc><p>Retrieve the auto-completion list separator character. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSelect" arity="2" clause_i="1" since=""/>
    <fsummary>Select the item in the auto-completion list that starts with a string. </fsummary>
    <desc><p>Select the item in the auto-completion list that starts with a string. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetCancelAtStart" arity="2" clause_i="1" since=""/>
    <fsummary>Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created. </fsummary>
    <desc><p>Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetCancelAtStart" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether auto-completion cancelled by backspacing before start. </fsummary>
    <desc><p>Retrieve whether auto-completion cancelled by backspacing before start. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetFillUps" arity="2" clause_i="1" since=""/>
    <fsummary>Define a set of characters that when typed will cause the autocompletion to choose the selected item. </fsummary>
    <desc><p>Define a set of characters that when typed will cause the autocompletion to choose the selected item. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetChooseSingle" arity="2" clause_i="1" since=""/>
    <fsummary>Should a single item auto-completion list automatically choose the item. </fsummary>
    <desc><p>Should a single item auto-completion list automatically choose the item. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetChooseSingle" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether a single item auto-completion list automatically choose the item. </fsummary>
    <desc><p>Retrieve whether a single item auto-completion list automatically choose the item. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetIgnoreCase" arity="2" clause_i="1" since=""/>
    <fsummary>Set whether case is significant when performing auto-completion searches. </fsummary>
    <desc><p>Set whether case is significant when performing auto-completion searches. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetIgnoreCase" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve state of ignore case flag. </fsummary>
    <desc><p>Retrieve state of ignore case flag. 
      </p></desc>
  </func>
  
  <func>
    <name name="userListShow" arity="3" clause_i="1" since=""/>
    <fsummary>Display a list of strings and send notification when user chooses one. </fsummary>
    <desc><p>Display a list of strings and send notification when user chooses one. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetAutoHide" arity="2" clause_i="1" since=""/>
    <fsummary>Set whether or not autocompletion is hidden automatically when nothing matches. </fsummary>
    <desc><p>Set whether or not autocompletion is hidden automatically when nothing matches. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetAutoHide" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether or not autocompletion is hidden automatically when nothing matches. </fsummary>
    <desc><p>Retrieve whether or not autocompletion is hidden automatically when nothing matches. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetDropRestOfWord" arity="2" clause_i="1" since=""/>
    <fsummary>Set whether or not autocompletion deletes any word characters after the inserted text upon completion. </fsummary>
    <desc><p>Set whether or not autocompletion deletes any word characters after the inserted text upon completion. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetDropRestOfWord" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion. </fsummary>
    <desc><p>Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion. 
      </p></desc>
  </func>
  
  <func>
    <name name="registerImage" arity="3" clause_i="1" since=""/>
    <fsummary>Register an image for use in autocompletion lists. </fsummary>
    <desc><p>Register an image for use in autocompletion lists. 
      </p></desc>
  </func>
  
  <func>
    <name name="clearRegisteredImages" arity="1" clause_i="1" since=""/>
    <fsummary>Clear all the registered images. </fsummary>
    <desc><p>Clear all the registered images. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetTypeSeparator" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the auto-completion list type-separator character. </fsummary>
    <desc><p>Retrieve the auto-completion list type-separator character. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetTypeSeparator" arity="2" clause_i="1" since=""/>
    <fsummary>Change the type-separator character in the string setting up an auto-completion list. </fsummary>
    <desc><p>Change the type-separator character in the string setting up an auto-completion list. 
      </p><p>Default is '?' but can be changed if items contain '?'. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetMaxWidth" arity="2" clause_i="1" since=""/>
    <fsummary>Set the maximum width, in characters, of auto-completion and user lists. </fsummary>
    <desc><p>Set the maximum width, in characters, of auto-completion and user lists. 
      </p><p>Set to 0 to autosize to fit longest item, which is the default. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetMaxWidth" arity="1" clause_i="1" since=""/>
    <fsummary>Get the maximum width, in characters, of auto-completion and user lists. </fsummary>
    <desc><p>Get the maximum width, in characters, of auto-completion and user lists. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompSetMaxHeight" arity="2" clause_i="1" since=""/>
    <fsummary>Set the maximum height, in rows, of auto-completion and user lists. </fsummary>
    <desc><p>Set the maximum height, in rows, of auto-completion and user lists. 
      </p><p>The default is 5 rows. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetMaxHeight" arity="1" clause_i="1" since=""/>
    <fsummary>Set the maximum height, in rows, of auto-completion and user lists. </fsummary>
    <desc><p>Set the maximum height, in rows, of auto-completion and user lists. 
      </p></desc>
  </func>
  
  <func>
    <name name="setIndent" arity="2" clause_i="1" since=""/>
    <fsummary>Set the number of spaces used for one level of indentation. </fsummary>
    <desc><p>Set the number of spaces used for one level of indentation. 
      </p></desc>
  </func>
  
  <func>
    <name name="getIndent" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve indentation size. </fsummary>
    <desc><p>Retrieve indentation size. 
      </p></desc>
  </func>
  
  <func>
    <name name="setUseTabs" arity="2" clause_i="1" since=""/>
    <fsummary>Indentation will only use space characters if useTabs is false, otherwise it will use a combination of tabs and spaces. </fsummary>
    <desc><p>Indentation will only use space characters if useTabs is false, otherwise it will use a combination of tabs and spaces. 
      </p></desc>
  </func>
  
  <func>
    <name name="getUseTabs" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether tabs will be used in indentation. </fsummary>
    <desc><p>Retrieve whether tabs will be used in indentation. 
      </p></desc>
  </func>
  
  <func>
    <name name="setLineIndentation" arity="3" clause_i="1" since=""/>
    <fsummary>Change the indentation of a line to a number of columns. </fsummary>
    <desc><p>Change the indentation of a line to a number of columns. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineIndentation" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the number of columns that a line is indented. </fsummary>
    <desc><p>Retrieve the number of columns that a line is indented. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineIndentPosition" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the position before the first non indentation character on a line. </fsummary>
    <desc><p>Retrieve the position before the first non indentation character on a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getColumn" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the column number of a position, taking tab width into account. </fsummary>
    <desc><p>Retrieve the column number of a position, taking tab width into account. 
      </p></desc>
  </func>
  
  <func>
    <name name="setUseHorizontalScrollBar" arity="2" clause_i="1" since=""/>
    <fsummary>Show or hide the horizontal scroll bar. </fsummary>
    <desc><p>Show or hide the horizontal scroll bar. 
      </p></desc>
  </func>
  
  <func>
    <name name="getUseHorizontalScrollBar" arity="1" clause_i="1" since=""/>
    <fsummary>Is the horizontal scroll bar visible? </fsummary>
    <desc><p>Is the horizontal scroll bar visible? 
      </p></desc>
  </func>
  
  <func>
    <name name="setIndentationGuides" arity="2" clause_i="1" since=""/>
    <fsummary>Show or hide indentation guides. </fsummary>
    <desc><p>Show or hide indentation guides. 
      </p><p>The input should be one of the ?wxSTC_IV_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getIndentationGuides" arity="1" clause_i="1" since=""/>
    <fsummary>Are the indentation guides visible? </fsummary>
    <desc><p>Are the indentation guides visible? 
      </p><p>The return value will be one of the ?wxSTC_IV_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setHighlightGuide" arity="2" clause_i="1" since=""/>
    <fsummary>Set the highlighted indentation guide column. </fsummary>
    <desc><p>Set the highlighted indentation guide column. 
      </p><p>0 = no highlighted guide. 
      </p></desc>
  </func>
  
  <func>
    <name name="getHighlightGuide" arity="1" clause_i="1" since=""/>
    <fsummary>Get the highlighted indentation guide column. </fsummary>
    <desc><p>Get the highlighted indentation guide column. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineEndPosition" arity="2" clause_i="1" since=""/>
    <fsummary>Get the position after the last visible characters on a line. </fsummary>
    <desc><p>Get the position after the last visible characters on a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCodePage" arity="1" clause_i="1" since=""/>
    <fsummary>Get the code page used to interpret the bytes of the document as characters. </fsummary>
    <desc><p>Get the code page used to interpret the bytes of the document as characters. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretForeground" arity="1" clause_i="1" since=""/>
    <fsummary>Get the foreground colour of the caret. </fsummary>
    <desc><p>Get the foreground colour of the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="getReadOnly" arity="1" clause_i="1" since=""/>
    <fsummary>In read-only mode? </fsummary>
    <desc><p>In read-only mode? 
      </p></desc>
  </func>
  
  <func>
    <name name="setCurrentPos" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the position of the caret. </fsummary>
    <desc><p>Sets the position of the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelectionStart" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the position that starts the selection - this becomes the anchor. </fsummary>
    <desc><p>Sets the position that starts the selection - this becomes the anchor. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSelectionStart" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the position at the start of the selection. </fsummary>
    <desc><p>Returns the position at the start of the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelectionEnd" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the position that ends the selection - this becomes the caret. </fsummary>
    <desc><p>Sets the position that ends the selection - this becomes the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSelectionEnd" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the position at the end of the selection. </fsummary>
    <desc><p>Returns the position at the end of the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="setPrintMagnification" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the print magnification added to the point size of each style for printing. </fsummary>
    <desc><p>Sets the print magnification added to the point size of each style for printing. 
      </p></desc>
  </func>
  
  <func>
    <name name="getPrintMagnification" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the print magnification. </fsummary>
    <desc><p>Returns the print magnification. 
      </p></desc>
  </func>
  
  <func>
    <name name="setPrintColourMode" arity="2" clause_i="1" since=""/>
    <fsummary>Modify colours when printing for clearer printed text. </fsummary>
    <desc><p>Modify colours when printing for clearer printed text. 
      </p><p>The input should be one of the ?wxSTC_PRINT_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getPrintColourMode" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the print colour mode. </fsummary>
    <desc><p>Returns the print colour mode. 
      </p><p>The return value will be one of the ?wxSTC_PRINT_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="findText" arity="4" clause_i="1" since=""/>
    <fsummary>See: <c>findText/5</c></fsummary>
  </func>
  
  <func>
    <name name="findText" arity="5" clause_i="1" since=""/>
    <fsummary/>
    <desc><p><c> Find some text in the document. @param minPos The position (starting from zero) in the document at which to begin the search @param maxPos The last position (starting from zero) in the document to which the search will be restricted. @param text The text to search for. @param flags (Optional) The search flags. This should be a bit list containing one or more of the @link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants. </c> 
      </p><p>Return: The position (starting from zero) in the document at which the text was found or wxSTC_INVALID_POSITION if the search fails. 
      </p><p>Remark: A backwards search can be performed by setting minPos to be greater than maxPos. 
      </p></desc>
  </func>
  
  <func>
    <name name="formatRange" arity="8" clause_i="1" since=""/>
    <fsummary>On Windows, will draw the document into a display context such as a printer. </fsummary>
    <desc><p>On Windows, will draw the document into a display context such as a printer. 
      </p></desc>
  </func>
  
  <func>
    <name name="getFirstVisibleLine" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the display line at the top of the display. </fsummary>
    <desc><p>Retrieve the display line at the top of the display. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLine" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the contents of a line. </fsummary>
    <desc><p>Retrieve the contents of a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineCount" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the number of lines in the document. </fsummary>
    <desc><p>Returns the number of lines in the document. 
      </p><p>There is always at least one. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMarginLeft" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the size in pixels of the left margin. </fsummary>
    <desc><p>Sets the size in pixels of the left margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMarginLeft" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the size in pixels of the left margin. </fsummary>
    <desc><p>Returns the size in pixels of the left margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMarginRight" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the size in pixels of the right margin. </fsummary>
    <desc><p>Sets the size in pixels of the right margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMarginRight" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the size in pixels of the right margin. </fsummary>
    <desc><p>Returns the size in pixels of the right margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="getModify" arity="1" clause_i="1" since=""/>
    <fsummary>Is the document different from when it was last saved? </fsummary>
    <desc><p>Is the document different from when it was last saved? 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelection" arity="3" clause_i="1" since=""/>
    <fsummary>Selects the text starting at the first position up to (but not including) the character at the last position. </fsummary>
    <desc><p>Selects the text starting at the first position up to (but not including) the character at the last position. 
      </p><p>If both parameters are equal to -1 all text in the control is selected.
      </p><p>Notice that the insertion point will be moved to <c>from</c> by this function.
      </p><p>See: <seemfa marker="#selectAll/1"><c>selectAll/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getSelectedText" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the selected text. </fsummary>
    <desc><p>Retrieve the selected text. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTextRange" arity="3" clause_i="1" since=""/>
    <fsummary>Retrieve a range of text. </fsummary>
    <desc><p>Retrieve a range of text. 
      </p></desc>
  </func>
  
  <func>
    <name name="hideSelection" arity="2" clause_i="1" since=""/>
    <fsummary>Draw the selection in normal style or with selection highlighted. </fsummary>
    <desc><p>Draw the selection in normal style or with selection highlighted. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineFromPosition" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the line containing a position. </fsummary>
    <desc><p>Retrieve the line containing a position. 
      </p></desc>
  </func>
  
  <func>
    <name name="positionFromLine" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the position at the start of a line. </fsummary>
    <desc><p>Retrieve the position at the start of a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineScroll" arity="3" clause_i="1" since=""/>
    <fsummary>Scroll horizontally and vertically. </fsummary>
    <desc><p>Scroll horizontally and vertically. 
      </p></desc>
  </func>
  
  <func>
    <name name="ensureCaretVisible" arity="1" clause_i="1" since=""/>
    <fsummary>Ensure the caret is visible. </fsummary>
    <desc><p>Ensure the caret is visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="replaceSelection" arity="2" clause_i="1" since=""/>
    <fsummary>Replace the selected text with the argument text. </fsummary>
    <desc><p>Replace the selected text with the argument text. 
      </p></desc>
  </func>
  
  <func>
    <name name="setReadOnly" arity="2" clause_i="1" since=""/>
    <fsummary>Set to read only or read write. </fsummary>
    <desc><p>Set to read only or read write. 
      </p></desc>
  </func>
  
  <func>
    <name name="canPaste" arity="1" clause_i="1" since=""/>
    <fsummary>Will a paste succeed? </fsummary>
    <desc><p>Will a paste succeed? 
      </p></desc>
  </func>
  
  <func>
    <name name="canUndo" arity="1" clause_i="1" since=""/>
    <fsummary>Are there any undoable actions in the undo history? </fsummary>
    <desc><p>Are there any undoable actions in the undo history? 
      </p></desc>
  </func>
  
  <func>
    <name name="emptyUndoBuffer" arity="1" clause_i="1" since=""/>
    <fsummary>Delete the undo history. </fsummary>
    <desc><p>Delete the undo history. 
      </p></desc>
  </func>
  
  <func>
    <name name="undo" arity="1" clause_i="1" since=""/>
    <fsummary>Undo one action in the undo history. </fsummary>
    <desc><p>Undo one action in the undo history. 
      </p></desc>
  </func>
  
  <func>
    <name name="cut" arity="1" clause_i="1" since=""/>
    <fsummary>Cut the selection to the clipboard. </fsummary>
    <desc><p>Cut the selection to the clipboard. 
      </p></desc>
  </func>
  
  <func>
    <name name="copy" arity="1" clause_i="1" since=""/>
    <fsummary>Copy the selection to the clipboard. </fsummary>
    <desc><p>Copy the selection to the clipboard. 
      </p></desc>
  </func>
  
  <func>
    <name name="paste" arity="1" clause_i="1" since=""/>
    <fsummary>Paste the contents of the clipboard into the document replacing the selection. </fsummary>
    <desc><p>Paste the contents of the clipboard into the document replacing the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="clear" arity="1" clause_i="1" since=""/>
    <fsummary>Clear the selection. </fsummary>
    <desc><p>Clear the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="setText" arity="2" clause_i="1" since=""/>
    <fsummary>Replace the contents of the document with the argument text. </fsummary>
    <desc><p>Replace the contents of the document with the argument text. 
      </p></desc>
  </func>
  
  <func>
    <name name="getText" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve all the text in the document. </fsummary>
    <desc><p>Retrieve all the text in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTextLength" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the number of characters in the document. </fsummary>
    <desc><p>Retrieve the number of characters in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="getOvertype" arity="1" clause_i="1" since=""/>
    <fsummary>Returns true if overtype mode is active otherwise false is returned. </fsummary>
    <desc><p>Returns true if overtype mode is active otherwise false is returned. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretWidth" arity="2" clause_i="1" since=""/>
    <fsummary>Set the width of the insert mode caret. </fsummary>
    <desc><p>Set the width of the insert mode caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretWidth" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the width of the insert mode caret. </fsummary>
    <desc><p>Returns the width of the insert mode caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="setTargetStart" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the position that starts the target which is used for updating the document without affecting the scroll position. </fsummary>
    <desc><p>Sets the position that starts the target which is used for updating the document without affecting the scroll position. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTargetStart" arity="1" clause_i="1" since=""/>
    <fsummary>Get the position that starts the target. </fsummary>
    <desc><p>Get the position that starts the target. 
      </p></desc>
  </func>
  
  <func>
    <name name="setTargetEnd" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the position that ends the target which is used for updating the document without affecting the scroll position. </fsummary>
    <desc><p>Sets the position that ends the target which is used for updating the document without affecting the scroll position. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTargetEnd" arity="1" clause_i="1" since=""/>
    <fsummary>Get the position that ends the target. </fsummary>
    <desc><p>Get the position that ends the target. 
      </p></desc>
  </func>
  
  <func>
    <name name="replaceTarget" arity="2" clause_i="1" since=""/>
    <fsummary>Replace the target text with the argument text. </fsummary>
    <desc><p>Replace the target text with the argument text. 
      </p><p>Text is counted so it can contain NULs. Returns the length of the replacement text. 
      </p></desc>
  </func>
  
  <func>
    <name name="searchInTarget" arity="2" clause_i="1" since=""/>
    <fsummary>Search for a counted string in the target and set the target to the found range. </fsummary>
    <desc><p>Search for a counted string in the target and set the target to the found range. 
      </p><p>Text is counted so it can contain NULs. Returns length of range or -1 for failure in which case target is not moved. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSearchFlags" arity="2" clause_i="1" since=""/>
    <fsummary>Set the search flags used by SearchInTarget. </fsummary>
    <desc><p>Set the search flags used by SearchInTarget. 
      </p><p>The input should be a bit list containing one or more of the ?wxSTC_FIND_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSearchFlags" arity="1" clause_i="1" since=""/>
    <fsummary>Get the search flags used by SearchInTarget. </fsummary>
    <desc><p>Get the search flags used by SearchInTarget. 
      </p><p>The return value will be a bit list containing one or more of the ?wxSTC_FIND_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipShow" arity="3" clause_i="1" since=""/>
    <fsummary>Show a call tip containing a definition near position pos. </fsummary>
    <desc><p>Show a call tip containing a definition near position pos. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipCancel" arity="1" clause_i="1" since=""/>
    <fsummary>Remove the call tip from the screen. </fsummary>
    <desc><p>Remove the call tip from the screen. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipActive" arity="1" clause_i="1" since=""/>
    <fsummary>Is there an active call tip? </fsummary>
    <desc><p>Is there an active call tip? 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipPosAtStart" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the position where the caret was before displaying the call tip. </fsummary>
    <desc><p>Retrieve the position where the caret was before displaying the call tip. 
      </p><p>Since: 3.1.0 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipSetHighlight" arity="3" clause_i="1" since=""/>
    <fsummary>Highlight a segment of the definition. </fsummary>
    <desc><p>Highlight a segment of the definition. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipSetBackground" arity="2" clause_i="1" since=""/>
    <fsummary>Set the background colour for the call tip. </fsummary>
    <desc><p>Set the background colour for the call tip. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipSetForeground" arity="2" clause_i="1" since=""/>
    <fsummary>Set the foreground colour for the call tip. </fsummary>
    <desc><p>Set the foreground colour for the call tip. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipSetForegroundHighlight" arity="2" clause_i="1" since=""/>
    <fsummary>Set the foreground colour for the highlighted part of the call tip. </fsummary>
    <desc><p>Set the foreground colour for the highlighted part of the call tip. 
      </p></desc>
  </func>
  
  <func>
    <name name="callTipUseStyle" arity="2" clause_i="1" since=""/>
    <fsummary>Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels. </fsummary>
    <desc><p>Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels. 
      </p></desc>
  </func>
  
  <func>
    <name name="visibleFromDocLine" arity="2" clause_i="1" since=""/>
    <fsummary>Find the display line of a document line taking hidden lines into account. </fsummary>
    <desc><p>Find the display line of a document line taking hidden lines into account. 
      </p></desc>
  </func>
  
  <func>
    <name name="docLineFromVisible" arity="2" clause_i="1" since=""/>
    <fsummary>Find the document line of a display line taking hidden lines into account. </fsummary>
    <desc><p>Find the document line of a display line taking hidden lines into account. 
      </p></desc>
  </func>
  
  <func>
    <name name="wrapCount" arity="2" clause_i="1" since=""/>
    <fsummary>The number of display lines needed to wrap a document line. </fsummary>
    <desc><p>The number of display lines needed to wrap a document line. 
      </p></desc>
  </func>
  
  <func>
    <name name="setFoldLevel" arity="3" clause_i="1" since=""/>
    <fsummary>Set the fold level of a line. </fsummary>
    <desc><p>Set the fold level of a line. 
      </p><p>This encodes an integer level along with flags indicating whether the line is a header and whether it is effectively white space. 
      </p></desc>
  </func>
  
  <func>
    <name name="getFoldLevel" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the fold level of a line. </fsummary>
    <desc><p>Retrieve the fold level of a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLastChild" arity="3" clause_i="1" since=""/>
    <fsummary>Find the last child line of a header line. </fsummary>
    <desc><p>Find the last child line of a header line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getFoldParent" arity="2" clause_i="1" since=""/>
    <fsummary>Find the parent line of a child line. </fsummary>
    <desc><p>Find the parent line of a child line. 
      </p></desc>
  </func>
  
  <func>
    <name name="showLines" arity="3" clause_i="1" since=""/>
    <fsummary>Make a range of lines visible. </fsummary>
    <desc><p>Make a range of lines visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="hideLines" arity="3" clause_i="1" since=""/>
    <fsummary>Make a range of lines invisible. </fsummary>
    <desc><p>Make a range of lines invisible. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineVisible" arity="2" clause_i="1" since=""/>
    <fsummary>Is a line visible? </fsummary>
    <desc><p>Is a line visible? 
      </p></desc>
  </func>
  
  <func>
    <name name="setFoldExpanded" arity="3" clause_i="1" since=""/>
    <fsummary>Show the children of a header line. </fsummary>
    <desc><p>Show the children of a header line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getFoldExpanded" arity="2" clause_i="1" since=""/>
    <fsummary>Is a header line expanded? </fsummary>
    <desc><p>Is a header line expanded? 
      </p></desc>
  </func>
  
  <func>
    <name name="toggleFold" arity="2" clause_i="1" since=""/>
    <fsummary>Switch a header line between expanded and contracted. </fsummary>
    <desc><p>Switch a header line between expanded and contracted. 
      </p></desc>
  </func>
  
  <func>
    <name name="ensureVisible" arity="2" clause_i="1" since=""/>
    <fsummary>Ensure a particular line is visible by expanding any header line hiding it. </fsummary>
    <desc><p>Ensure a particular line is visible by expanding any header line hiding it. 
      </p></desc>
  </func>
  
  <func>
    <name name="setFoldFlags" arity="2" clause_i="1" since=""/>
    <fsummary>Set some style options for folding. </fsummary>
    <desc><p>Set some style options for folding. 
      </p><p>The second argument should be a bit list containing one or more of the ?wxSTC_FOLDFLAG_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="ensureVisibleEnforcePolicy" arity="2" clause_i="1" since=""/>
    <fsummary>Ensure a particular line is visible by expanding any header line hiding it. </fsummary>
    <desc><p>Ensure a particular line is visible by expanding any header line hiding it. 
      </p><p>Use the currently set visibility policy to determine which range to display. 
      </p></desc>
  </func>
  
  <func>
    <name name="setTabIndents" arity="2" clause_i="1" since=""/>
    <fsummary>Sets whether a tab pressed when caret is within indentation indents. </fsummary>
    <desc><p>Sets whether a tab pressed when caret is within indentation indents. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTabIndents" arity="1" clause_i="1" since=""/>
    <fsummary>Does a tab pressed when caret is within indentation indent? </fsummary>
    <desc><p>Does a tab pressed when caret is within indentation indent? 
      </p></desc>
  </func>
  
  <func>
    <name name="setBackSpaceUnIndents" arity="2" clause_i="1" since=""/>
    <fsummary>Sets whether a backspace pressed when caret is within indentation unindents. </fsummary>
    <desc><p>Sets whether a backspace pressed when caret is within indentation unindents. 
      </p></desc>
  </func>
  
  <func>
    <name name="getBackSpaceUnIndents" arity="1" clause_i="1" since=""/>
    <fsummary>Does a backspace pressed when caret is within indentation unindent? </fsummary>
    <desc><p>Does a backspace pressed when caret is within indentation unindent? 
      </p></desc>
  </func>
  
  <func>
    <name name="setMouseDwellTime" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the time the mouse must sit still to generate a mouse dwell event. </fsummary>
    <desc><p>Sets the time the mouse must sit still to generate a mouse dwell event. 
      </p><p>The input should be a time in milliseconds or wxSTC_TIME_FOREVER. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMouseDwellTime" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the time the mouse must sit still to generate a mouse dwell event. </fsummary>
    <desc><p>Retrieve the time the mouse must sit still to generate a mouse dwell event. 
      </p><p>The return value will be a time in milliseconds or wxSTC_TIME_FOREVER. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordStartPosition" arity="3" clause_i="1" since=""/>
    <fsummary>Get position of start of word. </fsummary>
    <desc><p>Get position of start of word. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordEndPosition" arity="3" clause_i="1" since=""/>
    <fsummary>Get position of end of word. </fsummary>
    <desc><p>Get position of end of word. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWrapMode" arity="2" clause_i="1" since=""/>
    <fsummary>Sets whether text is word wrapped. </fsummary>
    <desc><p>Sets whether text is word wrapped. 
      </p><p>The input should be one of the ?wxSTC_WRAP_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getWrapMode" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether text is word wrapped. </fsummary>
    <desc><p>Retrieve whether text is word wrapped. 
      </p><p>The return value will be one of the ?wxSTC_WRAP_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWrapVisualFlags" arity="2" clause_i="1" since=""/>
    <fsummary>Set the display mode of visual flags for wrapped lines. </fsummary>
    <desc><p>Set the display mode of visual flags for wrapped lines. 
      </p><p>The input should be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAG_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getWrapVisualFlags" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the display mode of visual flags for wrapped lines. </fsummary>
    <desc><p>Retrieve the display mode of visual flags for wrapped lines. 
      </p><p>The return value will be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAG_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWrapVisualFlagsLocation" arity="2" clause_i="1" since=""/>
    <fsummary>Set the location of visual flags for wrapped lines. </fsummary>
    <desc><p>Set the location of visual flags for wrapped lines. 
      </p><p>The input should be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAGLOC_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getWrapVisualFlagsLocation" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the location of visual flags for wrapped lines. </fsummary>
    <desc><p>Retrieve the location of visual flags for wrapped lines. 
      </p><p>The return value will be a bit list containing one or more of the ?wxSTC_WRAPVISUALFLAGLOC_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWrapStartIndent" arity="2" clause_i="1" since=""/>
    <fsummary>Set the start indent for wrapped lines. </fsummary>
    <desc><p>Set the start indent for wrapped lines. 
      </p></desc>
  </func>
  
  <func>
    <name name="getWrapStartIndent" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the start indent for wrapped lines. </fsummary>
    <desc><p>Retrieve the start indent for wrapped lines. 
      </p></desc>
  </func>
  
  <func>
    <name name="setLayoutCache" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the degree of caching of layout information. </fsummary>
    <desc><p>Sets the degree of caching of layout information. 
      </p><p>The input should be one of the ?wxSTC_CACHE_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLayoutCache" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the degree of caching of layout information. </fsummary>
    <desc><p>Retrieve the degree of caching of layout information. 
      </p><p>The return value will be one of the ?wxSTC_CACHE_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setScrollWidth" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the document width assumed for scrolling. </fsummary>
    <desc><p>Sets the document width assumed for scrolling. 
      </p></desc>
  </func>
  
  <func>
    <name name="getScrollWidth" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the document width assumed for scrolling. </fsummary>
    <desc><p>Retrieve the document width assumed for scrolling. 
      </p></desc>
  </func>
  
  <func>
    <name name="textWidth" arity="3" clause_i="1" since=""/>
    <fsummary>Measure the pixel width of some text in a particular style. </fsummary>
    <desc><p>Measure the pixel width of some text in a particular style. 
      </p><p>Does not handle tab or control characters. 
      </p></desc>
  </func>
  
  <func>
    <name name="getEndAtLastLine" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve whether the maximum scroll position has the last line at the bottom of the view. </fsummary>
    <desc><p>Retrieve whether the maximum scroll position has the last line at the bottom of the view. 
      </p></desc>
  </func>
  
  <func>
    <name name="textHeight" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the height of a particular line of text in pixels. </fsummary>
    <desc><p>Retrieve the height of a particular line of text in pixels. 
      </p></desc>
  </func>
  
  <func>
    <name name="setUseVerticalScrollBar" arity="2" clause_i="1" since=""/>
    <fsummary>Show or hide the vertical scroll bar. </fsummary>
    <desc><p>Show or hide the vertical scroll bar. 
      </p></desc>
  </func>
  
  <func>
    <name name="getUseVerticalScrollBar" arity="1" clause_i="1" since=""/>
    <fsummary>Is the vertical scroll bar visible? </fsummary>
    <desc><p>Is the vertical scroll bar visible? 
      </p></desc>
  </func>
  
  <func>
    <name name="appendText" arity="2" clause_i="1" since=""/>
    <fsummary>Append a string to the end of the document without changing the selection. </fsummary>
    <desc><p>Append a string to the end of the document without changing the selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTwoPhaseDraw" arity="1" clause_i="1" since=""/>
    <fsummary>Is drawing done in two phases with backgrounds drawn before foregrounds? </fsummary>
    <desc><p>Is drawing done in two phases with backgrounds drawn before foregrounds? 
      </p></desc>
  </func>
  
  <func>
    <name name="setTwoPhaseDraw" arity="2" clause_i="1" since=""/>
    <fsummary>In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground. </fsummary>
    <desc><p>In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground. 
      </p><p>This avoids chopping off characters that overlap the next run. 
      </p></desc>
  </func>
  
  <func>
    <name name="targetFromSelection" arity="1" clause_i="1" since=""/>
    <fsummary>Make the target range start and end be the same as the selection range start and end. </fsummary>
    <desc><p>Make the target range start and end be the same as the selection range start and end. 
      </p></desc>
  </func>
  
  <func>
    <name name="linesJoin" arity="1" clause_i="1" since=""/>
    <fsummary>Join the lines in the target. </fsummary>
    <desc><p>Join the lines in the target. 
      </p></desc>
  </func>
  
  <func>
    <name name="linesSplit" arity="2" clause_i="1" since=""/>
    <fsummary>Split the lines in the target into lines that are less wide than pixelWidth where possible. </fsummary>
    <desc><p>Split the lines in the target into lines that are less wide than pixelWidth where possible. 
      </p></desc>
  </func>
  
  <func>
    <name name="setFoldMarginColour" arity="3" clause_i="1" since=""/>
    <fsummary>Set one of the colours used as a chequerboard pattern in the fold margin. </fsummary>
    <desc><p>Set one of the colours used as a chequerboard pattern in the fold margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="setFoldMarginHiColour" arity="3" clause_i="1" since=""/>
    <fsummary>Set the other colour used as a chequerboard pattern in the fold margin. </fsummary>
    <desc><p>Set the other colour used as a chequerboard pattern in the fold margin. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineDown" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret down one line. </fsummary>
    <desc><p>Move caret down one line. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineDownExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret down one line extending selection to new caret position. </fsummary>
    <desc><p>Move caret down one line extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineUp" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret up one line. </fsummary>
    <desc><p>Move caret up one line. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineUpExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret up one line extending selection to new caret position. </fsummary>
    <desc><p>Move caret up one line extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="charLeft" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one character. </fsummary>
    <desc><p>Move caret left one character. 
      </p></desc>
  </func>
  
  <func>
    <name name="charLeftExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one character extending selection to new caret position. </fsummary>
    <desc><p>Move caret left one character extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="charRight" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one character. </fsummary>
    <desc><p>Move caret right one character. 
      </p></desc>
  </func>
  
  <func>
    <name name="charRightExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one character extending selection to new caret position. </fsummary>
    <desc><p>Move caret right one character extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordLeft" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one word. </fsummary>
    <desc><p>Move caret left one word. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordLeftExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one word extending selection to new caret position. </fsummary>
    <desc><p>Move caret left one word extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordRight" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one word. </fsummary>
    <desc><p>Move caret right one word. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordRightExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one word extending selection to new caret position. </fsummary>
    <desc><p>Move caret right one word extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="home" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position on line. </fsummary>
    <desc><p>Move caret to first position on line. 
      </p></desc>
  </func>
  
  <func>
    <name name="homeExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position on line extending selection to new caret position. </fsummary>
    <desc><p>Move caret to first position on line extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEnd" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position on line. </fsummary>
    <desc><p>Move caret to last position on line. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEndExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position on line extending selection to new caret position. </fsummary>
    <desc><p>Move caret to last position on line extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="documentStart" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position in document. </fsummary>
    <desc><p>Move caret to first position in document. 
      </p></desc>
  </func>
  
  <func>
    <name name="documentStartExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position in document extending selection to new caret position. </fsummary>
    <desc><p>Move caret to first position in document extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="documentEnd" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position in document. </fsummary>
    <desc><p>Move caret to last position in document. 
      </p></desc>
  </func>
  
  <func>
    <name name="documentEndExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position in document extending selection to new caret position. </fsummary>
    <desc><p>Move caret to last position in document extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="pageUp" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret one page up. </fsummary>
    <desc><p>Move caret one page up. 
      </p></desc>
  </func>
  
  <func>
    <name name="pageUpExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret one page up extending selection to new caret position. </fsummary>
    <desc><p>Move caret one page up extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="pageDown" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret one page down. </fsummary>
    <desc><p>Move caret one page down. 
      </p></desc>
  </func>
  
  <func>
    <name name="pageDownExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret one page down extending selection to new caret position. </fsummary>
    <desc><p>Move caret one page down extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="editToggleOvertype" arity="1" clause_i="1" since=""/>
    <fsummary>Switch from insert to overtype mode or the reverse. </fsummary>
    <desc><p>Switch from insert to overtype mode or the reverse. 
      </p></desc>
  </func>
  
  <func>
    <name name="cancel" arity="1" clause_i="1" since=""/>
    <fsummary>Cancel any modes such as call tip or auto-completion list display. </fsummary>
    <desc><p>Cancel any modes such as call tip or auto-completion list display. 
      </p></desc>
  </func>
  
  <func>
    <name name="deleteBack" arity="1" clause_i="1" since=""/>
    <fsummary>Delete the selection or if no selection, the character before the caret. </fsummary>
    <desc><p>Delete the selection or if no selection, the character before the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="tab" arity="1" clause_i="1" since=""/>
    <fsummary>If selection is empty or all on one line replace the selection with a tab character. </fsummary>
    <desc><p>If selection is empty or all on one line replace the selection with a tab character. 
      </p><p>If more than one line selected, indent the lines. 
      </p></desc>
  </func>
  
  <func>
    <name name="backTab" arity="1" clause_i="1" since=""/>
    <fsummary>Dedent the selected lines. </fsummary>
    <desc><p>Dedent the selected lines. 
      </p></desc>
  </func>
  
  <func>
    <name name="newLine" arity="1" clause_i="1" since=""/>
    <fsummary>Insert a new line, may use a CRLF, CR or LF depending on EOL mode. </fsummary>
    <desc><p>Insert a new line, may use a CRLF, CR or LF depending on EOL mode. 
      </p></desc>
  </func>
  
  <func>
    <name name="formFeed" arity="1" clause_i="1" since=""/>
    <fsummary>Insert a Form Feed character. </fsummary>
    <desc><p>Insert a Form Feed character. 
      </p></desc>
  </func>
  
  <func>
    <name name="vCHome" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to before first visible character on line. </fsummary>
    <desc><p>Move caret to before first visible character on line. 
      </p><p>If already there move to first character on line. 
      </p></desc>
  </func>
  
  <func>
    <name name="vCHomeExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Like VCHome but extending selection to new caret position. </fsummary>
    <desc><p>Like VCHome but extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="zoomIn" arity="1" clause_i="1" since=""/>
    <fsummary>Magnify the displayed text by increasing the sizes by 1 point. </fsummary>
    <desc><p>Magnify the displayed text by increasing the sizes by 1 point. 
      </p></desc>
  </func>
  
  <func>
    <name name="zoomOut" arity="1" clause_i="1" since=""/>
    <fsummary>Make the displayed text smaller by decreasing the sizes by 1 point. </fsummary>
    <desc><p>Make the displayed text smaller by decreasing the sizes by 1 point. 
      </p></desc>
  </func>
  
  <func>
    <name name="delWordLeft" arity="1" clause_i="1" since=""/>
    <fsummary>Delete the word to the left of the caret. </fsummary>
    <desc><p>Delete the word to the left of the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="delWordRight" arity="1" clause_i="1" since=""/>
    <fsummary>Delete the word to the right of the caret. </fsummary>
    <desc><p>Delete the word to the right of the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineCut" arity="1" clause_i="1" since=""/>
    <fsummary>Cut the line containing the caret. </fsummary>
    <desc><p>Cut the line containing the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineDelete" arity="1" clause_i="1" since=""/>
    <fsummary>Delete the line containing the caret. </fsummary>
    <desc><p>Delete the line containing the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineTranspose" arity="1" clause_i="1" since=""/>
    <fsummary>Switch the current line with the previous. </fsummary>
    <desc><p>Switch the current line with the previous. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineDuplicate" arity="1" clause_i="1" since=""/>
    <fsummary>Duplicate the current line. </fsummary>
    <desc><p>Duplicate the current line. 
      </p></desc>
  </func>
  
  <func>
    <name name="lowerCase" arity="1" clause_i="1" since=""/>
    <fsummary>Transform the selection to lower case. </fsummary>
    <desc><p>Transform the selection to lower case. 
      </p></desc>
  </func>
  
  <func>
    <name name="upperCase" arity="1" clause_i="1" since=""/>
    <fsummary>Transform the selection to upper case. </fsummary>
    <desc><p>Transform the selection to upper case. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineScrollDown" arity="1" clause_i="1" since=""/>
    <fsummary>Scroll the document down, keeping the caret visible. </fsummary>
    <desc><p>Scroll the document down, keeping the caret visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineScrollUp" arity="1" clause_i="1" since=""/>
    <fsummary>Scroll the document up, keeping the caret visible. </fsummary>
    <desc><p>Scroll the document up, keeping the caret visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="deleteBackNotLine" arity="1" clause_i="1" since=""/>
    <fsummary>Delete the selection or if no selection, the character before the caret. </fsummary>
    <desc><p>Delete the selection or if no selection, the character before the caret. 
      </p><p>Will not delete the character before at the start of a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="homeDisplay" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position on display line. </fsummary>
    <desc><p>Move caret to first position on display line. 
      </p></desc>
  </func>
  
  <func>
    <name name="homeDisplayExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position on display line extending selection to new caret position. </fsummary>
    <desc><p>Move caret to first position on display line extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEndDisplay" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position on display line. </fsummary>
    <desc><p>Move caret to last position on display line. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEndDisplayExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position on display line extending selection to new caret position. </fsummary>
    <desc><p>Move caret to last position on display line extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="homeWrapExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Like HomeExtend but when word-wrap is enabled extends first to start of display line HomeDisplayExtend, then to start of document line HomeExtend. </fsummary>
    <desc><p>Like HomeExtend but when word-wrap is enabled extends first to start of display line HomeDisplayExtend, then to start of document line HomeExtend. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEndWrap" arity="1" clause_i="1" since=""/>
    <fsummary>Like LineEnd but when word-wrap is enabled goes first to end of display line LineEndDisplay, then to start of document line LineEnd. </fsummary>
    <desc><p>Like LineEnd but when word-wrap is enabled goes first to end of display line LineEndDisplay, then to start of document line LineEnd. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEndWrapExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Like LineEndExtend but when word-wrap is enabled extends first to end of display line LineEndDisplayExtend, then to start of document line LineEndExtend. </fsummary>
    <desc><p>Like LineEndExtend but when word-wrap is enabled extends first to end of display line LineEndDisplayExtend, then to start of document line LineEndExtend. 
      </p></desc>
  </func>
  
  <func>
    <name name="vCHomeWrap" arity="1" clause_i="1" since=""/>
    <fsummary>Like VCHome but when word-wrap is enabled goes first to start of display line VCHomeDisplay, then behaves like VCHome. </fsummary>
    <desc><p>Like VCHome but when word-wrap is enabled goes first to start of display line VCHomeDisplay, then behaves like VCHome. 
      </p></desc>
  </func>
  
  <func>
    <name name="vCHomeWrapExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Like VCHomeExtend but when word-wrap is enabled extends first to start of display line VCHomeDisplayExtend, then behaves like VCHomeExtend. </fsummary>
    <desc><p>Like VCHomeExtend but when word-wrap is enabled extends first to start of display line VCHomeDisplayExtend, then behaves like VCHomeExtend. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineCopy" arity="1" clause_i="1" since=""/>
    <fsummary>Copy the line containing the caret. </fsummary>
    <desc><p>Copy the line containing the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="moveCaretInsideView" arity="1" clause_i="1" since=""/>
    <fsummary>Move the caret inside current view if it's not there already. </fsummary>
    <desc><p>Move the caret inside current view if it's not there already. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineLength" arity="2" clause_i="1" since=""/>
    <fsummary>How many characters are on a line, including end of line characters? </fsummary>
    <desc><p>How many characters are on a line, including end of line characters? 
      </p></desc>
  </func>
  
  <func>
    <name name="braceHighlight" arity="3" clause_i="1" since=""/>
    <fsummary>Highlight the characters at two positions. </fsummary>
    <desc><p>Highlight the characters at two positions. 
      </p></desc>
  </func>
  
  <func>
    <name name="braceBadLight" arity="2" clause_i="1" since=""/>
    <fsummary>Highlight the character at a position indicating there is no matching brace. </fsummary>
    <desc><p>Highlight the character at a position indicating there is no matching brace. 
      </p></desc>
  </func>
  
  <func>
    <name name="braceMatch" arity="2" clause_i="1" since=""/>
    <fsummary>Find the position of a matching brace or wxSTC_INVALID_POSITION if no match. </fsummary>
    <desc><p>Find the position of a matching brace or wxSTC_INVALID_POSITION if no match. 
      </p></desc>
  </func>
  
  <func>
    <name name="getViewEOL" arity="1" clause_i="1" since=""/>
    <fsummary>Are the end of line characters visible? </fsummary>
    <desc><p>Are the end of line characters visible? 
      </p></desc>
  </func>
  
  <func>
    <name name="setViewEOL" arity="2" clause_i="1" since=""/>
    <fsummary>Make the end of line characters visible or invisible. </fsummary>
    <desc><p>Make the end of line characters visible or invisible. 
      </p></desc>
  </func>
  
  <func>
    <name name="setModEventMask" arity="2" clause_i="1" since=""/>
    <fsummary>Set which document modification events are sent to the container. </fsummary>
    <desc><p>Set which document modification events are sent to the container. 
      </p><p>The input should be a bit list containing one or more of the ?wxSTC_MOD_*  constants, the ?wxSTC_PERFORMED_*  constants, wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO. The input can also be wxSTC_MODEVENTMASKALL to indicate that all changes should generate events. 
      </p></desc>
  </func>
  
  <func>
    <name name="getEdgeColumn" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the column number which text should be kept within. </fsummary>
    <desc><p>Retrieve the column number which text should be kept within. 
      </p></desc>
  </func>
  
  <func>
    <name name="setEdgeColumn" arity="2" clause_i="1" since=""/>
    <fsummary>Set the column number of the edge. </fsummary>
    <desc><p>Set the column number of the edge. 
      </p><p>If text goes past the edge then it is highlighted. 
      </p></desc>
  </func>
  
  <func>
    <name name="setEdgeMode" arity="2" clause_i="1" since=""/>
    <fsummary>The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE). </fsummary>
    <desc><p>The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE). 
      </p><p>The input should be one of the ?wxSTC_EDGE_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getEdgeMode" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the edge highlight mode. </fsummary>
    <desc><p>Retrieve the edge highlight mode. 
      </p><p>The return value will be one of the ?wxSTC_EDGE_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getEdgeColour" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the colour used in edge indication. </fsummary>
    <desc><p>Retrieve the colour used in edge indication. 
      </p></desc>
  </func>
  
  <func>
    <name name="setEdgeColour" arity="2" clause_i="1" since=""/>
    <fsummary>Change the colour used in edge indication. </fsummary>
    <desc><p>Change the colour used in edge indication. 
      </p></desc>
  </func>
  
  <func>
    <name name="searchAnchor" arity="1" clause_i="1" since=""/>
    <fsummary>Sets the current caret position to be the search anchor. </fsummary>
    <desc><p>Sets the current caret position to be the search anchor. 
      </p></desc>
  </func>
  
  <func>
    <name name="searchNext" arity="3" clause_i="1" since=""/>
    <fsummary>Find some text starting at the search anchor. </fsummary>
    <desc><p>Find some text starting at the search anchor. 
      </p><p>Does not ensure the selection is visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="searchPrev" arity="3" clause_i="1" since=""/>
    <fsummary>Find some text starting at the search anchor and moving backwards. </fsummary>
    <desc><p>Find some text starting at the search anchor and moving backwards. 
      </p><p>Does not ensure the selection is visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="linesOnScreen" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieves the number of lines completely visible. </fsummary>
    <desc><p>Retrieves the number of lines completely visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="usePopUp" arity="2" clause_i="1" since=""/>
    <fsummary>Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button on certain areas. </fsummary>
    <desc><p>Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button on certain areas. 
      </p><p>The input should be one of the ?wxSTC_POPUP_*  constants. 
      </p><p>Remark: When <seeerl marker="wxContextMenuEvent"><c>wxContextMenuEvent</c></seeerl> is used to create a custom popup menu, this function should be called with wxSTC_POPUP_NEVER. Otherwise the default menu will be shown instead of the custom one. 
      </p></desc>
  </func>
  
  <func>
    <name name="selectionIsRectangle" arity="1" clause_i="1" since=""/>
    <fsummary>Is the selection rectangular? The alternative is the more common stream selection. </fsummary>
    <desc><p>Is the selection rectangular? The alternative is the more common stream selection. 
      </p></desc>
  </func>
  
  <func>
    <name name="setZoom" arity="2" clause_i="1" since=""/>
    <fsummary>Set the zoom level. </fsummary>
    <desc><p>Set the zoom level. 
      </p><p>This number of points is added to the size of all fonts. It may be positive to magnify or negative to reduce. 
      </p></desc>
  </func>
  
  <func>
    <name name="getZoom" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the zoom level. </fsummary>
    <desc><p>Retrieve the zoom level. 
      </p></desc>
  </func>
  
  <func>
    <name name="getModEventMask" arity="1" clause_i="1" since=""/>
    <fsummary>Get which document modification events are sent to the container. </fsummary>
    <desc><p>Get which document modification events are sent to the container. 
      </p><p>The return value will wxSTC_MODEVENTMASKALL if all changes generate events. Otherwise it will be a bit list containing one or more of the ?wxSTC_MOD_*  constants, the ?wxSTC_PERFORMED_*  constants, wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSTCFocus" arity="2" clause_i="1" since=""/>
    <fsummary>Change internal focus flag. </fsummary>
    <desc><p>Change internal focus flag. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSTCFocus" arity="1" clause_i="1" since=""/>
    <fsummary>Get internal focus flag. </fsummary>
    <desc><p>Get internal focus flag. 
      </p></desc>
  </func>
  
  <func>
    <name name="setStatus" arity="2" clause_i="1" since=""/>
    <fsummary>Change error status - 0 = OK. </fsummary>
    <desc><p>Change error status - 0 = OK. 
      </p><p>The input should be one of the ?wxSTC_STATUS_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getStatus" arity="1" clause_i="1" since=""/>
    <fsummary>Get error status. </fsummary>
    <desc><p>Get error status. 
      </p><p>The return value will be one of the ?wxSTC_STATUS_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMouseDownCaptures" arity="2" clause_i="1" since=""/>
    <fsummary>Set whether the mouse is captured when its button is pressed. </fsummary>
    <desc><p>Set whether the mouse is captured when its button is pressed. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMouseDownCaptures" arity="1" clause_i="1" since=""/>
    <fsummary>Get whether mouse gets captured. </fsummary>
    <desc><p>Get whether mouse gets captured. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSTCCursor" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the cursor to one of the wxSTC_CURSOR* values. </fsummary>
    <desc><p>Sets the cursor to one of the wxSTC_CURSOR* values. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSTCCursor" arity="1" clause_i="1" since=""/>
    <fsummary>Get cursor type. </fsummary>
    <desc><p>Get cursor type. 
      </p><p>The return value will be one of the ?wxSTC_CURSOR*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setControlCharSymbol" arity="2" clause_i="1" since=""/>
    <fsummary>Change the way control characters are displayed: If symbol is &lt; 32, keep the drawn way, else, use the given character. </fsummary>
    <desc><p>Change the way control characters are displayed: If symbol is &lt; 32, keep the drawn way, else, use the given character. 
      </p></desc>
  </func>
  
  <func>
    <name name="getControlCharSymbol" arity="1" clause_i="1" since=""/>
    <fsummary>Get the way control characters are displayed. </fsummary>
    <desc><p>Get the way control characters are displayed. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordPartLeft" arity="1" clause_i="1" since=""/>
    <fsummary>Move to the previous change in capitalisation. </fsummary>
    <desc><p>Move to the previous change in capitalisation. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordPartLeftExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move to the previous change in capitalisation extending selection to new caret position. </fsummary>
    <desc><p>Move to the previous change in capitalisation extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordPartRight" arity="1" clause_i="1" since=""/>
    <fsummary>Move to the change next in capitalisation. </fsummary>
    <desc><p>Move to the change next in capitalisation. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordPartRightExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move to the next change in capitalisation extending selection to new caret position. </fsummary>
    <desc><p>Move to the next change in capitalisation extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="setVisiblePolicy" arity="3" clause_i="1" since=""/>
    <fsummary>Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc. </fsummary>
    <desc><p>Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc. 
      </p><p>The first argument should be a bit list containing one or more of the ?wxSTC_VISIBLE_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="delLineLeft" arity="1" clause_i="1" since=""/>
    <fsummary>Delete back from the current position to the start of the line. </fsummary>
    <desc><p>Delete back from the current position to the start of the line. 
      </p></desc>
  </func>
  
  <func>
    <name name="delLineRight" arity="1" clause_i="1" since=""/>
    <fsummary>Delete forwards from the current position to the end of the line. </fsummary>
    <desc><p>Delete forwards from the current position to the end of the line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getXOffset" arity="1" clause_i="1" since=""/>
    <fsummary>Get the xOffset (ie, horizontal scroll position). </fsummary>
    <desc><p>Get the xOffset (ie, horizontal scroll position). 
      </p></desc>
  </func>
  
  <func>
    <name name="chooseCaretX" arity="1" clause_i="1" since=""/>
    <fsummary>Set the last x chosen value to be the caret x position. </fsummary>
    <desc><p>Set the last x chosen value to be the caret x position. 
      </p></desc>
  </func>
  
  <func>
    <name name="setXCaretPolicy" arity="3" clause_i="1" since=""/>
    <fsummary>Set the way the caret is kept visible when going sideways. </fsummary>
    <desc><p>Set the way the caret is kept visible when going sideways. 
      </p><p>The exclusion zone is given in pixels.
      </p><p>The first argument should be a bit list containing one or more of the ?wxSTC_CARET_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setYCaretPolicy" arity="3" clause_i="1" since=""/>
    <fsummary>Set the way the line the caret is on is kept visible. </fsummary>
    <desc><p>Set the way the line the caret is on is kept visible. 
      </p><p>The exclusion zone is given in lines.
      </p><p>The first argument should be a bit list containing one or more of the ?wxSTC_CARET_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getPrintWrapMode" arity="1" clause_i="1" since=""/>
    <fsummary>Is printing line wrapped? </fsummary>
    <desc><p>Is printing line wrapped? 
      </p><p>The return value will be one of the ?wxSTC_WRAP_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setHotspotActiveForeground" arity="3" clause_i="1" since=""/>
    <fsummary>Set a fore colour for active hotspots. </fsummary>
    <desc><p>Set a fore colour for active hotspots. 
      </p></desc>
  </func>
  
  <func>
    <name name="setHotspotActiveBackground" arity="3" clause_i="1" since=""/>
    <fsummary>Set a back colour for active hotspots. </fsummary>
    <desc><p>Set a back colour for active hotspots. 
      </p></desc>
  </func>
  
  <func>
    <name name="setHotspotActiveUnderline" arity="2" clause_i="1" since=""/>
    <fsummary>Enable / Disable underlining active hotspots. </fsummary>
    <desc><p>Enable / Disable underlining active hotspots. 
      </p></desc>
  </func>
  
  <func>
    <name name="setHotspotSingleLine" arity="2" clause_i="1" since=""/>
    <fsummary>Limit hotspots to single line so hotspots on two lines don't merge. </fsummary>
    <desc><p>Limit hotspots to single line so hotspots on two lines don't merge. 
      </p></desc>
  </func>
  
  <func>
    <name name="paraDownExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Extend selection down one paragraph (delimited by empty lines). </fsummary>
    <desc><p>Extend selection down one paragraph (delimited by empty lines). 
      </p></desc>
  </func>
  
  <func>
    <name name="paraUp" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret up one paragraph (delimited by empty lines). </fsummary>
    <desc><p>Move caret up one paragraph (delimited by empty lines). 
      </p></desc>
  </func>
  
  <func>
    <name name="paraUpExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Extend selection up one paragraph (delimited by empty lines). </fsummary>
    <desc><p>Extend selection up one paragraph (delimited by empty lines). 
      </p></desc>
  </func>
  
  <func>
    <name name="positionBefore" arity="2" clause_i="1" since=""/>
    <fsummary>Given a valid document position, return the previous position taking code page into account. </fsummary>
    <desc><p>Given a valid document position, return the previous position taking code page into account. 
      </p><p>Returns 0 if passed 0. 
      </p></desc>
  </func>
  
  <func>
    <name name="positionAfter" arity="2" clause_i="1" since=""/>
    <fsummary>Given a valid document position, return the next position taking code page into account. </fsummary>
    <desc><p>Given a valid document position, return the next position taking code page into account. 
      </p><p>Maximum value returned is the last position in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="copyRange" arity="3" clause_i="1" since=""/>
    <fsummary>Copy a range of text to the clipboard. </fsummary>
    <desc><p>Copy a range of text to the clipboard. 
      </p><p>Positions are clipped into the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="copyText" arity="3" clause_i="1" since=""/>
    <fsummary>Copy argument text to the clipboard. </fsummary>
    <desc><p>Copy argument text to the clipboard. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSelectionMode" arity="2" clause_i="1" since=""/>
    <fsummary>Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES). </fsummary>
    <desc><p>Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES). 
      </p></desc>
  </func>
  
  <func>
    <name name="getSelectionMode" arity="1" clause_i="1" since=""/>
    <fsummary>Get the mode of the current selection. </fsummary>
    <desc><p>Get the mode of the current selection. 
      </p><p>The return value will be one of the ?wxSTC_SEL_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineDownRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret down one line, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret down one line, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineUpRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret up one line, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret up one line, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="charLeftRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one character, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret left one character, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="charRightRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one character, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret right one character, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="homeRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to first position on line, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret to first position on line, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="vCHomeRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to before first visible character on line. </fsummary>
    <desc><p>Move caret to before first visible character on line. 
      </p><p>If already there move to first character on line. In either case, extend rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="lineEndRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to last position on line, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret to last position on line, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="pageUpRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret one page up, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret one page up, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="pageDownRectExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret one page down, extending rectangular selection to new caret position. </fsummary>
    <desc><p>Move caret one page down, extending rectangular selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="stutteredPageUp" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to top of page, or one page up if already at top of page. </fsummary>
    <desc><p>Move caret to top of page, or one page up if already at top of page. 
      </p></desc>
  </func>
  
  <func>
    <name name="stutteredPageUpExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to top of page, or one page up if already at top of page, extending selection to new caret position. </fsummary>
    <desc><p>Move caret to top of page, or one page up if already at top of page, extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="stutteredPageDown" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to bottom of page, or one page down if already at bottom of page. </fsummary>
    <desc><p>Move caret to bottom of page, or one page down if already at bottom of page. 
      </p></desc>
  </func>
  
  <func>
    <name name="stutteredPageDownExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position. </fsummary>
    <desc><p>Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordLeftEnd" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one word, position cursor at end of word. </fsummary>
    <desc><p>Move caret left one word, position cursor at end of word. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordLeftEndExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret left one word, position cursor at end of word, extending selection to new caret position. </fsummary>
    <desc><p>Move caret left one word, position cursor at end of word, extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordRightEnd" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one word, position cursor at end of word. </fsummary>
    <desc><p>Move caret right one word, position cursor at end of word. 
      </p></desc>
  </func>
  
  <func>
    <name name="wordRightEndExtend" arity="1" clause_i="1" since=""/>
    <fsummary>Move caret right one word, position cursor at end of word, extending selection to new caret position. </fsummary>
    <desc><p>Move caret right one word, position cursor at end of word, extending selection to new caret position. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWhitespaceChars" arity="2" clause_i="1" since=""/>
    <fsummary>Set the set of characters making up whitespace for when moving or selecting by word. </fsummary>
    <desc><p>Set the set of characters making up whitespace for when moving or selecting by word. 
      </p><p>Should be called after SetWordChars. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCharsDefault" arity="1" clause_i="1" since=""/>
    <fsummary>Reset the set of characters for whitespace and word characters to the defaults. </fsummary>
    <desc><p>Reset the set of characters for whitespace and word characters to the defaults. 
      </p></desc>
  </func>
  
  <func>
    <name name="autoCompGetCurrent" arity="1" clause_i="1" since=""/>
    <fsummary>Get currently selected item position in the auto-completion list. </fsummary>
    <desc><p>Get currently selected item position in the auto-completion list. 
      </p></desc>
  </func>
  
  <func>
    <name name="allocate" arity="2" clause_i="1" since=""/>
    <fsummary>Enlarge the document to a particular size of text bytes. </fsummary>
    <desc><p>Enlarge the document to a particular size of text bytes. 
      </p></desc>
  </func>
  
  <func>
    <name name="findColumn" arity="3" clause_i="1" since=""/>
    <fsummary>Find the position of a column on a line taking into account tabs and multi-byte characters. </fsummary>
    <desc><p>Find the position of a column on a line taking into account tabs and multi-byte characters. 
      </p><p>If beyond end of line, return line end position. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretSticky" arity="1" clause_i="1" since=""/>
    <fsummary>Can the caret preferred x position only be changed by explicit movement commands? </fsummary>
    <desc><p>Can the caret preferred x position only be changed by explicit movement commands? 
      </p><p>The return value will be one of the ?wxSTC_CARETSTICKY_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretSticky" arity="2" clause_i="1" since=""/>
    <fsummary>Stop the caret preferred x position changing when the user types. </fsummary>
    <desc><p>Stop the caret preferred x position changing when the user types. 
      </p><p>The input should be one of the ?wxSTC_CARETSTICKY_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="toggleCaretSticky" arity="1" clause_i="1" since=""/>
    <fsummary>Switch between sticky and non-sticky: meant to be bound to a key. </fsummary>
    <desc><p>Switch between sticky and non-sticky: meant to be bound to a key. 
      </p></desc>
  </func>
  
  <func>
    <name name="setPasteConvertEndings" arity="2" clause_i="1" since=""/>
    <fsummary>Enable/Disable convert-on-paste for line endings. </fsummary>
    <desc><p>Enable/Disable convert-on-paste for line endings. 
      </p></desc>
  </func>
  
  <func>
    <name name="getPasteConvertEndings" arity="1" clause_i="1" since=""/>
    <fsummary>Get convert-on-paste setting. </fsummary>
    <desc><p>Get convert-on-paste setting. 
      </p></desc>
  </func>
  
  <func>
    <name name="selectionDuplicate" arity="1" clause_i="1" since=""/>
    <fsummary>Duplicate the selection. </fsummary>
    <desc><p>Duplicate the selection. 
      </p><p>If selection empty duplicate the line containing the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="setCaretLineBackAlpha" arity="2" clause_i="1" since=""/>
    <fsummary>Set background alpha of the caret line. </fsummary>
    <desc><p>Set background alpha of the caret line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCaretLineBackAlpha" arity="1" clause_i="1" since=""/>
    <fsummary>Get the background alpha of the caret line. </fsummary>
    <desc><p>Get the background alpha of the caret line. 
      </p></desc>
  </func>
  
  <func>
    <name name="startRecord" arity="1" clause_i="1" since=""/>
    <fsummary>Start notifying the container of all key presses and commands. </fsummary>
    <desc><p>Start notifying the container of all key presses and commands. 
      </p></desc>
  </func>
  
  <func>
    <name name="stopRecord" arity="1" clause_i="1" since=""/>
    <fsummary>Stop notifying the container of all key presses and commands. </fsummary>
    <desc><p>Stop notifying the container of all key presses and commands. 
      </p></desc>
  </func>
  
  <func>
    <name name="setLexer" arity="2" clause_i="1" since=""/>
    <fsummary>Set the lexing language of the document. </fsummary>
    <desc><p>Set the lexing language of the document. 
      </p><p>The input should be one of the ?wxSTC_LEX_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLexer" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the lexing language of the document. </fsummary>
    <desc><p>Retrieve the lexing language of the document. 
      </p><p>The return value will be one of the ?wxSTC_LEX_*  constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="colourise" arity="3" clause_i="1" since=""/>
    <fsummary>Colourise a segment of the document using the current lexing language. </fsummary>
    <desc><p>Colourise a segment of the document using the current lexing language. 
      </p></desc>
  </func>
  
  <func>
    <name name="setProperty" arity="3" clause_i="1" since=""/>
    <fsummary>Set up a value that may be used by a lexer for some optional feature. </fsummary>
    <desc><p>Set up a value that may be used by a lexer for some optional feature. 
      </p></desc>
  </func>
  
  <func>
    <name name="setKeyWords" arity="3" clause_i="1" since=""/>
    <fsummary>Set up the key words used by the lexer. </fsummary>
    <desc><p>Set up the key words used by the lexer. 
      </p></desc>
  </func>
  
  <func>
    <name name="setLexerLanguage" arity="2" clause_i="1" since=""/>
    <fsummary>Set the lexing language of the document based on string name. </fsummary>
    <desc><p>Set the lexing language of the document based on string name. 
      </p></desc>
  </func>
  
  <func>
    <name name="getProperty" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve a "property" value previously set with SetProperty. </fsummary>
    <desc><p>Retrieve a "property" value previously set with SetProperty. 
      </p></desc>
  </func>
  
  <func>
    <name name="getStyleBitsNeeded" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the number of bits the current lexer needs for styling. </fsummary>
    <desc><p>Retrieve the number of bits the current lexer needs for styling. 
      </p><p>Deprecated: 
      
      </p></desc>
  </func>
  
  <func>
    <name name="getCurrentLine" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the line number of the line with the caret. </fsummary>
    <desc><p>Returns the line number of the line with the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetSpec" arity="3" clause_i="1" since=""/>
    <fsummary>Extract style settings from a spec-string which is composed of one or more of the following comma separated elements: </fsummary>
    <desc><p>Extract style settings from a spec-string which is composed of one or more of the following comma separated elements: 
      </p><p>bold turns on bold italic turns on italics fore:[name or #RRGGBB] sets the foreground colour back:[name or #RRGGBB] sets the background colour face:[facename] sets the font face name to use size:[num] sets the font size in points eol turns on eol filling underline turns on underlining 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetFont" arity="3" clause_i="1" since=""/>
    <fsummary>Set style size, face, bold, italic, and underline attributes from a <c>wxFont</c>'s attributes. </fsummary>
    <desc><p>Set style size, face, bold, italic, and underline attributes from a <seeerl marker="wxFont"><c>wxFont</c></seeerl>'s attributes. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetFontAttr" arity="7" clause_i="1" since=""/>
    <fsummary>See: <c>styleSetFontAttr/8</c></fsummary>
  </func>
  
  <func>
    <name name="styleSetFontAttr" arity="8" clause_i="1" since=""/>
    <fsummary>Set all font style attributes at once. </fsummary>
    <desc><p>Set all font style attributes at once. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetCharacterSet" arity="3" clause_i="1" since=""/>
    <fsummary>Set the character set of the font in a style. </fsummary>
    <desc><p>Set the character set of the font in a style. 
      </p><p>Converts the Scintilla character set values to a wxFontEncoding. 
      </p></desc>
  </func>
  
  <func>
    <name name="styleSetFontEncoding" arity="3" clause_i="1" since=""/>
    <fsummary>Set the font encoding to be used by a style. </fsummary>
    <desc><p>Set the font encoding to be used by a style. 
      </p></desc>
  </func>
  
  <func>
    <name name="cmdKeyExecute" arity="2" clause_i="1" since=""/>
    <fsummary>Perform one of the operations defined by the wxSTC_CMD_* constants. </fsummary>
    <desc><p>Perform one of the operations defined by the wxSTC_CMD_* constants. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMargins" arity="3" clause_i="1" since=""/>
    <fsummary>Set the left and right margin in the edit area, measured in pixels. </fsummary>
    <desc><p>Set the left and right margin in the edit area, measured in pixels. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSelection" arity="1" clause_i="1" since=""/>
    <fsummary>Gets the current selection span. </fsummary>
    <desc><p>Gets the current selection span. 
      </p><p>If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other <seeerl marker="wxTextCtrl"><c>wxTextCtrl</c></seeerl> methods but don't necessarily represent the correct indices into the string returned by <seemfa marker="wxComboBox#getValue/1"><c>wxComboBox:getValue/1</c></seemfa> for multiline controls under Windows (at least,) you should use <seemfa marker="wxTextCtrl#getStringSelection/1"><c>wxTextCtrl:getStringSelection/1</c></seemfa> to get the selected text.
      </p></desc>
  </func>
  
  <func>
    <name name="pointFromPosition" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the point in the window where a position is displayed. </fsummary>
    <desc><p>Retrieve the point in the window where a position is displayed. 
      </p></desc>
  </func>
  
  <func>
    <name name="scrollToLine" arity="2" clause_i="1" since=""/>
    <fsummary>Scroll enough to make the given line visible. </fsummary>
    <desc><p>Scroll enough to make the given line visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="scrollToColumn" arity="2" clause_i="1" since=""/>
    <fsummary>Scroll enough to make the given column visible. </fsummary>
    <desc><p>Scroll enough to make the given column visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="setVScrollBar" arity="2" clause_i="1" since=""/>
    <fsummary>Set the vertical scrollbar to use instead of the one that's built-in. </fsummary>
    <desc><p>Set the vertical scrollbar to use instead of the one that's built-in. 
      </p></desc>
  </func>
  
  <func>
    <name name="setHScrollBar" arity="2" clause_i="1" since=""/>
    <fsummary>Set the horizontal scrollbar to use instead of the one that's built-in. </fsummary>
    <desc><p>Set the horizontal scrollbar to use instead of the one that's built-in. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLastKeydownProcessed" arity="1" clause_i="1" since=""/>
    <fsummary>Can be used to prevent the EVT_CHAR handler from adding the char. </fsummary>
    <desc><p>Can be used to prevent the EVT_CHAR handler from adding the char. 
      </p></desc>
  </func>
  
  <func>
    <name name="setLastKeydownProcessed" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the line number of the line with the caret. </fsummary>
    <desc><p>Returns the line number of the line with the caret. 
      </p></desc>
  </func>
  
  <func>
    <name name="saveFile" arity="2" clause_i="1" since=""/>
    <fsummary>Write the contents of the editor to filename. </fsummary>
    <desc><p>Write the contents of the editor to filename. 
      </p></desc>
  </func>
  
  <func>
    <name name="loadFile" arity="2" clause_i="1" since=""/>
    <fsummary>Load the contents of filename into the editor. </fsummary>
    <desc><p>Load the contents of filename into the editor. 
      </p></desc>
  </func>
  
  <func>
    <name name="doDragOver" arity="4" clause_i="1" since=""/>
    <fsummary>Allow for simulating a DnD DragOver. </fsummary>
    <desc><p>Allow for simulating a DnD DragOver. 
      </p></desc>
  </func>
  
  <func>
    <name name="doDropText" arity="4" clause_i="1" since=""/>
    <fsummary>Allow for simulating a DnD DropText. </fsummary>
    <desc><p>Allow for simulating a DnD DropText. 
      </p></desc>
  </func>
  
  <func>
    <name name="getUseAntiAliasing" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the current UseAntiAliasing setting. </fsummary>
    <desc><p>Returns the current UseAntiAliasing setting. 
      </p></desc>
  </func>
  
  <func>
    <name name="addTextRaw" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>addTextRaw/3</c></fsummary>
  </func>
  
  <func>
    <name name="addTextRaw" arity="3" clause_i="1" since=""/>
    <fsummary>Add text to the document at current position. </fsummary>
    <desc><p>Add text to the document at current position. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertTextRaw" arity="3" clause_i="1" since=""/>
    <fsummary>Insert string at a position. </fsummary>
    <desc><p>Insert string at a position. 
      </p></desc>
  </func>
  
  <func>
    <name name="getCurLineRaw" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the text of the line containing the caret. </fsummary>
    <desc><p>Retrieve the text of the line containing the caret. 
      </p><p>Returns the index of the caret on the line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getLineRaw" arity="2" clause_i="1" since=""/>
    <fsummary>Retrieve the contents of a line. </fsummary>
    <desc><p>Retrieve the contents of a line. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSelectedTextRaw" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve the selected text. </fsummary>
    <desc><p>Retrieve the selected text. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTextRangeRaw" arity="3" clause_i="1" since=""/>
    <fsummary>Retrieve a range of text. </fsummary>
    <desc><p>Retrieve a range of text. 
      </p></desc>
  </func>
  
  <func>
    <name name="setTextRaw" arity="2" clause_i="1" since=""/>
    <fsummary>Replace the contents of the document with the argument text. </fsummary>
    <desc><p>Replace the contents of the document with the argument text. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTextRaw" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieve all the text in the document. </fsummary>
    <desc><p>Retrieve all the text in the document. 
      </p></desc>
  </func>
  
  <func>
    <name name="appendTextRaw" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>appendTextRaw/3</c></fsummary>
  </func>
  
  <func>
    <name name="appendTextRaw" arity="3" clause_i="1" since=""/>
    <fsummary>Append a string to the end of the document without changing the selection. </fsummary>
    <desc><p>Append a string to the end of the document without changing the selection. 
      </p></desc>
  </func>
  </funcs>
</erlref>
