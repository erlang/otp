<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<!-- THIS FILE IS GENERATED DO NOT EDIT -->


<erlref>
<header>
  <copyright>
    <year>2020</year><year>2021</year>
    <holder>wxWidgets team.</holder></copyright>
  <legalnotice>Licensed under the wxWindows Free Documentation Licence, Version 3
  </legalnotice>
  <title>wxSizer</title>
</header>
<module>wxSizer</module>
<modulesummary>Functions for wxSizer class</modulesummary>
<description><p><seeerl marker="wxSizer"><c>wxSizer</c></seeerl> is the abstract base class used for laying out subwindows in a window. You cannot use <seeerl marker="wxSizer"><c>wxSizer</c></seeerl> directly; instead, you will have to use one of the sizer classes derived from it. Currently there are <seeerl marker="wxBoxSizer"><c>wxBoxSizer</c></seeerl>, <seeerl marker="wxStaticBoxSizer"><c>wxStaticBoxSizer</c></seeerl>, <seeerl marker="wxGridSizer"><c>wxGridSizer</c></seeerl>, <seeerl marker="wxFlexGridSizer"><c>wxFlexGridSizer</c></seeerl>, <c>wxWrapSizer</c> (not implemented in wx) and <seeerl marker="wxGridBagSizer"><c>wxGridBagSizer</c></seeerl>.
      </p><p>The layout algorithm used by sizers in wxWidgets is closely related to layout in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit. It is based upon the idea of the individual subwindows reporting their minimal required size and their ability to get stretched if the size of the parent window has changed.
      </p><p>This will most often mean that the programmer does not set the original size of a dialog in the beginning, rather the dialog will be assigned a sizer and this sizer will be queried about the recommended size. The sizer in turn will query its children, which can be normal windows, empty space or other sizers, so that a hierarchy of sizers can be constructed. Note that <seeerl marker="wxSizer"><c>wxSizer</c></seeerl> does not derive from <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> and thus does not interfere with tab ordering and requires very little resources compared to a real window on screen.
      </p><p>What makes sizers so well fitted for use in wxWidgets is the fact that every control reports its own minimal size and the algorithm can handle differences in font sizes or different window (dialog item) sizes on different platforms without problems. If e.g. the standard font as well as the overall design of Motif widgets requires more space than on Windows, the initial dialog size will automatically be bigger on Motif than on Windows.
      </p><p>Sizers may also be used to control the layout of custom drawn items on the window. The <seemfa marker="#add/4"><c>add/4</c></seemfa>, <seemfa marker="#insert/5"><c>insert/5</c></seemfa>, and <seemfa marker="#prepend/4"><c>prepend/4</c></seemfa> functions return a pointer to the newly added <seeerl marker="wxSizerItem"><c>wxSizerItem</c></seeerl>. Just add empty space of the desired size and attributes, and then use the <seemfa marker="wxSizerItem#getRect/1"><c>wxSizerItem:getRect/1</c></seemfa> method to determine where the drawing operations should take place.
      </p><p>Please notice that sizers, like child windows, are owned by the library and will be deleted by it which implies that they must be allocated on the heap. However if you create a sizer and do not add it to another sizer or window, the library wouldn't be able to delete such an orphan sizer and in this, and only this, case it should be deleted explicitly.
      </p><p>wxSizer flags</p> <p>The "flag" argument accepted by <seeerl marker="wxSizerItem"><c>wxSizerItem</c></seeerl> constructors and other functions, e.g. <seemfa marker="#add/4"><c>add/4</c></seemfa>, is an OR-combination of the following flags. Two main behaviours are defined using these flags. One is the border around a window: the border parameter determines the border width whereas the flags given here determine which side(s) of the item that the border will be added. The other flags determine how the sizer item behaves when the space allotted to the sizer changes, and is somewhat dependent on the specific kind of sizer used.
      </p> <p>See: <url href="https://docs.wxwidgets.org/3.1/overview_sizer.html#overview_sizer">Overview sizer</url>
      </p>
  <p>wxWidgets docs: <url href="https://docs.wxwidgets.org/3.1/classwx_sizer.html">wxSizer</url></p>
  </description>
<datatypes><datatype><name name="wxSizer"/></datatype></datatypes>

<funcs>
  <func>
    <name name="add" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>add/3</c></fsummary>
  </func>
  
  <func>
    <name name="add" arity="3" clause_i="1" since=""/>
  
    <name name="add" arity="3" clause_i="2" since=""/>
  
    <name name="add" arity="3" clause_i="3" since=""/>
    <fsummary>Appends a child to the sizer. </fsummary>
    <desc><p>Appends a child to the sizer. 
      </p><p><seeerl marker="wxSizer"><c>wxSizer</c></seeerl> itself is an abstract class, but the parameters are equivalent in the derived classes that you will instantiate to use it so they are described here:
      </p></desc>
  </func>
  
  <func>
    <name name="add" arity="4" clause_i="1" since=""/>
  
    <name name="add" arity="4" clause_i="2" since=""/>
    <fsummary>Appends a spacer child to the sizer. </fsummary>
    <desc><p>Appends a spacer child to the sizer. 
      </p></desc>
  </func>
  
  <func>
    <name name="addSpacer" arity="2" clause_i="1" since=""/>
    <fsummary>This base function adds non-stretchable space to both the horizontal and vertical orientation of the sizer. </fsummary>
    <desc><p>This base function adds non-stretchable space to both the horizontal and vertical orientation of the sizer. 
      </p><p>More readable way of calling:  
      </p><p>See: <seemfa marker="#addSpacer/2"><c>addSpacer/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="addStretchSpacer" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>addStretchSpacer/2</c></fsummary>
  </func>
  
  <func>
    <name name="addStretchSpacer" arity="2" clause_i="1" since=""/>
    <fsummary>Adds stretchable space to the sizer. </fsummary>
    <desc><p>Adds stretchable space to the sizer. 
      </p><p>More readable way of calling: 
      </p></desc>
  </func>
  
  <func>
    <name name="calcMin" arity="1" clause_i="1" since=""/>
    <fsummary>This method is abstract and has to be overwritten by any derived class. </fsummary>
    <desc><p>This method is abstract and has to be overwritten by any derived class. 
      </p><p>Here, the sizer will do the actual calculation of its children's minimal sizes. 
      </p></desc>
  </func>
  
  <func>
    <name name="clear" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>clear/2</c></fsummary>
  </func>
  
  <func>
    <name name="clear" arity="2" clause_i="1" since=""/>
    <fsummary>Detaches all children from the sizer. </fsummary>
    <desc><p>Detaches all children from the sizer. 
      </p><p>If <c>delete_windows</c> is true then child windows will also be deleted.
      </p><p>Notice that child sizers are always deleted, as a general consequence of the principle that sizers own their sizer children, but don't own their window children (because they are already owned by their parent windows). 
      </p></desc>
  </func>
  
  <func>
    <name name="detach" arity="2" clause_i="1" since=""/>
  
    <name name="detach" arity="2" clause_i="2" since=""/>
    <fsummary>Detach a item at position <c>index</c> from the sizer without destroying it. </fsummary>
    <desc><p>Detach a item at position <c>index</c> from the sizer without destroying it. 
      </p><p>This method does not cause any layout or resizing to take place, call <seemfa marker="#layout/1"><c>layout/1</c></seemfa> to update the layout "on screen" after detaching a child from the sizer. Returns true if the child item was found and detached, false otherwise.
      </p><p>See: <seemfa marker="#remove/2"><c>remove/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="fit" arity="2" clause_i="1" since=""/>
    <fsummary>Tell the sizer to resize the <c>window</c> so that its client area matches the sizer's minimal size (<c>ComputeFittingClientSize()</c> (not implemented in wx) is called to determine it). </fsummary>
    <desc><p>Tell the sizer to resize the <c>window</c> so that its client area matches the sizer's minimal size (<c>ComputeFittingClientSize()</c> (not implemented in wx) is called to determine it). 
      </p><p>This is commonly done in the constructor of the window itself, see sample in the description of <seeerl marker="wxBoxSizer"><c>wxBoxSizer</c></seeerl>.
      </p><p>Return: The new window size.
      </p><p>See: <c>ComputeFittingClientSize()</c> (not implemented in wx), <c>ComputeFittingWindowSize()</c> (not implemented in wx)
      </p></desc>
  </func>
  
  <func>
    <name name="setVirtualSizeHints" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>fitInside/2</c></fsummary>
    <desc><p>See: <seemfa marker="#fitInside/2"><c>fitInside/2</c></seemfa>.</p>
    </desc>
  </func>
  
  <func>
    <name name="fitInside" arity="2" clause_i="1" since=""/>
    <fsummary>Tell the sizer to resize the virtual size of the <c>window</c> to match the sizer's minimal size. </fsummary>
    <desc><p>Tell the sizer to resize the virtual size of the <c>window</c> to match the sizer's minimal size. 
      </p><p>This will not alter the on screen size of the window, but may cause the addition/removal/alteration of scrollbars required to view the virtual area in windows which manage it.
      </p><p>See: <seemfa marker="wxScrolledWindow#setScrollbars/6"><c>wxScrolledWindow:setScrollbars/6</c></seemfa>, <seemfa marker="#setVirtualSizeHints/2"><c>setVirtualSizeHints/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getChildren" arity="1" clause_i="1" since=""/>
    <fsummary/>
    <desc/>
  </func>
  
  <func>
    <name name="getItem" arity="2" clause_i="1" since=""/>
  
    <name name="getItem" arity="2" clause_i="2" since=""/>
    <fsummary>Finds <c>wxSizerItem</c> which is located in the sizer at position <c>index</c>. </fsummary>
    <desc><p>Finds <seeerl marker="wxSizerItem"><c>wxSizerItem</c></seeerl> which is located in the sizer at position <c>index</c>. 
      </p><p>Use parameter <c>recursive</c> to search in subsizers too. Returns pointer to item or NULL. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItem" arity="3" clause_i="1" since=""/>
    <fsummary>Finds <c>wxSizerItem</c> which holds the given <c>window</c>. </fsummary>
    <desc><p>Finds <seeerl marker="wxSizerItem"><c>wxSizerItem</c></seeerl> which holds the given <c>window</c>. 
      </p><p>Use parameter <c>recursive</c> to search in subsizers too. Returns pointer to item or NULL. 
      </p></desc>
  </func>
  
  <func>
    <name name="getSize" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the current size of the sizer. </fsummary>
    <desc><p>Returns the current size of the sizer. 
      </p></desc>
  </func>
  
  <func>
    <name name="getPosition" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the current position of the sizer. </fsummary>
    <desc><p>Returns the current position of the sizer. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMinSize" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the minimal size of the sizer. </fsummary>
    <desc><p>Returns the minimal size of the sizer. 
      </p><p>This is either the combined minimal size of all the children and their borders or the minimal size set by <seemfa marker="#setMinSize/3"><c>setMinSize/3</c></seemfa>, depending on which is bigger. Note that the returned value is client size, not window size. In particular, if you use the value to set toplevel window's minimal or actual size, use <c>wxWindow::SetMinClientSize()</c> (not implemented in wx) or <seemfa marker="wxWindow#setClientSize/3"><c>wxWindow:setClientSize/3</c></seemfa>, not <seemfa marker="wxWindow#setMinSize/2"><c>wxWindow:setMinSize/2</c></seemfa> or <seemfa marker="wxWindow#setSize/6"><c>wxWindow:setSize/6</c></seemfa>. 
      </p></desc>
  </func>
  
  <func>
    <name name="hide" arity="2" clause_i="1" since=""/>
  
    <name name="hide" arity="2" clause_i="2" since=""/>
    <fsummary>Hides the item at position <c>index</c>. </fsummary>
    <desc><p>Hides the item at position <c>index</c>. 
      </p><p>To make a sizer item disappear, use <seemfa marker="#hide/3"><c>hide/3</c></seemfa> followed by <seemfa marker="#layout/1"><c>layout/1</c></seemfa>.
      </p><p>Use parameter <c>recursive</c> to hide elements found in subsizers. Returns true if the child item was found, false otherwise.
      </p><p>See: <seemfa marker="#isShown/2"><c>isShown/2</c></seemfa>, <seemfa marker="#show/3"><c>show/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="hide" arity="3" clause_i="1" since=""/>
    <fsummary>Hides the child <c>window</c>. </fsummary>
    <desc><p>Hides the child <c>window</c>. 
      </p><p>To make a sizer item disappear, use <seemfa marker="#hide/3"><c>hide/3</c></seemfa> followed by <seemfa marker="#layout/1"><c>layout/1</c></seemfa>.
      </p><p>Use parameter <c>recursive</c> to hide elements found in subsizers. Returns true if the child item was found, false otherwise.
      </p><p>See: <seemfa marker="#isShown/2"><c>isShown/2</c></seemfa>, <seemfa marker="#show/3"><c>show/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="insert" arity="3" clause_i="1" since=""/>
    <fsummary/>
    <desc/>
  </func>
  
  <func>
    <name name="insert" arity="4" clause_i="1" since=""/>
  
    <name name="insert" arity="4" clause_i="2" since=""/>
  
    <name name="insert" arity="4" clause_i="3" since=""/>
    <fsummary>Insert a child into the sizer before any existing item at <c>index</c>. </fsummary>
    <desc><p>Insert a child into the sizer before any existing item at <c>index</c>. 
      </p><p>See <seemfa marker="#add/4"><c>add/4</c></seemfa> for the meaning of the other parameters. 
      </p></desc>
  </func>
  
  <func>
    <name name="insert" arity="5" clause_i="1" since=""/>
  
    <name name="insert" arity="5" clause_i="2" since=""/>
    <fsummary>Insert a child into the sizer before any existing item at <c>index</c>. </fsummary>
    <desc><p>Insert a child into the sizer before any existing item at <c>index</c>. 
      </p><p>See <seemfa marker="#add/4"><c>add/4</c></seemfa> for the meaning of the other parameters. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertSpacer" arity="3" clause_i="1" since=""/>
    <fsummary>Inserts non-stretchable space to the sizer. </fsummary>
    <desc><p>Inserts non-stretchable space to the sizer. 
      </p><p>More readable way of calling wxSizer::Insert(index, size, size). 
      </p></desc>
  </func>
  
  <func>
    <name name="insertStretchSpacer" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>insertStretchSpacer/3</c></fsummary>
  </func>
  
  <func>
    <name name="insertStretchSpacer" arity="3" clause_i="1" since=""/>
    <fsummary>Inserts stretchable space to the sizer. </fsummary>
    <desc><p>Inserts stretchable space to the sizer. 
      </p><p>More readable way of calling wxSizer::Insert(0, 0, prop). 
      </p></desc>
  </func>
  
  <func>
    <name name="isShown" arity="2" clause_i="1" since=""/>
  
    <name name="isShown" arity="2" clause_i="2" since=""/>
    <fsummary>Returns true if the item at <c>index</c> is shown. </fsummary>
    <desc><p>Returns true if the item at <c>index</c> is shown. 
      </p><p>See: <seemfa marker="#hide/3"><c>hide/3</c></seemfa>, <seemfa marker="#show/3"><c>show/3</c></seemfa>, <seemfa marker="wxSizerItem#isShown/1"><c>wxSizerItem:isShown/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="recalcSizes" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>layout/1</c></fsummary>
    <desc><p>See: <seemfa marker="#layout/1"><c>layout/1</c></seemfa>.</p>
    </desc>
  </func>
  
  <func>
    <name name="layout" arity="1" clause_i="1" since=""/>
    <fsummary>Call this to force layout of the children anew, e.g. after having added a child to or removed a child (window, other sizer or space) from the sizer while keeping the current dimension. </fsummary>
    <desc><p>Call this to force layout of the children anew, e.g. after having added a child to or removed a child (window, other sizer or space) from the sizer while keeping the current dimension. 
      </p></desc>
  </func>
  
  <func>
    <name name="prepend" arity="2" clause_i="1" since=""/>
    <fsummary/>
    <desc/>
  </func>
  
  <func>
    <name name="prepend" arity="3" clause_i="1" since=""/>
  
    <name name="prepend" arity="3" clause_i="2" since=""/>
  
    <name name="prepend" arity="3" clause_i="3" since=""/>
    <fsummary>Same as <c>add/4</c>, but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. </fsummary>
    <desc><p>Same as <seemfa marker="#add/4"><c>add/4</c></seemfa>, but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. 
      </p></desc>
  </func>
  
  <func>
    <name name="prepend" arity="4" clause_i="1" since=""/>
  
    <name name="prepend" arity="4" clause_i="2" since=""/>
    <fsummary>Same as <c>add/4</c>, but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. </fsummary>
    <desc><p>Same as <seemfa marker="#add/4"><c>add/4</c></seemfa>, but prepends the items to the beginning of the list of items (windows, subsizers or spaces) owned by this sizer. 
      </p></desc>
  </func>
  
  <func>
    <name name="prependSpacer" arity="2" clause_i="1" since=""/>
    <fsummary>Prepends non-stretchable space to the sizer. </fsummary>
    <desc><p>Prepends non-stretchable space to the sizer. 
      </p><p>More readable way of calling wxSizer::Prepend(size, size, 0). 
      </p></desc>
  </func>
  
  <func>
    <name name="prependStretchSpacer" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>prependStretchSpacer/2</c></fsummary>
  </func>
  
  <func>
    <name name="prependStretchSpacer" arity="2" clause_i="1" since=""/>
    <fsummary>Prepends stretchable space to the sizer. </fsummary>
    <desc><p>Prepends stretchable space to the sizer. 
      </p><p>More readable way of calling wxSizer::Prepend(0, 0, prop). 
      </p></desc>
  </func>
  
  <func>
    <name name="remove" arity="2" clause_i="1" since=""/>
  
    <name name="remove" arity="2" clause_i="2" since=""/>
    <fsummary>Removes a sizer child from the sizer and destroys it. </fsummary>
    <desc><p>Removes a sizer child from the sizer and destroys it. 
      </p><p>Note: This method does not cause any layout or resizing to take place, call <seemfa marker="#layout/1"><c>layout/1</c></seemfa> to update the layout "on screen" after removing a child from the sizer.
      </p><p>Return: true if the child item was found and removed, false otherwise. 
      </p></desc>
  </func>
  
  <func>
    <name name="replace" arity="3" clause_i="1" since=""/>
  
    <name name="replace" arity="3" clause_i="2" since=""/>
    <fsummary>Detaches the given item at position <c>index</c> from the sizer and replaces it with the given <c>wxSizerItem</c> <c>newitem</c>. </fsummary>
    <desc><p>Detaches the given item at position <c>index</c> from the sizer and replaces it with the given <seeerl marker="wxSizerItem"><c>wxSizerItem</c></seeerl> <c>newitem</c>. 
      </p><p>The detached child is deleted <c>only</c> if it is a sizer or a spacer (but not if it is a <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> because windows are owned by their parent window, not the sizer).
      </p><p>This method does not cause any layout or resizing to take place, call <seemfa marker="#layout/1"><c>layout/1</c></seemfa> to update the layout "on screen" after replacing a child from the sizer.
      </p><p>Returns true if the child item was found and removed, false otherwise. 
      </p></desc>
  </func>
  
  <func>
    <name name="replace" arity="4" clause_i="1" since=""/>
    <fsummary>Detaches the given <c>oldwin</c> from the sizer and replaces it with the given <c>newwin</c>. </fsummary>
    <desc><p>Detaches the given <c>oldwin</c> from the sizer and replaces it with the given <c>newwin</c>. 
      </p><p>The detached child window is <c>not</c> deleted (because windows are owned by their parent window, not the sizer).
      </p><p>Use parameter <c>recursive</c> to search the given element recursively in subsizers.
      </p><p>This method does not cause any layout or resizing to take place, call <seemfa marker="#layout/1"><c>layout/1</c></seemfa> to update the layout "on screen" after replacing a child from the sizer.
      </p><p>Returns true if the child item was found and removed, false otherwise. 
      </p></desc>
  </func>
  
  <func>
    <name name="setDimension" arity="3" clause_i="1" since=""/>
    <fsummary>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </fsummary>
    <desc><p>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
      </p></desc>
  </func>
  
  <func>
    <name name="setDimension" arity="5" clause_i="1" since=""/>
    <fsummary>Call this to force the sizer to take the given dimension and thus force the items owned by the sizer to resize themselves according to the rules defined by the parameter in the <c>add/4</c> and <c>prepend/4</c> methods. </fsummary>
    <desc><p>Call this to force the sizer to take the given dimension and thus force the items owned by the sizer to resize themselves according to the rules defined by the parameter in the <seemfa marker="#add/4"><c>add/4</c></seemfa> and <seemfa marker="#prepend/4"><c>prepend/4</c></seemfa> methods. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMinSize" arity="2" clause_i="1" since=""/>
    <fsummary>Call this to give the sizer a minimal size. </fsummary>
    <desc><p>Call this to give the sizer a minimal size. 
      </p><p>Normally, the sizer will calculate its minimal size based purely on how much space its children need. After calling this method <seemfa marker="#getMinSize/1"><c>getMinSize/1</c></seemfa> will return either the minimal size as requested by its children or the minimal size set here, depending on which is bigger. 
      </p></desc>
  </func>
  
  <func>
    <name name="setMinSize" arity="3" clause_i="1" since=""/>
    <fsummary>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </fsummary>
    <desc><p>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemMinSize" arity="3" clause_i="1" since=""/>
  
    <name name="setItemMinSize" arity="3" clause_i="2" since=""/>
    <fsummary/>
    <desc/>
  </func>
  
  <func>
    <name name="setItemMinSize" arity="4" clause_i="1" since=""/>
  
    <name name="setItemMinSize" arity="4" clause_i="2" since=""/>
    <fsummary/>
    <desc/>
  </func>
  
  <func>
    <name name="setSizeHints" arity="2" clause_i="1" since=""/>
    <fsummary>This method first calls <c>fit/2</c> and then <c>setSizeHints/2</c> on the <c>window</c> passed to it. </fsummary>
    <desc><p>This method first calls <seemfa marker="#fit/2"><c>fit/2</c></seemfa> and then <seemfa marker="#setSizeHints/2"><c>setSizeHints/2</c></seemfa> on the <c>window</c> passed to it. 
      </p><p>This only makes sense when <c>window</c> is actually a <seeerl marker="wxTopLevelWindow"><c>wxTopLevelWindow</c></seeerl> such as a <seeerl marker="wxFrame"><c>wxFrame</c></seeerl> or a <seeerl marker="wxDialog"><c>wxDialog</c></seeerl>, since SetSizeHints only has any effect in these classes. It does nothing in normal windows or controls.
      </p><p>This method is implicitly used by <seemfa marker="wxWindow#setSizerAndFit/3"><c>wxWindow:setSizerAndFit/3</c></seemfa> which is commonly invoked in the constructor of a toplevel window itself (see the sample in the description of <seeerl marker="wxBoxSizer"><c>wxBoxSizer</c></seeerl>) if the toplevel window is resizable. 
      </p></desc>
  </func>
  
  <func>
    <name name="show" arity="2" clause_i="1" since=""/>
  
    <name name="show" arity="2" clause_i="2" since=""/>
  
    <name name="show" arity="2" clause_i="3" since=""/>
    <fsummary/>
    <desc/>
  </func>
  
  <func>
    <name name="show" arity="3" clause_i="1" since=""/>
  
    <name name="show" arity="3" clause_i="2" since=""/>
    <fsummary>Shows the item at <c>index</c>. </fsummary>
    <desc><p>Shows the item at <c>index</c>. 
      </p><p>To make a sizer item disappear or reappear, use <seemfa marker="#show/3"><c>show/3</c></seemfa> followed by <seemfa marker="#layout/1"><c>layout/1</c></seemfa>.
      </p><p>Returns true if the child item was found, false otherwise.
      </p><p>See: <seemfa marker="#hide/3"><c>hide/3</c></seemfa>, <seemfa marker="#isShown/2"><c>isShown/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="showItems" arity="2" clause_i="1" since=""/>
    <fsummary>Show or hide all items managed by the sizer. </fsummary>
    <desc><p>Show or hide all items managed by the sizer. 
      </p></desc>
  </func>
  </funcs>
</erlref>
