<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<!-- THIS FILE IS GENERATED DO NOT EDIT -->


<erlref>
<header>
  <copyright>
    <year>2020</year><year>2021</year>
    <holder>wxWidgets team.</holder></copyright>
  <legalnotice>Licensed under the wxWindows Free Documentation Licence, Version 3
  </legalnotice>
  <title>wxSplitterWindow</title>
</header>
<module>wxSplitterWindow</module>
<modulesummary>Functions for wxSplitterWindow class</modulesummary>
<description><p>This class manages up to two subwindows. The current view can be split into two programmatically (perhaps from a menu command), and unsplit either programmatically or via the <seeerl marker="wxSplitterWindow"><c>wxSplitterWindow</c></seeerl> user interface.
      </p><p>Styles</p><p>This class supports the following styles:
      </p><p>See: <seeerl marker="wxSplitterEvent"><c>wxSplitterEvent</c></seeerl>, <url href="https://docs.wxwidgets.org/3.1/overview_splitterwindow.html#overview_splitterwindow">Overview splitterwindow</url>
      </p>
  <p>This class is derived (and can use functions) from: 
    <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> <seeerl marker="wxEvtHandler"><c>wxEvtHandler</c></seeerl></p>
  
  <p>wxWidgets docs: <url href="https://docs.wxwidgets.org/3.1/classwx_splitter_window.html">wxSplitterWindow</url></p>
  </description><section><title>Events</title><p>Event types emitted from this class: <seeerl marker="wxSplitterEvent"><c>command_splitter_sash_pos_changing</c></seeerl>, <seeerl marker="wxSplitterEvent"><c>command_splitter_sash_pos_changed</c></seeerl>, <seeerl marker="wxSplitterEvent"><c>command_splitter_unsplit</c></seeerl></p></section>
<datatypes><datatype><name name="wxSplitterWindow"/></datatype></datatypes>

<funcs>
  <func>
    <name name="new" arity="0" clause_i="1" since=""/>
    <fsummary>Default constructor. </fsummary>
    <desc><p>Default constructor. 
      </p></desc>
  </func>
  
  <func>
    <name name="new" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>new/2</c></fsummary>
  </func>
  
  <func>
    <name name="new" arity="2" clause_i="1" since=""/>
    <fsummary>Constructor for creating the window. </fsummary>
    <desc><p>Constructor for creating the window. 
      </p><p>Remark: After using this constructor, you must create either one or two subwindows with the splitter window as parent, and then call one of <seemfa marker="#initialize/2"><c>initialize/2</c></seemfa>, <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa> and <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa> in order to set the pane(s). You can create two windows, with one hidden when not being shown; or you can create and delete the second pane on demand.
      </p><p>See: <seemfa marker="#initialize/2"><c>initialize/2</c></seemfa>, <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa>, <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa>, <seemfa marker="#create/3"><c>create/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="destroy" arity="1" clause_i="1" since=""/>
    <fsummary>Destroys the <c>wxSplitterWindow</c> and its children. </fsummary>
    <desc><p>Destroys the <seeerl marker="wxSplitterWindow"><c>wxSplitterWindow</c></seeerl> and its children. 
      </p></desc>
  </func>
  
  <func>
    <name name="create" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>create/3</c></fsummary>
  </func>
  
  <func>
    <name name="create" arity="3" clause_i="1" since=""/>
    <fsummary>Creation function, for two-step construction. </fsummary>
    <desc><p>Creation function, for two-step construction. 
      </p><p>See <seemfa marker="#new/2"><c>new/2</c></seemfa> for details. 
      </p></desc>
  </func>
  
  <func>
    <name name="getMinimumPaneSize" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the current minimum pane size (defaults to zero). </fsummary>
    <desc><p>Returns the current minimum pane size (defaults to zero). 
      </p><p>See: <seemfa marker="#setMinimumPaneSize/2"><c>setMinimumPaneSize/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getSashGravity" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the current sash gravity. </fsummary>
    <desc><p>Returns the current sash gravity. 
      </p><p>See: <seemfa marker="#setSashGravity/2"><c>setSashGravity/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getSashPosition" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the current sash position. </fsummary>
    <desc><p>Returns the current sash position. 
      </p><p>See: <seemfa marker="#setSashPosition/3"><c>setSashPosition/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getSplitMode" arity="1" clause_i="1" since=""/>
    <fsummary>Gets the split mode. </fsummary>
    <desc><p>Gets the split mode. 
      </p><p>See: <seemfa marker="#setSplitMode/2"><c>setSplitMode/2</c></seemfa>, <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa>, <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getWindow1" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the left/top or only pane. </fsummary>
    <desc><p>Returns the left/top or only pane. 
      </p></desc>
  </func>
  
  <func>
    <name name="getWindow2" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the right/bottom pane. </fsummary>
    <desc><p>Returns the right/bottom pane. 
      </p></desc>
  </func>
  
  <func>
    <name name="initialize" arity="2" clause_i="1" since=""/>
    <fsummary>Initializes the splitter window to have one pane. </fsummary>
    <desc><p>Initializes the splitter window to have one pane. 
      </p><p>The child window is shown if it is currently hidden.
      </p><p>Remark: This should be called if you wish to initially view only a single pane in the splitter window.
      </p><p>See: <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa>, <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="isSplit" arity="1" clause_i="1" since=""/>
    <fsummary>Returns true if the window is split, false otherwise. </fsummary>
    <desc><p>Returns true if the window is split, false otherwise. 
      </p></desc>
  </func>
  
  <func>
    <name name="replaceWindow" arity="3" clause_i="1" since=""/>
    <fsummary>This function replaces one of the windows managed by the <c>wxSplitterWindow</c> with another one. </fsummary>
    <desc><p>This function replaces one of the windows managed by the <seeerl marker="wxSplitterWindow"><c>wxSplitterWindow</c></seeerl> with another one. 
      </p><p>It is in general better to use it instead of calling <seemfa marker="#unsplit/2"><c>unsplit/2</c></seemfa> and then resplitting the window back because it will provoke much less flicker (if any). It is valid to call this function whether the splitter has two windows or only one.
      </p><p>Both parameters should be non-NULL and <c>winOld</c> must specify one of the windows managed by the splitter. If the parameters are incorrect or the window couldn't be replaced, false is returned. Otherwise the function will return true, but please notice that it will not delete the replaced window and you may wish to do it yourself.
      </p><p>See: <seemfa marker="#getMinimumPaneSize/1"><c>getMinimumPaneSize/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="setSashGravity" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the sash gravity. </fsummary>
    <desc><p>Sets the sash gravity. 
      </p><p>Remark: Gravity is real factor which controls position of sash while resizing <seeerl marker="wxSplitterWindow"><c>wxSplitterWindow</c></seeerl>. Gravity tells <seeerl marker="wxSplitterWindow"><c>wxSplitterWindow</c></seeerl> how much will left/top window grow while resizing. Example values: 
      </p><p> Notice that when sash gravity for a newly created splitter window, it is often necessary to explicitly set the splitter size using <seemfa marker="wxWindow#setSize/6"><c>wxWindow:setSize/6</c></seemfa> to ensure that is big enough for its initial sash position. Otherwise, i.e. if the window is created with the default tiny size and only resized to its correct size later, the initial sash position will be affected by the gravity and typically result in sash being at the rightmost position for the gravity of 1. See the example code creating <seeerl marker="wxSplitterWindow"><c>wxSplitterWindow</c></seeerl> in the splitter sample for more details.
      </p><p>See: <seemfa marker="#getSashGravity/1"><c>getSashGravity/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="setSashPosition" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>setSashPosition/3</c></fsummary>
  </func>
  
  <func>
    <name name="setSashPosition" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the sash position. </fsummary>
    <desc><p>Sets the sash position. 
      </p><p>Remark: Does not currently check for an out-of-range value.
      </p><p>See: <seemfa marker="#getSashPosition/1"><c>getSashPosition/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="setMinimumPaneSize" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the minimum pane size. </fsummary>
    <desc><p>Sets the minimum pane size. 
      </p><p>Remark: The default minimum pane size is zero, which means that either pane can be reduced to zero by dragging the sash, thus removing one of the panes. To prevent this behaviour (and veto out-of-range sash dragging), set a minimum size, for example 20 pixels. If the wxSP_PERMIT_UNSPLIT style is used when a splitter window is created, the window may be unsplit even if minimum size is non-zero.
      </p><p>See: <seemfa marker="#getMinimumPaneSize/1"><c>getMinimumPaneSize/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="setSplitMode" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the split mode. </fsummary>
    <desc><p>Sets the split mode. 
      </p><p>Remark: Only sets the internal variable; does not update the display.
      </p><p>See: <seemfa marker="#getSplitMode/1"><c>getSplitMode/1</c></seemfa>, <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa>, <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="splitHorizontally" arity="3" clause_i="1" since=""/>
    <fsummary>See: <c>splitHorizontally/4</c></fsummary>
  </func>
  
  <func>
    <name name="splitHorizontally" arity="4" clause_i="1" since=""/>
    <fsummary>Initializes the top and bottom panes of the splitter window. </fsummary>
    <desc><p>Initializes the top and bottom panes of the splitter window. 
      </p><p>The child windows are shown if they are currently hidden.
      </p><p>Return: true if successful, false otherwise (the window was already split).
      </p><p>Remark: This should be called if you wish to initially view two panes. It can also be called at any subsequent time, but the application should check that the window is not currently split using <seemfa marker="#isSplit/1"><c>isSplit/1</c></seemfa>.
      </p><p>See: <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa>, <seemfa marker="#isSplit/1"><c>isSplit/1</c></seemfa>, <seemfa marker="#unsplit/2"><c>unsplit/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="splitVertically" arity="3" clause_i="1" since=""/>
    <fsummary>See: <c>splitVertically/4</c></fsummary>
  </func>
  
  <func>
    <name name="splitVertically" arity="4" clause_i="1" since=""/>
    <fsummary>Initializes the left and right panes of the splitter window. </fsummary>
    <desc><p>Initializes the left and right panes of the splitter window. 
      </p><p>The child windows are shown if they are currently hidden.
      </p><p>Return: true if successful, false otherwise (the window was already split).
      </p><p>Remark: This should be called if you wish to initially view two panes. It can also be called at any subsequent time, but the application should check that the window is not currently split using <seemfa marker="#isSplit/1"><c>isSplit/1</c></seemfa>.
      </p><p>See: <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa>, <seemfa marker="#isSplit/1"><c>isSplit/1</c></seemfa>, <seemfa marker="#unsplit/2"><c>unsplit/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="unsplit" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>unsplit/2</c></fsummary>
  </func>
  
  <func>
    <name name="unsplit" arity="2" clause_i="1" since=""/>
    <fsummary>Unsplits the window. </fsummary>
    <desc><p>Unsplits the window. 
      </p><p>Return: true if successful, false otherwise (the window was not split).
      </p><p>Remark: This call will not actually delete the pane being removed; it calls <c>OnUnsplit()</c> (not implemented in wx) which can be overridden for the desired behaviour. By default, the pane being removed is hidden.
      </p><p>See: <seemfa marker="#splitHorizontally/4"><c>splitHorizontally/4</c></seemfa>, <seemfa marker="#splitVertically/4"><c>splitVertically/4</c></seemfa>, <seemfa marker="#isSplit/1"><c>isSplit/1</c></seemfa>, <c>OnUnsplit()</c> (not implemented in wx)
      </p></desc>
  </func>
  
  <func>
    <name name="updateSize" arity="1" clause_i="1" since=""/>
    <fsummary>Causes any pending sizing of the sash and child panes to take place immediately. </fsummary>
    <desc><p>Causes any pending sizing of the sash and child panes to take place immediately. 
      </p><p>Such resizing normally takes place in idle time, in order to wait for layout to be completed. However, this can cause unacceptable flicker as the panes are resized after the window has been shown. To work around this, you can perform window layout (for example by sending a size event to the parent window), and then call this function, before showing the top-level window. 
      </p></desc>
  </func>
  </funcs>
</erlref>
