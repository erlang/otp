<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<!-- THIS FILE IS GENERATED DO NOT EDIT -->


<erlref>
<header>
  <copyright>
    <year>2020</year><year>2021</year>
    <holder>wxWidgets team.</holder></copyright>
  <legalnotice>Licensed under the wxWindows Free Documentation Licence, Version 3
  </legalnotice>
  <title>wxDatePickerCtrl</title>
</header>
<module>wxDatePickerCtrl</module>
<modulesummary>Functions for wxDatePickerCtrl class</modulesummary>
<description><p>This control allows the user to select a date. Unlike <seeerl marker="wxCalendarCtrl"><c>wxCalendarCtrl</c></seeerl>, which is a relatively big control, <seeerl marker="wxDatePickerCtrl"><c>wxDatePickerCtrl</c></seeerl> is implemented as a small window showing the currently selected date. The control can be edited using the keyboard, and can also display a popup window for more user-friendly date selection, depending on the styles used and the platform.
      </p><p>It is only available if <c>wxUSE_DATEPICKCTRL</c> is set to 1.
      </p><p>Styles</p><p>This class supports the following styles:
      </p><p>See: <c>wxTimePickerCtrl</c> (not implemented in wx), <seeerl marker="wxCalendarCtrl"><c>wxCalendarCtrl</c></seeerl>, <seeerl marker="wxDateEvent"><c>wxDateEvent</c></seeerl>
      </p>
  <p>This class is derived (and can use functions) from: 
    <seeerl marker="wxPickerBase"><c>wxPickerBase</c></seeerl> <seeerl marker="wxControl"><c>wxControl</c></seeerl> <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> <seeerl marker="wxEvtHandler"><c>wxEvtHandler</c></seeerl></p>
  
  <p>wxWidgets docs: <url href="https://docs.wxwidgets.org/3.1/classwx_date_picker_ctrl.html">wxDatePickerCtrl</url></p>
  </description><section><title>Events</title><p>Event types emitted from this class: <seeerl marker="wxDateEvent"><c>date_changed</c></seeerl></p></section>
<datatypes><datatype><name name="wxDatePickerCtrl"/></datatype></datatypes>

<funcs>
  <func>
    <name name="new" arity="0" clause_i="1" since=""/>
    <fsummary>Default constructor. </fsummary>
    <desc><p>Default constructor. 
      </p></desc>
  </func>
  
  <func>
    <name name="new" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>new/3</c></fsummary>
  </func>
  
  <func>
    <name name="new" arity="3" clause_i="1" since=""/>
    <fsummary>Initializes the object and calls <c>Create()</c> (not implemented in wx) with all the parameters. </fsummary>
    <desc><p>Initializes the object and calls <c>Create()</c> (not implemented in wx) with all the parameters. 
      </p></desc>
  </func>
  
  <func>
    <name name="getRange" arity="3" clause_i="1" since=""/>
    <fsummary>If the control had been previously limited to a range of dates using <c>setRange/3</c>, returns the lower and upper bounds of this range. </fsummary>
    <desc><p>If the control had been previously limited to a range of dates using <seemfa marker="#setRange/3"><c>setRange/3</c></seemfa>, returns the lower and upper bounds of this range. 
      </p><p>If no range is set (or only one of the bounds is set), <c>dt1</c> and/or <c>dt2</c> are set to be invalid.
      </p><p>Notice that when using a native MSW implementation of this control the lower range is always set, even if <seemfa marker="#setRange/3"><c>setRange/3</c></seemfa> hadn't been called explicitly, as the native control only supports dates later than year 1601.
      </p><p>Return: false if no range limits are currently set, true if at least one bound is set. 
      </p></desc>
  </func>
  
  <func>
    <name name="getValue" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the currently entered date. </fsummary>
    <desc><p>Returns the currently entered date. 
      </p><p>For a control with <c>wxDP_ALLOWNONE</c> style the returned value may be invalid if no date is entered, otherwise it is always valid. 
      </p></desc>
  </func>
  
  <func>
    <name name="setRange" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the valid range for the date selection. </fsummary>
    <desc><p>Sets the valid range for the date selection. 
      </p><p>If <c>dt1</c> is valid, it becomes the earliest date (inclusive) accepted by the control. If <c>dt2</c> is valid, it becomes the latest possible date.
      </p><p>Notice that if the current value is not inside the new range, it will be adjusted to lie inside it, i.e. calling this method can change the control value, however no events are generated by it.
      </p><p>Remark: If the current value of the control is outside of the newly set range bounds, the behaviour is undefined. 
      </p></desc>
  </func>
  
  <func>
    <name name="setValue" arity="2" clause_i="1" since=""/>
    <fsummary>Changes the current value of the control. </fsummary>
    <desc><p>Changes the current value of the control. 
      </p><p>The date should be valid unless the control was created with <c>wxDP_ALLOWNONE</c> style and included in the currently selected range, if any.
      </p><p>Calling this method does not result in a date change event. 
      </p></desc>
  </func>
  
  <func>
    <name name="destroy" arity="1" clause_i="1" since=""/>
    <fsummary>Destructor</fsummary>
    <desc><p>Destroys the object.</p></desc>
  </func>
  </funcs>
</erlref>
