<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<!-- THIS FILE IS GENERATED DO NOT EDIT -->


<erlref>
<header>
  <copyright>
    <year>2020</year><year>2021</year>
    <holder>wxWidgets team.</holder></copyright>
  <legalnotice>Licensed under the wxWindows Free Documentation Licence, Version 3
  </legalnotice>
  <title>wxListCtrl</title>
</header>
<module>wxListCtrl</module>
<modulesummary>Functions for wxListCtrl class</modulesummary>
<description><p>A list control presents lists in a number of formats: list view, report view, icon view and small icon view. In any case, elements are numbered from zero. For all these modes, the items are stored in the control and must be added to it using <seemfa marker="#insertItem/4"><c>insertItem/4</c></seemfa> method.
      </p><p>A special case of report view quite different from the other modes of the list control is a virtual control in which the items data (including text, images and attributes) is managed by the main program and is requested by the control itself only when needed which allows having controls with millions of items without consuming much memory. To use virtual list control you must use <seemfa marker="#setItemCount/2"><c>setItemCount/2</c></seemfa> first and override at least <c>wxListCtrl::OnGetItemText</c> (not implemented in wx) (and optionally <c>wxListCtrl::OnGetItemImage</c> (not implemented in wx) or <c>wxListCtrl::OnGetItemColumnImage</c> (not implemented in wx) and <c>wxListCtrl::OnGetItemAttr</c> (not implemented in wx)) to return the information about the items when the control requests it.
      </p><p>Virtual list control can be used as a normal one except that no operations which can take time proportional to the number of items in the control happen - this is required to allow having a practically infinite number of items. For example, in a multiple selection virtual list control, the selections won't be sent when many items are selected at once because this could mean iterating over all the items.
      </p><p>Using many of <seeerl marker="wxListCtrl"><c>wxListCtrl</c></seeerl> features is shown in the corresponding sample.
      </p><p>To intercept events from a list control, use the event table macros described in <seeerl marker="wxListEvent"><c>wxListEvent</c></seeerl>.
      </p><p><c>wxMac Note</c>: Starting with wxWidgets 2.8, <seeerl marker="wxListCtrl"><c>wxListCtrl</c></seeerl> uses a native implementation for report mode, and uses a generic implementation for other modes. You can use the generic implementation for report mode as well by setting the <c>mac.listctrl.always_use_generic</c> system option (see <seeerl marker="wxSystemOptions"><c>wxSystemOptions</c></seeerl>) to 1.
      </p><p>Styles</p><p>This class supports the following styles:
      </p><p>Note: Under wxMSW this control uses <c>wxSystemThemedControl</c> (not implemented in wx) for an explorer style appearance by default since wxWidgets 3.1.0. If this is not desired, you can call <c>wxSystemThemedControl::EnableSystemTheme</c> (not implemented in wx) with <c>false</c> argument to disable this.
      </p><p>See: <url href="https://docs.wxwidgets.org/3.1/overview_listctrl.html#overview_listctrl">Overview listctrl</url>, <seeerl marker="wxListView"><c>wxListView</c></seeerl>, <seeerl marker="wxListBox"><c>wxListBox</c></seeerl>, <seeerl marker="wxTreeCtrl"><c>wxTreeCtrl</c></seeerl>, <seeerl marker="wxImageList"><c>wxImageList</c></seeerl>, <seeerl marker="wxListEvent"><c>wxListEvent</c></seeerl>, <seeerl marker="wxListItem"><c>wxListItem</c></seeerl>, <c>wxEditableListBox</c> (not implemented in wx)
      </p>
  <p>This class is derived (and can use functions) from: 
    <seeerl marker="wxControl"><c>wxControl</c></seeerl> <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> <seeerl marker="wxEvtHandler"><c>wxEvtHandler</c></seeerl></p>
  
  <p>wxWidgets docs: <url href="https://docs.wxwidgets.org/3.1/classwx_list_ctrl.html">wxListCtrl</url></p>
  </description><section><title>Events</title><p>Event types emitted from this class: <seeerl marker="wxListEvent"><c>command_list_begin_drag</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_begin_rdrag</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_begin_label_edit</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_end_label_edit</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_delete_item</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_delete_all_items</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_item_selected</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_item_deselected</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_item_activated</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_item_focused</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_item_middle_click</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_item_right_click</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_key_down</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_insert_item</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_col_click</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_col_right_click</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_col_begin_drag</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_col_dragging</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_col_end_drag</c></seeerl>, <seeerl marker="wxListEvent"><c>command_list_cache_hint</c></seeerl></p></section>
<datatypes><datatype><name name="wxListCtrl"/></datatype></datatypes>

<funcs>
  <func>
    <name name="new" arity="0" clause_i="1" since=""/>
    <fsummary>Default constructor. </fsummary>
    <desc><p>Default constructor. 
      </p></desc>
  </func>
  
  <func>
    <name name="new" arity="2" clause_i="1" since=""/>
    <fsummary>Constructor, creating and showing a list control. </fsummary>
    <desc><p>Constructor, creating and showing a list control. 
      </p><p>See: <seemfa marker="#create/3"><c>create/3</c></seemfa>, <c>wxValidator</c> (not implemented in wx)
      </p></desc>
  </func>
  
  <func>
    <name name="destroy" arity="1" clause_i="1" since=""/>
    <fsummary>Destructor, destroying the list control. </fsummary>
    <desc><p>Destructor, destroying the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="arrange" arity="1" clause_i="1" since=""/>
    <fsummary>See: <c>arrange/2</c></fsummary>
  </func>
  
  <func>
    <name name="arrange" arity="2" clause_i="1" since=""/>
    <fsummary>Arranges the items in icon or small icon view. </fsummary>
    <desc><p>Arranges the items in icon or small icon view. 
      </p><p>This only has effect on Win32. <c>flag</c> is one of:
      </p></desc>
  </func>
  
  <func>
    <name name="assignImageList" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the image list associated with the control and takes ownership of it (i.e. </fsummary>
    <desc><p>Sets the image list associated with the control and takes ownership of it (i.e. 
      </p><p>the control will, unlike when using <seemfa marker="#setImageList/3"><c>setImageList/3</c></seemfa>, delete the list when destroyed). <c>which</c> is one of <c>wxIMAGE_LIST_NORMAL</c>, <c>wxIMAGE_LIST_SMALL</c>, <c>wxIMAGE_LIST_STATE</c> (the last is unimplemented).
      </p><p>See: <seemfa marker="#setImageList/3"><c>setImageList/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="clearAll" arity="1" clause_i="1" since=""/>
    <fsummary>Deletes all items and all columns. </fsummary>
    <desc><p>Deletes all items and all columns. 
      </p><p>Note: This sends an event of type <c>wxEVT_LIST_DELETE_ALL_ITEMS</c> under all platforms. 
      </p></desc>
  </func>
  
  <func>
    <name name="create" arity="3" clause_i="1" since=""/>
    <fsummary>Creates the list control. </fsummary>
    <desc><p>Creates the list control. 
      </p><p>See <seemfa marker="#new/2"><c>new/2</c></seemfa> for further details. 
      </p></desc>
  </func>
  
  <func>
    <name name="deleteAllItems" arity="1" clause_i="1" since=""/>
    <fsummary>Deletes all items in the list control. </fsummary>
    <desc><p>Deletes all items in the list control. 
      </p><p>This function does <c>not</c> send the <c>wxEVT_LIST_DELETE_ITEM</c> event because deleting many items from the control would be too slow then (unlike <seemfa marker="#deleteItem/2"><c>deleteItem/2</c></seemfa>) but it does send the special <c>wxEVT_LIST_DELETE_ALL_ITEMS</c> event if the control was not empty. If it was already empty, nothing is done and no event is sent.
      </p><p>Return: true if the items were successfully deleted or if the control was already empty, false if an error occurred while deleting the items. 
      </p></desc>
  </func>
  
  <func>
    <name name="deleteColumn" arity="2" clause_i="1" since=""/>
    <fsummary>Deletes a column. </fsummary>
    <desc><p>Deletes a column. 
      </p></desc>
  </func>
  
  <func>
    <name name="deleteItem" arity="2" clause_i="1" since=""/>
    <fsummary>Deletes the specified item. </fsummary>
    <desc><p>Deletes the specified item. 
      </p><p>This function sends the <c>wxEVT_LIST_DELETE_ITEM</c> event for the item being deleted.
      </p><p>See: <seemfa marker="#deleteAllItems/1"><c>deleteAllItems/1</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="editLabel" arity="2" clause_i="1" since=""/>
    <fsummary>Starts editing the label of the given item. </fsummary>
    <desc><p>Starts editing the label of the given item. 
      </p><p>This function generates a <c>EVT_LIST_BEGIN_LABEL_EDIT</c> event which can be vetoed so that no text control will appear for in-place editing.
      </p><p>If the user changed the label (i.e. s/he does not press ESC or leave the text control without changes, a <c>EVT_LIST_END_LABEL_EDIT</c> event will be sent which can be vetoed as well. 
      </p></desc>
  </func>
  
  <func>
    <name name="ensureVisible" arity="2" clause_i="1" since=""/>
    <fsummary>Ensures this item is visible. </fsummary>
    <desc><p>Ensures this item is visible. 
      </p></desc>
  </func>
  
  <func>
    <name name="findItem" arity="3" clause_i="1" since=""/>
    <fsummary>See: <c>findItem/4</c></fsummary>
  </func>
  
  <func>
    <name name="findItem" arity="4" clause_i="1" since=""/>
  
    <name name="findItem" arity="4" clause_i="2" since=""/>
    <fsummary>Find an item nearest this position in the specified direction, starting from <c>start</c> or the beginning if <c>start</c> is -1. </fsummary>
    <desc><p>Find an item nearest this position in the specified direction, starting from <c>start</c> or the beginning if <c>start</c> is -1. 
      </p><p>Return: The next matching item if any or <c>-1</c> (wxNOT_FOUND) otherwise. 
      </p></desc>
  </func>
  
  <func>
    <name name="getColumn" arity="3" clause_i="1" since=""/>
    <fsummary>Gets information about this column. </fsummary>
    <desc><p>Gets information about this column. 
      </p><p>See <seemfa marker="#setItem/5"><c>setItem/5</c></seemfa> for more information. 
      </p></desc>
  </func>
  
  <func>
    <name name="getColumnCount" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the number of columns. </fsummary>
    <desc><p>Returns the number of columns. 
      </p></desc>
  </func>
  
  <func>
    <name name="getColumnWidth" arity="2" clause_i="1" since=""/>
    <fsummary>Gets the column width (report view only). </fsummary>
    <desc><p>Gets the column width (report view only). 
      </p></desc>
  </func>
  
  <func>
    <name name="getCountPerPage" arity="1" clause_i="1" since=""/>
    <fsummary>Gets the number of items that can fit vertically in the visible area of the list control (list or report view) or the total number of items in the list control (icon or small icon view). </fsummary>
    <desc><p>Gets the number of items that can fit vertically in the visible area of the list control (list or report view) or the total number of items in the list control (icon or small icon view). 
      </p></desc>
  </func>
  
  <func>
    <name name="getEditControl" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the edit control being currently used to edit a label. </fsummary>
    <desc><p>Returns the edit control being currently used to edit a label. 
      </p><p>Returns NULL if no label is being edited.
      </p><p>Note: It is currently only implemented for wxMSW and the generic version, not for the native macOS version. 
      </p></desc>
  </func>
  
  <func>
    <name name="getImageList" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the specified image list. </fsummary>
    <desc><p>Returns the specified image list. 
      </p><p><c>which</c> may be one of:
      </p></desc>
  </func>
  
  <func>
    <name name="getItem" arity="2" clause_i="1" since=""/>
    <fsummary>Gets information about the item. </fsummary>
    <desc><p>Gets information about the item. 
      </p><p>See <seemfa marker="#setItem/5"><c>setItem/5</c></seemfa> for more information.
      </p><p>You must call <c>info.SetId()</c> to set the ID of item you're interested in before calling this method, and <c>info.SetMask()</c> with the flags indicating what fields you need to retrieve from <c>info</c>. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemBackgroundColour" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the colour for this item. </fsummary>
    <desc><p>Returns the colour for this item. 
      </p><p>If the item has no specific colour, returns an invalid colour (and not the default background control of the control itself).
      </p><p>See: <seemfa marker="#getItemTextColour/2"><c>getItemTextColour/2</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="getItemCount" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the number of items in the list control. </fsummary>
    <desc><p>Returns the number of items in the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemData" arity="2" clause_i="1" since=""/>
    <fsummary>Gets the application-defined data associated with this item. </fsummary>
    <desc><p>Gets the application-defined data associated with this item. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemFont" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the item's font. </fsummary>
    <desc><p>Returns the item's font. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemPosition" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the position of the item, in icon or small icon view. </fsummary>
    <desc><p>Returns the position of the item, in icon or small icon view. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemRect" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>getItemRect/3</c></fsummary>
  </func>
  
  <func>
    <name name="getItemRect" arity="3" clause_i="1" since=""/>
    <fsummary>Returns the rectangle representing the item's size and position, in physical coordinates. </fsummary>
    <desc><p>Returns the rectangle representing the item's size and position, in physical coordinates. 
      </p><p><c>code</c> is one of wxLIST_RECT_BOUNDS, wxLIST_RECT_ICON, wxLIST_RECT_LABEL. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemSpacing" arity="1" clause_i="1" since=""/>
    <fsummary>Retrieves the spacing between icons in pixels: horizontal spacing is returned as <c>x</c> component of the {Width,Height} object and the vertical spacing as its <c>y</c> component. </fsummary>
    <desc><p>Retrieves the spacing between icons in pixels: horizontal spacing is returned as <c>x</c> component of the {Width,Height} object and the vertical spacing as its <c>y</c> component. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemState" arity="3" clause_i="1" since=""/>
    <fsummary>Gets the item state. </fsummary>
    <desc><p>Gets the item state. 
      </p><p>For a list of state flags, see <seemfa marker="#setItem/5"><c>setItem/5</c></seemfa>. The <c>stateMask</c> indicates which state flags are of interest. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemText" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>getItemText/3</c></fsummary>
  </func>
  
  <func>
    <name name="getItemText" arity="3" clause_i="1" since=""/>
    <fsummary>Gets the item text for this item. </fsummary>
    <desc><p>Gets the item text for this item. 
      </p></desc>
  </func>
  
  <func>
    <name name="getItemTextColour" arity="2" clause_i="1" since=""/>
    <fsummary>Returns the colour for this item. </fsummary>
    <desc><p>Returns the colour for this item. 
      </p><p>If the item has no specific colour, returns an invalid colour (and not the default foreground control of the control itself as this wouldn't allow distinguishing between items having the same colour as the current control foreground and items with default colour which, hence, have always the same colour as the control). 
      </p></desc>
  </func>
  
  <func>
    <name name="getNextItem" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>getNextItem/3</c></fsummary>
  </func>
  
  <func>
    <name name="getNextItem" arity="3" clause_i="1" since=""/>
    <fsummary>Searches for an item with the given geometry or state, starting from <c>item</c> but excluding the <c>item</c> itself. </fsummary>
    <desc><p>Searches for an item with the given geometry or state, starting from <c>item</c> but excluding the <c>item</c> itself. 
      </p><p>If <c>item</c> is -1, the first item that matches the specified flags will be returned. Returns the first item with given state following <c>item</c> or -1 if no such item found. This function may be used to find all selected items in the control like this:
      </p><p><c>geometry</c> can be one of:
      </p><p>Note: this parameter is only supported by wxMSW currently and ignored on other platforms.
      </p><p><c>state</c> can be a bitlist of the following:
      </p></desc>
  </func>
  
  <func>
    <name name="getSelectedItemCount" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the number of selected items in the list control. </fsummary>
    <desc><p>Returns the number of selected items in the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTextColour" arity="1" clause_i="1" since=""/>
    <fsummary>Gets the text colour of the list control. </fsummary>
    <desc><p>Gets the text colour of the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="getTopItem" arity="1" clause_i="1" since=""/>
    <fsummary>Gets the index of the topmost visible item when in list or report view. </fsummary>
    <desc><p>Gets the index of the topmost visible item when in list or report view. 
      </p></desc>
  </func>
  
  <func>
    <name name="getViewRect" arity="1" clause_i="1" since=""/>
    <fsummary>Returns the rectangle taken by all items in the control. </fsummary>
    <desc><p>Returns the rectangle taken by all items in the control. 
      </p><p>In other words, if the controls client size were equal to the size of this rectangle, no scrollbars would be needed and no free space would be left.
      </p><p>Note that this function only works in the icon and small icon views, not in list or report views (this is a limitation of the native Win32 control). 
      </p></desc>
  </func>
  
  <func>
    <name name="hitTest" arity="2" clause_i="1" since=""/>
    <fsummary>Determines which item (if any) is at the specified point, giving details in <c>flags</c>. </fsummary>
    <desc><p>Determines which item (if any) is at the specified point, giving details in <c>flags</c>. 
      </p><p>Returns index of the item or <c>wxNOT_FOUND</c> if no item is at the specified point.
      </p><p><c>flags</c> will be a combination of the following flags:
      </p><p>If <c>ptrSubItem</c> is not NULL and the <seeerl marker="wxListCtrl"><c>wxListCtrl</c></seeerl> is in the report mode the subitem (or column) number will also be provided. This feature is only available in version 2.7.0 or higher and is currently only implemented under wxMSW and requires at least comctl32.dll of version 4.70 on the host system or the value stored in <c>ptrSubItem</c> will be always -1. To compile this feature into wxWidgets library you need to have access to commctrl.h of version 4.70 that is provided by Microsoft. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertColumn" arity="3" clause_i="1" since=""/>
  
    <name name="insertColumn" arity="3" clause_i="2" since=""/>
    <fsummary>For report view mode (only), inserts a column. </fsummary>
    <desc><p>For report view mode (only), inserts a column. 
      </p><p>For more details, see <seemfa marker="#setItem/5"><c>setItem/5</c></seemfa>. Also see <seemfa marker="#insertColumn/4"><c>insertColumn/4</c></seemfa> overload for a usually more convenient alternative to this method and the description of how the item width is interpreted by this method. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertColumn" arity="4" clause_i="1" since=""/>
    <fsummary>For report view mode (only), inserts a column. </fsummary>
    <desc><p>For report view mode (only), inserts a column. 
      </p><p>Insert a new column in the list control in report view mode at the given position specifying its most common attributes.
      </p><p>Notice that to set the image for the column you need to use <seemfa marker="#insertColumn/4"><c>insertColumn/4</c></seemfa> overload and specify ?wxLIST_MASK_IMAGE in the item mask.
      </p><p>Return: The index of the inserted column or -1 if adding it failed. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertItem" arity="2" clause_i="1" since=""/>
    <fsummary>Inserts an item, returning the index of the new item if successful, -1 otherwise. </fsummary>
    <desc><p>Inserts an item, returning the index of the new item if successful, -1 otherwise. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertItem" arity="3" clause_i="1" since=""/>
  
    <name name="insertItem" arity="3" clause_i="2" since=""/>
    <fsummary>Insert a string item. </fsummary>
    <desc><p>Insert a string item. 
      </p></desc>
  </func>
  
  <func>
    <name name="insertItem" arity="4" clause_i="1" since=""/>
    <fsummary>Insert an image/string item. </fsummary>
    <desc><p>Insert an image/string item. 
      </p></desc>
  </func>
  
  <func>
    <name name="refreshItem" arity="2" clause_i="1" since=""/>
    <fsummary>Redraws the given <c>item</c>. </fsummary>
    <desc><p>Redraws the given <c>item</c>. 
      </p><p>This is only useful for the virtual list controls as without calling this function the displayed value of the item doesn't change even when the underlying data does change.
      </p><p>See: <seemfa marker="#refreshItems/3"><c>refreshItems/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="refreshItems" arity="3" clause_i="1" since=""/>
    <fsummary>Redraws the items between <c>itemFrom</c> and <c>itemTo</c>. </fsummary>
    <desc><p>Redraws the items between <c>itemFrom</c> and <c>itemTo</c>. 
      </p><p>The starting item must be less than or equal to the ending one.
      </p><p>Just as <seemfa marker="#refreshItem/2"><c>refreshItem/2</c></seemfa> this is only useful for virtual list controls. 
      </p></desc>
  </func>
  
  <func>
    <name name="scrollList" arity="3" clause_i="1" since=""/>
    <fsummary>Scrolls the list control. </fsummary>
    <desc><p>Scrolls the list control. 
      </p><p>If in icon, small icon or report view mode, <c>dx</c> specifies the number of pixels to scroll. If in list view mode, <c>dx</c> specifies the number of columns to scroll. <c>dy</c> always specifies the number of pixels to scroll vertically.
      </p><p>Note: This method is currently only implemented in the Windows version. 
      </p></desc>
  </func>
  
  <func>
    <name name="setBackgroundColour" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the background colour. </fsummary>
    <desc><p>Sets the background colour. 
      </p><p>Note that the <seemfa marker="wxWindow#getBackgroundColour/1"><c>wxWindow:getBackgroundColour/1</c></seemfa> function of <seeerl marker="wxWindow"><c>wxWindow</c></seeerl> base class can be used to retrieve the current background colour. 
      </p></desc>
  </func>
  
  <func>
    <name name="setColumn" arity="3" clause_i="1" since=""/>
    <fsummary>Sets information about this column. </fsummary>
    <desc><p>Sets information about this column. 
      </p><p>See <seemfa marker="#setItem/5"><c>setItem/5</c></seemfa> for more information. 
      </p></desc>
  </func>
  
  <func>
    <name name="setColumnWidth" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the column width. </fsummary>
    <desc><p>Sets the column width. 
      </p><p><c>width</c> can be a width in pixels or <c>wxLIST_AUTOSIZE</c> (-1) or <c>wxLIST_AUTOSIZE_USEHEADER</c> (-2).
      </p><p><c>wxLIST_AUTOSIZE</c> will resize the column to the length of its longest item.
      </p><p><c>wxLIST_AUTOSIZE_USEHEADER</c> will resize the column to the length of the header (Win32) or 80 pixels (other platforms).
      </p><p>In small or normal icon view, <c>col</c> must be -1, and the column width is set for all columns. 
      </p></desc>
  </func>
  
  <func>
    <name name="setImageList" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the image list associated with the control. </fsummary>
    <desc><p>Sets the image list associated with the control. 
      </p><p><c>which</c> is one of <c>wxIMAGE_LIST_NORMAL</c>, <c>wxIMAGE_LIST_SMALL</c>, <c>wxIMAGE_LIST_STATE</c> (the last is unimplemented).
      </p><p>This method does not take ownership of the image list, you have to delete it yourself.
      </p><p>See: <seemfa marker="#assignImageList/3"><c>assignImageList/3</c></seemfa>
      </p></desc>
  </func>
  
  <func>
    <name name="setItem" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the data of an item. </fsummary>
    <desc><p>Sets the data of an item. 
      </p><p>Using the <seeerl marker="wxListItem"><c>wxListItem</c></seeerl>'s mask and state mask, you can change only selected attributes of a <seeerl marker="wxListCtrl"><c>wxListCtrl</c></seeerl> item.
      </p><p>Return: true if the item was successfully updated or false if the update failed for some reason (e.g. an invalid item index). 
      </p></desc>
  </func>
  
  <func>
    <name name="setItem" arity="4" clause_i="1" since=""/>
    <fsummary>See: <c>setItem/5</c></fsummary>
  </func>
  
  <func>
    <name name="setItem" arity="5" clause_i="1" since=""/>
    <fsummary>Sets an item string field at a particular column. </fsummary>
    <desc><p>Sets an item string field at a particular column. 
      </p><p>Return: true if the item was successfully updated or false if the update failed for some reason (e.g. an invalid item index). 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemBackgroundColour" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the background colour for this item. </fsummary>
    <desc><p>Sets the background colour for this item. 
      </p><p>This function only works in report view mode. The colour can be retrieved using <seemfa marker="#getItemBackgroundColour/2"><c>getItemBackgroundColour/2</c></seemfa>. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemCount" arity="2" clause_i="1" since=""/>
    <fsummary>This method can only be used with virtual list controls. </fsummary>
    <desc><p>This method can only be used with virtual list controls. 
      </p><p>It is used to indicate to the control the number of items it contains. After calling it, the main program should be ready to handle calls to various item callbacks (such as <c>wxListCtrl::OnGetItemText</c> (not implemented in wx)) for all items in the range from 0 to <c>count</c>.
      </p><p>Notice that the control is not necessarily redrawn after this call as it may be undesirable if an item which is not visible on the screen anyhow was added to or removed from a control displaying many items, if you do need to refresh the display you can just call <seemfa marker="wxWindow#refresh/2"><c>wxWindow:refresh/2</c></seemfa> manually. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemData" arity="3" clause_i="1" since=""/>
    <fsummary>Associates application-defined data with this item. </fsummary>
    <desc><p>Associates application-defined data with this item. 
      </p><p>Notice that this function cannot be used to associate pointers with the control items, use <c>SetItemPtrData()</c> (not implemented in wx) instead. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemFont" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the item's font. </fsummary>
    <desc><p>Sets the item's font. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemImage" arity="3" clause_i="1" since=""/>
    <fsummary>See: <c>setItemImage/4</c></fsummary>
  </func>
  
  <func>
    <name name="setItemImage" arity="4" clause_i="1" since=""/>
    <fsummary>Sets the unselected and selected images associated with the item. </fsummary>
    <desc><p>Sets the unselected and selected images associated with the item. 
      </p><p>The images are indices into the image list associated with the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemColumnImage" arity="4" clause_i="1" since=""/>
    <fsummary>Sets the image associated with the item. </fsummary>
    <desc><p>Sets the image associated with the item. 
      </p><p>In report view, you can specify the column. The image is an index into the image list associated with the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemPosition" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the position of the item, in icon or small icon view. </fsummary>
    <desc><p>Sets the position of the item, in icon or small icon view. 
      </p><p>Windows only. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemState" arity="4" clause_i="1" since=""/>
    <fsummary>Sets the item state. </fsummary>
    <desc><p>Sets the item state. 
      </p><p>The <c>stateMask</c> is a combination of <c>wxLIST_STATE_XXX</c> constants described in <seeerl marker="wxListItem"><c>wxListItem</c></seeerl> documentation. For each of the bits specified in <c>stateMask</c>, the corresponding state is set or cleared depending on whether <c>state</c> argument contains the same bit or not.
      </p><p>So to select an item you can use  while to deselect it you should use 
      </p><p>Consider using <seeerl marker="wxListView"><c>wxListView</c></seeerl> if possible to avoid dealing with this error-prone and confusing method.
      </p><p>Also notice that contrary to the usual rule that only user actions generate events, this method does generate wxEVT_LIST_ITEM_SELECTED event when it is used to select an item. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemText" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the item text for this item. </fsummary>
    <desc><p>Sets the item text for this item. 
      </p></desc>
  </func>
  
  <func>
    <name name="setItemTextColour" arity="3" clause_i="1" since=""/>
    <fsummary>Sets the colour for this item. </fsummary>
    <desc><p>Sets the colour for this item. 
      </p><p>This function only works in report view. The colour can be retrieved using <seemfa marker="#getItemTextColour/2"><c>getItemTextColour/2</c></seemfa>. 
      </p></desc>
  </func>
  
  <func>
    <name name="setSingleStyle" arity="2" clause_i="1" since=""/>
    <fsummary>See: <c>setSingleStyle/3</c></fsummary>
  </func>
  
  <func>
    <name name="setSingleStyle" arity="3" clause_i="1" since=""/>
    <fsummary>Adds or removes a single window style. </fsummary>
    <desc><p>Adds or removes a single window style. 
      </p></desc>
  </func>
  
  <func>
    <name name="setTextColour" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the text colour of the list control. </fsummary>
    <desc><p>Sets the text colour of the list control. 
      </p></desc>
  </func>
  
  <func>
    <name name="setWindowStyleFlag" arity="2" clause_i="1" since=""/>
    <fsummary>Sets the whole window style, deleting all items. </fsummary>
    <desc><p>Sets the whole window style, deleting all items. 
      </p></desc>
  </func>
  
  <func>
    <name name="sortItems" arity="2" clause_i="1" since=""/>
    <fsummary>Sort the items in the list control. </fsummary>
    <desc><p>Sort the items in the list control. 
      </p><p>Sorts the items with supplied <c>SortCallBack</c> fun. 
      </p><p>SortCallBack receives the client data associated with two items to compare (<c>NOT</c> the the index), and should return 0 if the items are equal, a negative value if the first item is less than the second one and a positive value if the first item is greater than the second one.
      </p><p>Remark: Notice that the control may only be sorted on client data associated with the items, so you must use SetItemData if you want to be able to sort the items in the control.
      </p><p> The callback may not call other (wx) processes. 
      </p></desc>
  </func>
  </funcs>
</erlref>
