<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosEventChannelAdmin_ProxyPushSupplier</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-11-13</date>
    <rev>PA1</rev>
    <file>CosEventChannelAdmin_ProxyPushSupplier.xml</file>
  </header>
  <module>CosEventChannelAdmin_ProxyPushSupplier</module>
  <modulesummary>This module implements a ProxyPushSupplier interface which acts as a middleman between push consumer and the event channel.</modulesummary>
  <description>
    <p>The ProxyPushSupplier interface defines the second step for connecting push
      consumers to the event channel. A proxy supplier is similar to a normal supplier,
      but includes an additional method for connecting a consumer to the proxy
      supplier.</p>
    <p>To get access to all definitions, e.g., exceptions,
      include necessary <c><![CDATA[hrl]]></c> files by using:<br></br><c><![CDATA[-include_lib("cosEvent/include/*.hrl").]]></c></p>
    <p>Any object that possesses an object reference that supports the ProxyPushSupplier
      interface can perform the following operations:</p>
  </description>
  <funcs>
    <func>
      <name>connect_push_consumer(Object, PushConsumer) -> Return</name>
      <fsummary>Connect the push consumer to the proxy push supplier</fsummary>
      <type>
        <v>Object       = #objref</v>
        <v>PushConsumer = #objref of PushConsumer type</v>
        <v>Return       = ok | {'EXCEPTION', E}</v>
        <v>E = #'CosEventChannelAdmin_AlreadyConnected'{} | #'CosEventChannelAdmin_TypeError'{}</v>
      </type>
      <desc>
        <p>This operation connects PushConsumer object to the ProxyPushSupplier object.
          If a nil object reference is passed CORBA standard <c><![CDATA[BAD_PARAM]]></c> exception 
          is raised. If the ProxyPushSupplier is already connected to a PushConsumer,
          then the <c><![CDATA[CosEventChannelAdmin_AlreadyConnected]]></c> exception is raised.
          Implementations of ProxyPushSuppliers may require additional interface
          functionality; if these requirements are not met the 
          <c><![CDATA[CosEventChannelAdmin_TypeError]]></c> exception will be raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_push_supplier(Object) -> Return</name>
      <fsummary>Disconnect the ProxyPushSupplier object from the event channel.</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = ok</v>
      </type>
      <desc>
        <p>This operation disconnects proxy push supplier from the event channel and
          sends a notification about the loss of the connection to the push consumer
          attached to it.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

