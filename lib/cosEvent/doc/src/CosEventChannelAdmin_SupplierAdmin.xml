<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosEventChannelAdmin_SupplierAdmin</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-11-13</date>
    <rev>PA1</rev>
    <file>CosEventChannelAdmin_SupplierAdmin.xml</file>
  </header>
  <module>CosEventChannelAdmin_SupplierAdmin</module>
  <modulesummary>This module implements a SupplierAdmin interface,  which allows suppliers to be connected to the event channel.</modulesummary>
  <description>
    <p>The SupplierAdmin interface defines the first step for connecting suppliers
      to the event channel. It acts as a factory for creating proxy consumers.
      Both consumer administration and supplier administration are defined as separate
      objects so that the creator of the channel can control the addition of 
      suppliers and consumers.</p>
    <p>To get access to all definitions include necessary <c><![CDATA[hrl]]></c> files by using:<br></br><c><![CDATA[-include_lib("cosEvent/include/*.hrl").]]></c></p>
  </description>
  <funcs>
    <func>
      <name>obtain_push_consumer(Object) -> Return</name>
      <fsummary>Create a ProxyPushConsumer object</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = #objref</v>
      </type>
      <desc>
        <p>This operation returns a ProxyPushConsumer object reference.</p>
      </desc>
    </func>
    <func>
      <name>obtain_pull_consumer(Object) -> Return</name>
      <fsummary>Create a ProxyPullConsumer object</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = #objref</v>
      </type>
      <desc>
        <p>This operation returns a ProxyPullConsumer object reference.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

