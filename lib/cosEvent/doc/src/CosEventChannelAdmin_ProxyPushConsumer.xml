<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosEventChannelAdmin_ProxyPushConsumer</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-11-13</date>
    <rev>PA1</rev>
    <file>CosEventChannelAdmin_ProxyPushConsumer.xml</file>
  </header>
  <module>CosEventChannelAdmin_ProxyPushConsumer</module>
  <modulesummary>This module implements a ProxyPushConsumer interface which acts as a middleman between push supplier and the event channel.</modulesummary>
  <description>
    <p>The ProxyPushConsumer interface defines the second step for connecting push
      suppliers to the event channel. A proxy consumer is similar to a normal consumer,
      but includes an additional method for connecting a supplier to the proxy
      consumer.</p>
    <p>To get access to all definitions, e.g., exceptions,
      include necessary <c><![CDATA[hrl]]></c> files by using:<br></br><c><![CDATA[-include_lib("cosEvent/include/*.hrl").]]></c></p>
    <p>Any object that possesses an object reference that supports the ProxyPushConsumer
      interface can perform the following operations:</p>
  </description>
  <funcs>
    <func>
      <name>connect_push_supplier(Object, PushSupplier) -> Return</name>
      <fsummary>Connect the push supplier to the proxy push consumer</fsummary>
      <type>
        <v>Object       = #objref</v>
        <v>PushSupplier = #objref of PushSupplier type</v>
        <v>Return = ok | {'EXCEPTION', #'CosEventChannelAdmin_AlreadyConnected'{}}</v>
      </type>
      <desc>
        <p>This operation connects PushSupplier object to the ProxyPushConsumer object.
          A nil object reference can be passed to this operation. If so a channel
          cannot invoke the disconnect_push_supplier operation on the supplier;
          the supplier may be disconnected from the channel without being 
          informed. If the ProxyPushConsumer is already connected to a 
          PushSupplier, then the <c><![CDATA[CosEventChannelAdmin_AlreadyConnected]]></c> 
          exception is raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_push_consumer(Object) -> Return</name>
      <fsummary>Disconnect the ProxyPushConsumer object from the event channel.</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = ok</v>
      </type>
      <desc>
        <p>This operation disconnects proxy push consumer from the event channel.
          Sends a notification about the loss of the connection to the push supplier
          attached to it, unless nil object reference was passed at the connection
          time.</p>
      </desc>
    </func>
    <func>
      <name>push(Object, Data) -> Return</name>
      <fsummary>Communicate event data to the consumers.</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Data   = any</v>
        <v>Return = ok | {'EXCEPTION', #'CosEventComm_Disconnected'{}}</v>
      </type>
      <desc>
        <p>This operation sends event data to all connected consumers via the 
          event channel. If the event communication has already been disconnected,
          the <c><![CDATA[CosEventComm_Disconnected]]></c> is raised.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

