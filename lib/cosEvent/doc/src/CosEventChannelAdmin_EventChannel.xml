<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosEventChannelAdmin_EventChannel</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-11-13</date>
    <rev>PA1</rev>
    <file>CosEventChannelAdmin_EventChannel.xml</file>
  </header>
  <module>CosEventChannelAdmin_EventChannel</module>
  <modulesummary>This module implements an Event Channel interface, which plays the role of a  mediator between consumers and suppliers.</modulesummary>
  <description>
    <p>An event channel is an object that allows multiple suppliers to communicate
      with multiple consumers in a highly decoupled, asynchronous manner. The event 
      channel is built up incrementally. When an event channel is
      created no suppliers or consumers are connected to it. Event Channel can
      implement group communication by serving as a replicator, broadcaster, or
      multicaster that forward events from one or more suppliers to multiple
      consumers.</p>
    <p>It is up to the user to decide when an event channel is created and how 
      references to the event channel are obtained. By representing the event
      channel as an object, it has all of the properties that apply to objects.
      One way to manage an event channel is to register it in a naming context,
      or export it through an operation on an object.</p>
    <p>To get access to all definitions include necessary <c><![CDATA[hrl]]></c> files by using:<br></br><c><![CDATA[-include_lib("cosEvent/include/*.hrl").]]></c></p>
    <p>Any object that possesses an object reference that supports the ProxyPullConsumer
      interface can perform the following operations:</p>
  </description>
  <funcs>
    <func>
      <name>for_consumers(Object) -> Return</name>
      <fsummary>Return a ConsumerAdmin object</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = #objref</v>
      </type>
      <desc>
        <p>This operation returns a ConsumerAdmin object reference. If ConsumerAdmin
          object does not exist already it creates one.</p>
      </desc>
    </func>
    <func>
      <name>for_suppliers(Object) -> Return</name>
      <fsummary>Return a SupplierAdmin object</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = #objref</v>
      </type>
      <desc>
        <p>This operation returns a SupplierAdmin object reference. If SupplierAdmin
          object does not exist already it creates one.</p>
      </desc>
    </func>
    <func>
      <name>destroy(Object) -> Return</name>
      <fsummary>Destroy the event channel</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = #objref</v>
      </type>
      <desc>
        <p></p>
      </desc>
    </func>
  </funcs>
  
</erlref>

