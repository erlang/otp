<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year>
      <year>2013</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>CosEventChannelAdmin_ProxyPullConsumer</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>1997-11-13</date>
    <rev>PA1</rev>
    <file>CosEventChannelAdmin_ProxyPullConsumer.xml</file>
  </header>
  <module>CosEventChannelAdmin_ProxyPullConsumer</module>
  <modulesummary>This module implements a ProxyPullConsumer interface which acts as a middleman between pull supplier and the event channel.</modulesummary>
  <description>
    <p>The ProxyPullConsumer interface defines the second step for connecting pull
      suppliers to the event channel. A proxy consumer is similar to a normal consumer,
      but includes an additional method for connecting a supplier to the proxy
      consumer.</p>
    <p>To get access to all definitions, e.g., exceptions,
      include necessary <c><![CDATA[hrl]]></c> files by using:<br></br><c><![CDATA[-include_lib("cosEvent/include/*.hrl").]]></c></p>
    <p>Any object that possesses an object reference that supports the ProxyPullConsumer
      interface can perform the following operations:</p>
  </description>
  <funcs>
    <func>
      <name>connect_pull_supplier(Object, PullSupplier) -> Return</name>
      <fsummary>Connect the pull supplier to the proxy pull consumer</fsummary>
      <type>
        <v>Object       = #objref</v>
        <v>PullSupplier = #objref of PullSupplier type</v>
        <v>Return = ok | {'EXCEPTION', E}</v>
        <v>E = #'CosEventChannelAdmin_AlreadyConnected'{} | #'CosEventChannelAdmin_TypeError'{}</v>
      </type>
      <desc>
        <p>This operation connects PullSupplier object to the ProxyPullConsumer object.
          If a nil object reference is passed CORBA standard <c><![CDATA[BAD_PARAM]]></c> exception 
          is raised. If the ProxyPullConsumer is already connected to a PullSupplier,
          then the <c><![CDATA[CosEventChannelAdmin_AlreadyConnected]]></c> exception is raised.
          Implementations of ProxyPullConsumers may require additional interface
          functionality; if these requirements are not met the 
          <c><![CDATA[CosEventChannelAdmin_TypeError]]></c> exception will be raised.</p>
      </desc>
    </func>
    <func>
      <name>disconnect_pull_consumer(Object) -> Return</name>
      <fsummary>Disconnect the ProxyPullConsumer object from the event channel.</fsummary>
      <type>
        <v>Object = #objref</v>
        <v>Return = ok</v>
      </type>
      <desc>
        <p>This operation disconnects proxy pull consumer from the event channel and
          sends a notification about the loss of the connection to the pull supplier
          attached to it.</p>
      </desc>
    </func>
  </funcs>
  
</erlref>

