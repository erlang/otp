<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2023</year><year>2023</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>logger_handler</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date></date>
    <rev>A</rev>
    <file>logger_handler.xml</file>
  </header>
  <module since="OTP @OTP-XYZ@">logger_handler</module>
  <modulesummary>logger_handler behavior module.</modulesummary>

  <description>
      <p>The behaviour module for logger handlers. A logger handler
        is a callback module that is called when a log event has passed
        all filters and is ready to be logged somewhere. For more information
        see <seeguide marker="logger_chapter#handlers">Handlers</seeguide> in
        the Users Guide.</p>
  </description>

  <datatypes>
    <datatype>
      <name name="config"/>
      <desc>
	<p>Handler configuration data for Logger. The following
	  default values apply:</p>
	<list>
	  <item><c>level => all</c></item>
	  <item><c>filter_default => log</c></item>
	  <item><c>filters => []</c></item>
	  <item><c>formatter => {logger_formatter, DefaultFormatterConfig</c>}</item>
	</list>
	<p>In addition to these, the following fields are
	  automatically inserted by Logger, values taken from the
	  two first parameters
	  to <seemfa marker="logger#add_handler/3"><c>logger:add_handler/3</c></seemfa>:</p>
	<list>
	  <item><c>id => HandlerId</c></item>
	  <item><c>module => Module</c></item>
	</list>
	<p>These are read-only and cannot be changed in runtime.</p>
	<p>Handler specific configuration data is inserted by the
	  handler callback itself, in a sub structure associated with
	  the field named <c>config</c>. See
	  the <seeerl marker="logger_std_h"><c>logger_std_h(3)</c></seeerl>
	  and <seeerl marker="logger_disk_log_h"><c>logger_disk_log_h(3)</c></seeerl>
	  manual pages for information about the specific configuration
	  for these handlers.</p>
	<p>See the <seetype marker="logger_formatter#config">
	    <c>logger_formatter(3)</c></seetype> manual page for
	  information about the default configuration for this
	  formatter.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="id"/>
      <desc>
	<p>A unique identifier for a handler instance.</p>
      </desc>
    </datatype>
  </datatypes>

  <funcs>
    <func>
      <name since="OTP 21.0">Module:adding_handler(Config1) -> {ok, Config2} | {error,
	Reason}</name>
      <fsummary>An instance of this handler is about to be added.</fsummary>
      <type>
	<v>Config1 = Config2 =
	  <seetype marker="#config">config()</seetype></v>
	<v>Reason = term()</v>
      </type>
      <desc>
	<p>This callback function is optional.</p>
	<p>The function is called on a temporary process when a new
	  handler is about to be added. The purpose is to verify the
	  configuration and initiate all resources needed by the
	  handler.</p>
	<p>The handler identity is associated with the <c>id</c> key
	  in <c>Config1</c>.</p>
	<p>If everything succeeds, the callback function can add
	  possible default values or internal state values to the
	  configuration, and return the adjusted map
	  in <c>{ok,Config2}</c>.</p>
	<p>If the configuration is faulty, or if the initiation fails,
	  the callback function must return <c>{error,Reason}</c>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.2">Module:changing_config(SetOrUpdate, OldConfig, NewConfig) -> {ok, Config} | {error, Reason}</name>
      <fsummary>The configuration for this handler is about to change.</fsummary>
      <type>
	<v>SetOrUpdate = set | update</v>
	<v>OldConfig = NewConfig = Config =
	  <seetype marker="#config">config()</seetype></v>
	<v>Reason = term()</v>
      </type>
      <desc>
	<p>This callback function is optional.</p>
	<p>The function is called on a temporary process when the
	  configuration for a handler is about to change. The purpose
	  is to verify and act on the new configuration.</p>
	<p><c>OldConfig</c> is the existing configuration
	  and <c>NewConfig</c> is the new configuration.</p>
	<p>The handler identity is associated with the <c>id</c> key
	  in <c>OldConfig</c>.</p>
	<p><c>SetOrUpdate</c> has the value <c>set</c> if the
	  configuration change originates from a call to
	  <seemfa marker="logger#set_handler_config/2">
	    <c>logger:set_handler_config/2,3</c></seemfa>, and <c>update</c>
	  if it originates from <seemfa marker="logger#update_handler_config/2">
	    <c>logger:update_handler_config/2,3</c></seemfa>. The handler can
	  use this parameter to decide how to update the value of
	  the <c>config</c> field, that is, the handler specific
	  configuration data. Typically, if <c>SetOrUpdate</c>
	  equals <c>set</c>, values that are not specified must be
	  given their default values. If <c>SetOrUpdate</c>
	  equals <c>update</c>, the values found in <c>OldConfig</c>
	  must be used instead.</p>
	<p>If everything succeeds, the callback function must return a
	  possibly adjusted configuration in <c>{ok,Config}</c>.</p>
	<p>If the configuration is faulty, the callback function must
	  return <c>{error,Reason}</c>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.2">Module:filter_config(Config) -> FilteredConfig</name>
      <fsummary>Remove internal data from configuration.</fsummary>
      <type>
	<v>Config = FilteredConfig =
	  <seetype marker="#config">config()</seetype></v>
      </type>
      <desc>
	<p>This callback function is optional.</p>
	<p>The function is called when one of the Logger API functions
	  for fetching the handler configuration is called, for
	  example
	  <seemfa marker="logger#get_handler_config/1">
	    <c>logger:get_handler_config/1</c></seemfa>.</p>
	<p>It allows the handler to remove internal data fields from
	  its configuration data before it is returned to the
	  caller.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">Module:log(LogEvent, Config) -> void()</name>
      <fsummary>Log the given log event.</fsummary>
      <type>
	<v>LogEvent =
	  <seetype marker="logger#log_event">logger:log_event()</seetype></v>
	<v>Config =
	  <seetype marker="#config">config()</seetype></v>
      </type>
      <desc>
	<p>This callback function is mandatory.</p>
	<p>The function is called when all primary filters and all
	  handler filters for the handler in question have passed for
	  the given log event. It is called on the client process, that
	  is, the process that issued the log event.</p>
	<p>The handler identity is associated with the <c>id</c> key
	  in <c>Config</c>.</p>
	<p>The handler must log the event.</p>
	<p>The return value from this function is ignored by
	  Logger.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">Module:removing_handler(Config) -> ok</name>
      <fsummary>The given handler is about to be removed.</fsummary>
      <type>
	<v>Config =
	  <seetype marker="#config">config()</seetype></v>
      </type>
      <desc>
	<p>This callback function is optional.</p>
	<p>The function is called on a temporary process when a
	  handler is about to be removed. The purpose is to release
	  all resources used by the handler.</p>
	<p>The handler identity is associated with the <c>id</c> key
	  in <c>Config</c>.</p>
	<p>The return value is ignored by Logger.</p>
      </desc>
    </func>

  </funcs>

  <section>
    <title>See Also</title>
    <p>
      <seeerl marker="logger_filters"><c>logger_filters(3)</c></seeerl>,
      <seeerl marker="logger_formatter"><c>logger_formatter(3)</c></seeerl>,
      <seeerl marker="logger"><c>logger(3)</c></seeerl>
    </p>
  </section>
</erlref>
