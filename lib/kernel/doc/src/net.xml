<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2018</year><year>2022</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>net</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
    <file>net.xml</file>
  </header>
  <module since="OTP 22.0">net</module>
  <modulesummary>Network interface.</modulesummary>
  <description>
    <p>This module provides an API for the network interface.</p>
  </description>

  <datatypes>
    <datatype>
      <name name="address_info"/>
    </datatype>
    <datatype>
      <name name="ifaddrs"/>
      <desc>
	<p>This type defines all addresses (and flags) associated with
	the interface. </p>
	<note>
	  <p>Not all fields of this map has to be present.
	  The flags field can be used to test for some of the fields.
	  For example <c>broadaddr</c> will only be present if the
	  <c>broadcast</c> flag is present in flags. </p>
	</note>
      </desc>
    </datatype>
    <datatype>
      <name name="ifaddrs_flag"/>
    </datatype>
    <datatype>
      <name name="ifaddrs_flags"/>
    </datatype>
    <datatype>
      <name name="ifaddrs_filter"/>
      <desc>
	<taglist>
	  <tag>all</tag><item>All interfaces</item>
	  <tag>default</tag><item>Interfaces with address family <c>inet</c> <em>and</em> <c>inet6</c></item>
	  <tag>inet | inet6 | packet</tag><item>Interfaces with <em>only</em> the specified address family</item>
	</taglist>
      </desc>
    </datatype>
    <datatype>
      <name name="ifaddrs_filter_map"/>
      <desc>
	<p>The <c>family</c> field can only have the (above) specified values
	(and not all the values of socket:domain()). </p>
	<p>The use of the <c>flags</c> field is that any flag provided must
	exist for the interface. </p>
	<p>For example, if <c>family</c> is set to <c>inet</c> and <c>flags</c>
	to <c>[broadcast, multicast]</c> only interfaces with address family
	<c>inet</c> and the flags <c>broadcast</c> and <c>multicast</c> will
	be listed. </p>
      </desc>
    </datatype>
    <datatype>
      <name name="ifaddrs_filter_fun"/>
      <desc>
	<p>For each <c>ifaddrs</c> entry, return either <c>true</c> to keep
	the entry or <c>false</c> to discard the entry. </p>
	<p>For example, to get an interface list which only contains
	non-<c>loopback</c> <c>inet</c> interfaces: </p>
	<code type="none"><![CDATA[
	net:getifaddrs(fun(#{addr  := #{family := inet},
	                     flags := Flags}) ->
			       not lists:member(loopback, Flags);
			  (_) ->
			       false
		       end).
	]]></code>
      </desc>
    </datatype>
    <datatype>
      <name name="name_info"/>
    </datatype>
    <datatype>
      <name name="name_info_flags"/>
    </datatype>
    <datatype>
      <name name="name_info_flag"/>
    </datatype>
    <datatype>
      <name name="name_info_flag_ext"/>
    </datatype>
    <datatype>
      <name name="network_interface_name"/>
    </datatype>
    <datatype>
      <name name="network_interface_index"/>
    </datatype>
  </datatypes>

  <funcs>
    <func>
      <name name="gethostname" arity="0" since="OTP 22.0"/>
      <fsummary>Get hostname.</fsummary>
      <desc>
        <p>Returns the name of the current host.</p>
      </desc>
    </func>

    <func>
      <name name="getnameinfo" arity="1" since="OTP 22.0"/>
      <name name="getnameinfo" arity="2" since="OTP 22.0"/>
      <fsummary>Address-to-name translation.</fsummary>
      <desc>
        <p>Address-to-name translation in a protocol-independant manner.</p>
	<p>This function is the inverse of
	<seemfa marker="#getaddrinfo/1"><c>getaddrinfo</c></seemfa>.
	It converts a socket address to a corresponding host and service.</p>
      </desc>
    </func>

    <func>
      <name name="getaddrinfo" arity="1" since="OTP 22.0"/>
      <name name="getaddrinfo" arity="2" clause_i="1" since="OTP 22.0"/>
      <name name="getaddrinfo" arity="2" clause_i="2" since="OTP 22.0"/>
      <name name="getaddrinfo" arity="2" clause_i="3" since="OTP 22.0"/>
      <fsummary>Network address and service transaction.</fsummary>
      <desc>
	<p>Network address and service translation.</p>
	<p>This function is the inverse of
	<seemfa marker="#getnameinfo/1"><c>getnameinfo</c></seemfa>.
	It converts host and service to a corresponding socket address.</p>
	<p>One of the <c>Host</c> and <c>Service</c> may be <c>undefined</c>
	but <em>not</em> both.</p>
      </desc>
    </func>

    <func>
      <name name="getifaddrs" arity="0" since="OTP 22.3"/>
      <name name="getifaddrs" arity="1" clause_i="1" since="OTP 22.3"/>
      <name name="getifaddrs" arity="1" clause_i="2" since="OTP 22.3"/>
      <name name="getifaddrs" arity="2" since="OTP 22.3"/>
      <fsummary>Get interface addresses.</fsummary>
      <desc>
	<p>Get interface addresses.</p>
	<p>This function is used to get the machines interface addresses,
	possibly filtered according to <c>Filter</c>. </p>
	<p>By default, a filter with the content:
	<c>#{family => default, flags => any}</c> is used.
	This will return all interfaces with addresses in the
	<c>inet</c> and <c>inet6</c> families. </p>
      </desc>
    </func>

    <func>
      <name name="if_name2index" arity="1" since="OTP 22.0"/>
      <fsummary>Mappings between network interface names and indexes.</fsummary>
      <desc>
        <p>Mappings between network interface names and indexes.</p>
      </desc>
    </func>

    <func>
      <name name="if_index2name" arity="1" since="OTP 22.0"/>
      <fsummary>Mappings between network interface index and names.</fsummary>
      <desc>
        <p>Mappings between network interface index and names.</p>
      </desc>
    </func>

    <func>
      <name name="if_names" arity="0" since="OTP 22.0"/>
      <fsummary>Get network interface names and indexes.</fsummary>
      <desc>
        <p>Get network interface names and indexes.</p>
      </desc>
    </func>

  </funcs>

</erlref>
