<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>2017</year><year>2021</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>logger</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date></date>
    <rev>A</rev>
    <file>logger.xml</file>
  </header>
  <module since="OTP 21.0">logger</module>
  <modulesummary>API module for Logger, the standard logging facility
    in Erlang/OTP.</modulesummary>

  <description>
    <p>This module implements the main API for logging in
      Erlang/OTP. To create a log event, use the
      <seeerl marker="#logging_API">API functions</seeerl> or the
      log
      <seeerl marker="#macros">macros</seeerl>, for example:</p>
    <code>
?LOG_ERROR("error happened because: ~p", [Reason]).   % With macro
logger:error("error happened because: ~p", [Reason]). % Without macro
    </code>
    <p>To configure the Logger backend,
      use <seeapp marker="kernel_app#logger">Kernel configuration
      parameters</seeapp>
      or <seeerl marker="#configuration_API">configuration
      functions</seeerl> in the Logger API.</p>

    <p>By default, the Kernel application installs one log handler at
      system start. This handler is named <c>default</c>. It receives
      and processes standard log events produced by the Erlang runtime
      system, standard behaviours and different Erlang/OTP
      applications. The log events are by default printed to the
      terminal.</p>
    <p>If you want your systems logs to be printed to a file instead,
      you must configure the default handler to do so. The simplest
      way is to include the following in
      your <seefile marker="config"><c>sys.config</c></seefile>:</p>
      <code>
[{kernel,
  [{logger,
    [{handler, default, logger_std_h,
      #{config => #{file => "path/to/file.log"}}}]}]}].
      </code>
    <p>
      For more information about:
    </p>
    <list type="bulleted">
      <item>the Logger facility in general, see
        the <seeguide marker="logger_chapter">User's
        Guide</seeguide>.</item>
      <item>how to configure Logger, see
        the <seeguide marker="logger_chapter#configuration">Configuration</seeguide>
        section in the User's Guide.</item>
      <item>the built-in handlers,
        see <seeerl marker="logger_std_h">logger_std_h</seeerl> and
        <seeerl marker="logger_disk_log_h">logger_disk_log_h</seeerl>.</item>
      <item>the built-in formatter,
        see <seeerl marker="logger_formatter">logger_formatter</seeerl>.</item>
      <item>built-in filters,
      see <seeerl marker="logger_filters">logger_filters</seeerl>.</item>
    </list>

  </description>

  <datatypes>
    <datatype>
      <name name="filter"/>
      <desc>
	<p>A filter which can be installed as a handler filter, or as
	  a primary filter in Logger.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="filter_arg"/>
      <desc>
	<p>The second argument to the filter fun.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="filter_id"/>
      <desc>
	<p>A unique identifier for a filter.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="filter_return"/>
      <desc>
	<p>The return value from the filter fun.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="formatter_config"/>
      <desc>
	<p>Configuration data for the
	formatter. See <seeerl marker="logger_formatter">
	    <c>logger_formatter(3)</c></seeerl>
	  for an example of a formatter implementation.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="handler_config"/>
      <desc>
	  <p>Handler configuration data for Logger.</p>
          <note>
              <p>DEPRECATED: Use <seetype marker="logger_handler#config"><c>logger_handler:config()</c></seetype> instead.
              </p>
          </note>
      </desc>
    </datatype>
    <datatype>
      <name name="handler_id"/>
      <desc>
	  <p>A unique identifier for a handler instance.</p>
          <note>
              <p>DEPRECATED: Use <seetype marker="logger_handler#id"><c>logger_handler:id()</c></seetype> instead.
              </p>
          </note>
      </desc>
    </datatype>
    <datatype>
      <name name="level"/>
      <desc>
	<p>The severity level for the message to be logged.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="log_event"/>
      <desc>
	<p></p>
      </desc>
    </datatype>
    <datatype>
      <name name="metadata"/>
      <desc>
	<p>Metadata for the log event.</p>
	<p>Logger adds the following metadata to each log event:</p>
	<list>
	  <item><c>pid  => self()</c></item>
	  <item><c>gl   => group_leader()</c></item>
	  <item><c>time => logger:timestamp()</c></item>
	</list>
	<p>When a log macro is used, Logger also inserts location
	  information:</p>
	<list>
	  <item><c>mfa  => {?MODULE, ?FUNCTION_NAME, ?FUNCTION_ARITY}</c></item>
	  <item><c>file => ?FILE</c></item>
	  <item><c>line => ?LINE</c></item>
	</list>
	<p>You can add custom metadata, either by:</p>
        <list>
          <item>specifying a map as the last parameter to any of the
            log macros or the logger API functions.</item>
          <item>setting process metadata with <seemfa marker="#set_process_metadata/1">
	    <c>set_process_metadata/1</c></seemfa>
	    or <seemfa marker="#update_process_metadata/1">
	  <c>update_process_metadata/1</c></seemfa>.</item>
          <item>setting primary metadata with <seemfa marker="#set_primary_config/1">
            <c>set_primary_config/1</c></seemfa> or through the kernel
            configuration parameter <seeapp marker="kernel_app#logger_metadata">
            logger_metadata</seeapp></item>
        </list>
        <note>
          <p>When adding custom metadata, make sure not to use any of the keys
            mentioned above as that may cause a lot of confusion about the log
            events.</p>
        </note>
	<p>Logger merges all the metadata maps before forwarding the
	  log event to the handlers. If the same keys occur, values
	  from the log call overwrite process metadata, which overwrites
          the primary metadata, which in turn overwrite values set by Logger.</p>
	<p>The following custom metadata keys have special meaning:</p>
	<taglist>
	  <tag><c>domain</c></tag>
	  <item>
	    <p>The value associated with this key is used by filters
	      for grouping log events originating from, for example,
	      specific functional
	      areas. See <seemfa marker="logger_filters#domain/2">
		<c>logger_filters:domain/2</c></seemfa>
	      for a description of how this field can be used.</p>
	  </item>
	  <tag><c>report_cb</c></tag>
	  <item>
	    <p>If the log message is specified as
	      a <seetype marker="#report"><c>report()</c></seetype>,
	      the <c>report_cb</c> key can be associated with a fun
	      (report callback) that converts the report to a format
	      string and arguments, or directly to a string. See the
	      type definition
	      of <seetype marker="#report_cb"><c>report_cb()</c></seetype>,
	      and
	      section <seeguide marker="logger_chapter#log_message">Log
	      Message</seeguide> in the User's Guide for more
	      information about report callbacks.</p>
	  </item>
	</taglist>
      </desc>
    </datatype>
    <datatype>
      <name name="msg_fun"/>
      <desc>
	<p></p>
      </desc>
    </datatype>
    <datatype>
      <name name="msg_fun_return"/>
      <desc>
        <p></p>
      </desc>
    </datatype>
    <datatype>
      <name name="olp_config"/>
      <desc>
	<p></p>
      </desc>
    </datatype>
    <datatype>
      <name name="primary_config"/>
      <desc>
	<p>Primary configuration data for Logger. The following
	  default values apply:</p>
	<list>
	  <item><c>level => info</c></item>
	  <item><c>filter_default => log</c></item>
	  <item><c>filters => []</c></item>
	</list>
      </desc>
    </datatype>
    <datatype>
      <name name="report"/>
      <desc>
	<p></p>
      </desc>
    </datatype>
    <datatype>
      <name name="report_cb"/>
      <desc>
	<p>A fun which converts a <seetype marker="#report"><c>report()</c>
	  </seetype> to a format string and arguments, or directly to a string.
	  See section <seeguide marker="logger_chapter#log_message">Log
	    Message</seeguide> in the User's Guide for more
	  information.</p>
      </desc>
    </datatype>
    <datatype>
      <name name="report_cb_config"/>
      <desc>
	<p></p>
      </desc>
    </datatype>
    <datatype>
      <name name="timestamp"/>
      <desc>
	<p>A timestamp produced
	  with <seemfa marker="#timestamp/0">
	    <c>logger:timestamp()</c></seemfa>.</p>
      </desc>
    </datatype>
  </datatypes>

  <section>
    <title>Macros</title>
    <p>The following macros are defined in <c>logger.hrl</c>, which
      is included in a module with the directive</p>
    <code>
    -include_lib("kernel/include/logger.hrl").</code>

    <list>
      <item><c>?LOG_EMERGENCY(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_EMERGENCY(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_ALERT(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_ALERT(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_CRITICAL(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_CRITICAL(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_ERROR(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_ERROR(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_WARNING(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_WARNING(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_NOTICE(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_NOTICE(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_INFO(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_INFO(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG_DEBUG(StringOrReport[,Metadata])</c></item>
      <item><c>?LOG_DEBUG(FunOrFormat,Args[,Metadata])</c></item>
      <item><c>?LOG(Level,StringOrReport[,Metadata])</c></item>
      <item><c>?LOG(Level,FunOrFormat,Args[,Metadata])</c></item>
    </list>

    <p>All macros expand to a call to Logger, where <c>Level</c> is
      taken from the macro name, or from the first argument in the
      case of the <c>?LOG</c> macro. Location data is added to the
      metadata as described under
      the <seetype marker="#metadata"><c>metadata()</c></seetype>
      type definition.</p>

    <p>The call is wrapped in a case statement and will be evaluated
      only if <c>Level</c> is equal to or below the configured log
      level.</p>
  </section>

 
  <funcs>
    <fsdescription>
      <marker id="logging_API"/>
      <title>Logging API functions</title>
    </fsdescription>
    <func>
      <name since="OTP 21.0">emergency(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">emergency(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">emergency(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>emergency</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(emergency,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">alert(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">alert(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">alert(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>alert</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(alert,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">critical(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">critical(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">critical(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>critical</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(critical,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">error(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">error(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">error(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>error</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(error,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">warning(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">warning(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">warning(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>warning</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(warning,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">notice(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">notice(Format,Args[,Metadata])</name>
     <name since="OTP 21.0">notice(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>notice</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(notice,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">info(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">info(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">info(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>info</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(info,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name since="OTP 21.0">debug(StringOrReport[,Metadata])</name>
      <name since="OTP 21.0">debug(Format,Args[,Metadata])</name>
      <name since="OTP 21.0">debug(Fun,FunArgs[,Metadata])</name>
      <fsummary>Logs the given message as level <c>debug</c>.</fsummary>
      <desc>
        <p>Equivalent to
	<seemfa marker="#log/2"><c>log(debug,...)</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="log" arity="2" since="OTP 21.0"/>
      <name name="log" arity="3" clause_i="1" since="OTP 21.0"/>
      <name name="log" arity="3" clause_i="2" since="OTP 21.0"/>
      <name name="log" arity="3" clause_i="3" since="OTP 21.0"/>
      <name name="log" arity="4" clause_i="1" since="OTP 21.0"/>
      <name name="log" arity="4" clause_i="2" since="OTP 21.0"/>
      <fsummary>Logs the given message.</fsummary>
      <type variable="Level"/>
      <type variable="StringOrReport" name_i="1"/>
      <type variable="Format" name_i="3"/>
      <type variable="Args" name_i="3"/>
      <type variable="Fun" name_i="4"/>
      <type variable="FunArgs" name_i="4"/>
      <type variable="Metadata"/>
      <desc>
        <p>Create a log event at the given
          <seeguide marker="logger_chapter#log_level">log level</seeguide>,
          with the given <seeguide marker="logger_chapter#log_message">message</seeguide>
          to be logged and
          <seeguide marker="logger_chapter#metadata"><em>metadata</em></seeguide>.
        Examples:</p>
        <code>
%% A plain string
logger:log(info, "Hello World").
%% A plain string with metadata
logger:log(debug, "Hello World", #{ meta => data }).
%% A format string with arguments
logger:log(warning, "The roof is on ~ts",[Cause]).
%% A report
logger:log(warning, #{ what => roof, cause => Cause }).
        </code>
        <p>The message and metadata can either be given directly in the arguments,
          or returned from a fun. Passing a fun instead of the message/metadata directly is
          useful in scenarios when the message/metadata is very expensive to compute.
          This is because the fun is only evaluated when the message/metadata is
          actually needed, which may be not at all if the log event is not
          to be logged. Examples:</p>
        <code>
%% A plain string with expensive metadata
logger:info(fun([]) -> {"Hello World", #{ meta => expensive() }} end,[]).
%% An expensive report
logger:debug(fun(What) -> #{ what => What, cause => expensive() } end,roof).
%% A plain string with expensive metadata and normal metadata
logger:debug(fun([]) -> {"Hello World", #{ meta => expensive() }} end,[],
             #{ meta => data }).
        </code>
        <p>When metadata is given both as an argument and returned from the fun they
          are merged. If equal keys exists the values are taken from the metadata
          returned by the fun.</p>
      </desc>
    </func>
  </funcs>

  <funcs>
    <fsdescription>
      <marker id="configuration_API"/>
      <title>Configuration API functions</title>
    </fsdescription>
    <func>
      <name name="add_handler" arity="3" since="OTP 21.0"/>
      <fsummary>Add a handler with the given configuration.</fsummary>
      <desc>
        <p>Add a handler with the given configuration.</p>
	<p><c><anno>HandlerId</anno></c> is a unique identifier which
	  must be used in all subsequent calls referring to this
	  handler.</p>
      </desc>
    </func>

    <func>
      <name name="add_handler_filter" arity="3" since="OTP 21.0"/>
      <fsummary>Add a filter to the specified handler.</fsummary>
      <desc>
        <p>Add a filter to the specified handler.</p>
	<p>The filter fun is called with the log event as the first
	  parameter, and the specified <c>filter_args()</c> as the
	  second parameter.</p>
	<p>The return value of the fun specifies if a log event is to
	  be discarded or forwarded to the handler callback:</p>
	<taglist>
	  <tag><c>log_event()</c></tag>
	  <item>
	    <p>The filter <em>passed</em>. The next handler filter, if
	      any, is applied. If no more filters exist for this
	      handler, the log event is forwarded to the handler
	      callback.</p>
	  </item>
	  <tag><c>stop</c></tag>
	  <item>
	    <p>The filter <em>did not pass</em>, and the log event is
	      immediately discarded.</p>
	  </item>
	  <tag><c>ignore</c></tag>
	  <item>
	    <p>The filter has no knowledge of the log event. The next
	      handler filter, if any, is applied. If no more filters
	      exist for this handler, the value of
	      the <c>filter_default</c> configuration parameter for
	      the handler specifies if the log event shall be
	      discarded or forwarded to the handler callback.</p>
	  </item>
	</taglist>
	<p>See
	  section <seeguide marker="logger_chapter#filters">Filters</seeguide>
	  in the User's Guide for more information about filters.</p>
	<p>Some built-in filters exist. These are defined in
	  <seeerl marker="logger_filters"><c>logger_filters(3)</c></seeerl>.</p>
      </desc>
    </func>

    <func>
      <name name="add_handlers" arity="1" clause_i="1" since="OTP 21.0"/>
      <fsummary>Set up log handlers from the application's
	configuration parameters.</fsummary>
      <desc>
        <p>Reads the application configuration parameter <c>logger</c> and
          calls <c>add_handlers/1</c> with its contents.</p>
      </desc>
    </func>

    <func>
      <name name="add_handlers" arity="1" clause_i="2" since="OTP 21.0"/>
      <fsummary>Setup logger handlers.</fsummary>
      <type name="config_handler"/>
      <desc>
        <p>This function should be used by custom Logger handlers to make
        configuration consistent no matter which handler the system uses.
        Normal usage is to add a call to <c>logger:add_handlers/1</c>
        just after the processes that the handler needs are started,
        and pass the application's <c>logger</c> configuration as the argument.
	For example:</p>
        <code>
-behaviour(application).
start(_, []) ->
    case supervisor:start_link({local, my_sup}, my_sup, []) of
        {ok, Pid} ->
            ok = logger:add_handlers(my_app),
            {ok, Pid, []};
        Error -> Error
     end.</code>
       <p>This reads the <c>logger</c> configuration parameter from
         the <c>my_app</c> application and starts the configured
         handlers. The contents of the configuration use the same
         rules as the
         <seeguide marker="logger_chapter#handler-configuration">logger handler configuration</seeguide>.
       </p>
       <p>If the handler is meant to replace the default handler, the Kernel's
         default handler have to be disabled before the new handler is added.
         A <c>sys.config</c> file that disables the Kernel handler and adds
         a custom handler could look like this:</p>
         <code>
[{kernel,
  [{logger,
    %% Disable the default Kernel handler
    [{handler, default, undefined}]}]},
 {my_app,
  [{logger,
    %% Enable this handler as the default
    [{handler, default, my_handler, #{}}]}]}].
         </code>
      </desc>
    </func>

    <func>
      <name name="add_primary_filter" arity="2" since="OTP 21.0"/>
      <fsummary>Add a primary filter to Logger.</fsummary>
      <desc>
        <p>Add a primary filter to Logger.</p>
	<p>The filter fun is called with the log event as the first
	  parameter, and the specified <c>filter_args()</c> as the
	  second parameter.</p>
	<p>The return value of the fun specifies if a log event is to
	  be discarded or forwarded to the handlers:</p>
	<taglist>
	  <tag><c>log_event()</c></tag>
	  <item>
	    <p>The filter <em>passed</em>. The next primary filter, if
	      any, is applied. If no more primary filters exist, the
	      log event is forwarded to the handler part of Logger,
	      where handler filters are applied.</p>
	  </item>
	  <tag><c>stop</c></tag>
	  <item>
	    <p>The filter <em>did not pass</em>, and the log event is
	      immediately discarded.</p>
	  </item>
	  <tag><c>ignore</c></tag>
	  <item>
	    <p>The filter has no knowledge of the log event. The next
	      primary filter, if any, is applied. If no more primary
	      filters exist, the value of the
	      primary <c>filter_default</c> configuration parameter
	      specifies if the log event shall be discarded or
	      forwarded to the handler part.</p>
	  </item>
	</taglist>
	<p>See section <seeguide marker="logger_chapter#filters">
	    Filters</seeguide> in the User's Guide for more information
	    about filters.</p>
	<p>Some built-in filters exist. These are defined
	  in <seeerl marker="logger_filters"><c>logger_filters(3)</c></seeerl>.</p>
      </desc>
    </func>

    <func>
      <name name="get_config" arity="0" since="OTP 21.0"/>
      <fsummary>Look up the current Logger configuration</fsummary>
      <desc>
        <p>Look up all current Logger configuration, including primary,
          handler, and proxy configuration, and module level settings.</p>
      </desc>
    </func>

    <func>
      <name name="get_handler_config" arity="0" since="OTP 21.0"/>
      <fsummary>Look up the current configuration for all handlers.</fsummary>
      <desc>
        <p>Look up the current configuration for all handlers.</p>
      </desc>
    </func>

    <func>
      <name name="get_handler_config" arity="1" since="OTP 21.0"/>
      <fsummary>Look up the current configuration for the given
	handler.</fsummary>
      <desc>
        <p>Look up the current configuration for the given handler.</p>
      </desc>
    </func>

    <func>
      <name name="get_handler_ids" arity="0" since="OTP 21.0"/>
      <fsummary>Look up the identities for all installed handlers.</fsummary>
      <desc>
        <p>Look up the identities for all installed handlers.</p>
      </desc>
    </func>

    <func>
      <name name="get_primary_config" arity="0" since="OTP 21.0"/>
      <fsummary>Look up the current primary configuration for Logger.</fsummary>
      <desc>
        <p>Look up the current primary configuration for Logger.</p>
      </desc>
    </func>

    <func>
      <name name="get_proxy_config" arity="0" since="OTP 21.3"/>
      <fsummary>Look up the current configuration for the Logger proxy.</fsummary>
      <desc>
        <p>Look up the current configuration for the Logger proxy.</p>
	<p>For more information about the proxy, see
	  section <seeguide marker="logger_chapter#proxy">Logger
	  Proxy</seeguide> in the Kernel User's Guide.</p>
      </desc>
    </func>

    <func>
      <name name="get_module_level" arity="0" since="OTP 21.0"/>
      <fsummary>Look up all current module levels.</fsummary>
      <desc>
        <p>Look up all current module levels. Returns a list
          containing one <c>{Module,Level}</c> element for each module
          for which the module level was previously set
          with <seemfa marker="#set_module_level/2">
	    <c>set_module_level/2</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="get_module_level" arity="1" since="OTP 21.0"/>
      <fsummary>Look up the current level for the given modules.</fsummary>
      <desc>
        <p>Look up the current level for the given modules. Returns a
          list containing one <c>{Module,Level}</c> element for each
          of the given modules for which the module level was
          previously set with <seemfa marker="#set_module_level/2">
	    <c>set_module_level/2</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="get_process_metadata" arity="0" since="OTP 21.0"/>
      <fsummary>Retrieve data set with set_process_metadata/1.</fsummary>
      <desc>
        <p>Retrieve data set
          with <seemfa marker="#set_process_metadata/1">
	    <c>set_process_metadata/1</c></seemfa> or
	  <seemfa marker="#update_process_metadata/1">
	    <c>update_process_metadata/1</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="i" arity="0" since="OTP 21.3"/>
      <name name="i" arity="1" since="OTP 21.3"/>
      <fsummary>Pretty print the Logger configuration.</fsummary>
      <desc>
        <p>Pretty print the Logger configuration.</p>
      </desc>
    </func>

    <func>
      <name name="remove_handler" arity="1" since="OTP 21.0"/>
      <fsummary>Remove the handler with the specified identity.</fsummary>
      <desc>
        <p>Remove the handler identified by <c><anno>HandlerId</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="remove_handler_filter" arity="2" since="OTP 21.0"/>
      <fsummary>Remove a filter from the specified handler.</fsummary>
      <desc>
        <p>Remove the filter identified
          by <c><anno>FilterId</anno></c> from the handler identified
          by <c><anno>HandlerId</anno></c>.</p>
      </desc>
    </func>

    <func>
      <name name="remove_primary_filter" arity="1" since="OTP 21.0"/>
      <fsummary>Remove a primary filter from Logger.</fsummary>
      <desc>
        <p>Remove the primary filter identified
          by <c><anno>FilterId</anno></c> from Logger.</p>
      </desc>
    </func>

    <func>
      <name name="set_application_level" arity="2" since="OTP 21.1"/>
      <fsummary>Set the log level for all modules in the specified application.</fsummary>
      <desc>
        <p>Set the log level for all the modules of the specified application.</p>
        <p>This function is a convenience function that calls
          <seemfa marker="#set_module_level/2">logger:set_module_level/2</seemfa>
          for each module associated with an application.</p>
      </desc>
    </func>

    <func>
      <name name="set_handler_config" arity="2" since="OTP 21.0"/>
      <fsummary>Set configuration data for the specified handler.</fsummary>
      <desc>
        <p>Set configuration data for the specified handler. This
          overwrites the current handler configuration.</p>
	<p>To modify the existing configuration,
	  use <seemfa marker="#update_handler_config/2">
	    <c>update_handler_config/2</c></seemfa>, or, if a more
	  complex merge is needed, read the current configuration
	  with <seemfa marker="#get_handler_config/1"><c>get_handler_config/1</c>
	  </seemfa>, then do the merge before writing the new
	  configuration back with this function.</p>
	<p>If a key is removed compared to the current configuration,
	  and the key is known by Logger, the default value is used. If
	  it is a custom key, then it is up to the handler
	  implementation if the value is removed or a default value is
	  inserted.</p>
      </desc>
    </func>

    <func>
      <name name="set_handler_config" arity="3" clause_i="1" since="OTP 21.0"/>
      <name name="set_handler_config" arity="3" clause_i="2" since="OTP 21.0"/>
      <name name="set_handler_config" arity="3" clause_i="3" since="OTP 21.0"/>
      <name name="set_handler_config" arity="3" clause_i="4" since="OTP 21.0"/>
      <name name="set_handler_config" arity="3" clause_i="5" since="OTP 21.0"/>
      <fsummary>Add or update configuration data for the specified
        handler.</fsummary>
      <type variable="HandlerId"/>
      <type variable="Level" name_i="1"/>
      <type variable="FilterDefault" name_i="2"/>
      <type variable="Filters" name_i="3"/>
      <type variable="Formatter" name_i="4"/>
      <type variable="Config" name_i="5"/>
      <type variable="Return"/>
      <desc>
        <p>Add or update configuration data for the specified
          handler. If the given <c><anno>Key</anno></c> already
          exists, its associated value will be changed
          to the given value. If it does not exist, it will
          be added.</p>
	<p>If the value is incomplete, which for example can be the
	  case for the <c>config</c> key, it is up to the handler
	  implementation how the unspecified parts are set. For all
	  handlers in the Kernel application, unspecified data for
	  the <c>config</c> key is set to default values. To update
	  only specified data, and keep the existing configuration for
	  the rest, use <seemfa marker="#update_handler_config/3">
	    <c>update_handler_config/3</c></seemfa>.</p>
	<p>See the definition of
	  the <seetype marker="logger_handler#config">
	    <c>logger_handler:config()</c></seetype> type for more
	  information about the different parameters.</p>
      </desc>
    </func>

    <func>
      <name name="set_primary_config" arity="1" since="OTP 21.0"/>
      <fsummary>Set primary configuration data for Logger.</fsummary>
      <desc>
        <p>Set primary configuration data for Logger. This
          overwrites the current configuration.</p>
	<p>To modify the existing configuration,
	  use <seemfa marker="#update_primary_config/1">
	    <c>update_primary_config/1</c></seemfa>, or, if a more
	  complex merge is needed, read the current configuration
	  with <seemfa marker="#get_primary_config/0"><c>get_primary_config/0</c>
	  </seemfa>, then do the merge before writing the new
	  configuration back with this function.</p>
	<p>If a key is removed compared to the current configuration,
	  the default value is used.</p>
      </desc>
    </func>

    <func>
      <name name="set_primary_config" arity="2" clause_i="1" since="OTP 21.0"/>
      <name name="set_primary_config" arity="2" clause_i="2" since="OTP 21.0"/>
      <name name="set_primary_config" arity="2" clause_i="3" since="OTP 21.0"/>
      <name name="set_primary_config" arity="2" clause_i="4" since="OTP 24.0"/>
      <fsummary>Add or update primary configuration data for Logger.</fsummary>
      <type variable="Level" name_i="1"/>
      <type variable="FilterDefault" name_i="2"/>
      <type variable="Filters" name_i="3"/>
      <type variable="Meta" name_i="4"/>
      <desc>
        <p>Add or update primary configuration data for Logger. If the
          given <c><anno>Key</anno></c> already exists, its associated
          value will be changed to the given value. If it does not
          exist, it will be added.</p>
      </desc>
    </func>

    <func>
      <name name="set_proxy_config" arity="1" since="OTP 21.3"/>
      <fsummary>Set configuration data for the Logger proxy.</fsummary>
      <desc>
        <p>Set configuration data for the Logger proxy. This
          overwrites the current proxy configuration. Keys that are not
          specified in the <c><anno>Config</anno></c> map gets default
          values.</p>
	<p>To modify the existing configuration,
	  use <seemfa marker="#update_proxy_config/1">
	    <c>update_proxy_config/1</c></seemfa>, or, if a more
	  complex merge is needed, read the current configuration
	  with <seemfa marker="#get_proxy_config/0"><c>get_proxy_config/0</c>
	  </seemfa>, then do the merge before writing the new
	  configuration back with this function.</p>
	<p>For more information about the proxy, see
	  section <seeguide marker="logger_chapter#proxy">Logger
	  Proxy</seeguide> in the Kernel User's Guide.</p>
      </desc>
    </func>

    <func>
      <name name="set_module_level" arity="2" since="OTP 21.0"/>
      <fsummary>Set the log level for the specified modules.</fsummary>
      <desc>
        <p>Set the log level for the specified modules.</p>
	<p>The log level for a module overrides the primary log level
	  of Logger for log events originating from the module in
	  question. Notice, however, that it does not override the
	  level configuration for any handler.</p>
	<p>For example: Assume that the primary log level for Logger
	  is <c>info</c>, and there is one handler, <c>h1</c>, with
	  level <c>info</c> and one handler, <c>h2</c>, with
	  level <c>debug</c>.</p>
	<p>With this configuration, no debug messages will be logged,
	  since they are all stopped by the primary log level.</p>
	<p>If the level for <c>mymodule</c> is now set
	  to <c>debug</c>, then debug events from this module will be
	  logged by the handler <c>h2</c>, but not by
	  handler <c>h1</c>.</p>
	<p>Debug events from other modules are still not logged.</p>
        <p>To change the primary log level for Logger, use
          <seemfa marker="#set_primary_config/2">
	    <c>set_primary_config(level, Level)</c></seemfa>.</p>
        <p>To change the log level for a handler, use
          <seemfa marker="#set_handler_config/3">
	    <c>set_handler_config(HandlerId, level, Level)</c>
	  </seemfa>.</p>
	<note>
	  <p>The originating module for a log event is only detected
	    if the key <c>mfa</c> exists in the metadata, and is
	    associated with <c>{Module, Function, Arity}</c>. When log
	    macros are used, this association is automatically added
	    to all log events. If an API function is called directly,
	    without using a macro, the logging client must explicitly
	    add this information if module levels shall have any
	    effect.</p>
	</note>
      </desc>
    </func>

    <func>
      <name name="set_process_metadata" arity="1" since="OTP 21.0"/>
      <fsummary>Set metadata to use when logging from current process.</fsummary>
      <desc>
        <p>Set metadata which Logger shall automatically insert in
          all log events produced on the current process.</p>
	<p>Location data produced by the log macros, and/or metadata
	  given as argument to the log call (API function or macro),
	  are merged with the process metadata. If the same keys
	  occur, values from the metadata argument to the log call
	  overwrite values from the process metadata, which in turn
	  overwrite values from the location data.</p>
	<p>Subsequent calls to this function overwrites previous data
          set. To update existing data instead of overwriting it,
          see <seemfa marker="#update_process_metadata/1">
	    <c>update_process_metadata/1</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="unset_application_level" arity="1" since="OTP 21.1"/>
      <fsummary>Unset the log level for all modules in the specified application.</fsummary>
      <desc>
        <p>Unset the log level for all the modules of the specified application.</p>
        <p>This function is a utility function that calls
          <seemfa marker="#unset_module_level/1">logger:unset_module_level/2</seemfa>
          for each module associated with an application.</p>
      </desc>
    </func>

    <func>
      <name name="unset_module_level" arity="0" since="OTP 21.0"/>
      <fsummary>Remove module specific log settings for all modules.</fsummary>
      <desc>
        <p>Remove module specific log settings. After this, the
          primary log level is used for all modules.</p>
      </desc>
    </func>

    <func>
      <name name="unset_module_level" arity="1" since="OTP 21.0"/>
      <fsummary>Remove module specific log settings for the given
	modules.</fsummary>
      <desc>
        <p>Remove module specific log settings. After this, the
          primary log level is used for the specified modules.</p>
      </desc>
    </func>

    <func>
      <name name="unset_process_metadata" arity="0" since="OTP 21.0"/>
      <fsummary>Delete data set with set_process_metadata/1.</fsummary>
      <desc>
        <p>Delete data set
          with <seemfa marker="#set_process_metadata/1">
	    <c>set_process_metadata/1</c></seemfa> or
	  <seemfa marker="#update_process_metadata/1">
	    <c>update_process_metadata/1</c></seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="update_formatter_config" arity="2" since="OTP 21.0"/>
      <fsummary>Update the formatter configuration for the specified handler.</fsummary>
      <desc>
        <p>Update the formatter configuration for the specified handler.</p>
	<p>The new configuration is merged with the existing formatter
	  configuration.</p>
	<p>To overwrite the existing configuration without any merge,
	  use</p>
	<pre>
<seemfa marker="#set_handler_config/3">set_handler_config(HandlerId, formatter,
	      {FormatterModule, FormatterConfig})</seemfa>.</pre>
      </desc>
    </func>

    <func>
      <name name="update_formatter_config" arity="3" since="OTP 21.0"/>
      <fsummary>Update the formatter configuration for the specified handler.</fsummary>
      <desc>
        <p>Update the formatter configuration for the specified handler.</p>
	<p>This is equivalent to</p>
	<pre>
<seemfa marker="#update_formatter_config/2">update_formatter_config(<anno>HandlerId</anno>, #{<anno>Key</anno> => <anno>Value</anno>})</seemfa></pre>
      </desc>
    </func>

    <func>
      <name name="update_handler_config" arity="2" since="OTP 21.0"/>
      <fsummary>Update configuration data for the specified handler.</fsummary>
      <desc>
        <p>Update configuration data for the specified handler. This function
          behaves as if it was implemented as follows:</p>
	<code type="erl">
{ok, {_, Old}} = logger:get_handler_config(HandlerId),
logger:set_handler_config(HandlerId, maps:merge(Old, Config)).
	</code>
	<p>To overwrite the existing configuration without any merge,
	  use <seemfa marker="#set_handler_config/2"><c>set_handler_config/2</c>
	  </seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="update_handler_config" arity="3" clause_i="1" since="OTP 21.2"/>
      <name name="update_handler_config" arity="3" clause_i="2" since="OTP 21.2"/>
      <name name="update_handler_config" arity="3" clause_i="3" since="OTP 21.2"/>
      <name name="update_handler_config" arity="3" clause_i="4" since="OTP 21.2"/>
      <name name="update_handler_config" arity="3" clause_i="5" since="OTP 21.2"/>
      <fsummary>Add or update configuration data for the specified
        handler.</fsummary>
      <type variable="HandlerId"/>
      <type variable="Level" name_i="1"/>
      <type variable="FilterDefault" name_i="2"/>
      <type variable="Filters" name_i="3"/>
      <type variable="Formatter" name_i="4"/>
      <type variable="Config" name_i="5"/>
      <type variable="Return"/>
      <desc>
        <p>Add or update configuration data for the specified
          handler. If the given <c><anno>Key</anno></c> already
          exists, its associated value will be changed
          to the given value. If it does not exist, it will
          be added.</p>
	<p>If the value is incomplete, which for example can be the
	  case for the <c>config</c> key, it is up to the handler
	  implementation how the unspecified parts are set. For all
	  handlers in the Kernel application, unspecified data for
	  the <c>config</c> key is not changed. To reset unspecified
	  data to default values,
	  use <seemfa marker="#set_handler_config/3">
	    <c>set_handler_config/3</c></seemfa>.</p>
	<p>See the definition of
	  the <seetype marker="logger_handler#config">
	    <c>logger_handler:config()</c></seetype> type for more
	  information about the different parameters.</p>
      </desc>
    </func>

    <func>
      <name name="update_primary_config" arity="1" since="OTP 21.0"/>
      <fsummary>Update primary configuration data for Logger.</fsummary>
      <desc>
        <p>Update primary configuration data for Logger. This function
          behaves as if it was implemented as follows:</p>
	<code type="erl">
Old = logger:get_primary_config(),
logger:set_primary_config(maps:merge(Old, Config)).
	</code>
	<p>To overwrite the existing configuration without any merge,
	  use <seemfa marker="#set_primary_config/1"><c>set_primary_config/1</c>
	  </seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="update_process_metadata" arity="1" since="OTP 21.0"/>
      <fsummary>Set or update metadata to use when logging from
	current process.</fsummary>
      <desc>
	<p>Set or update metadata to use when logging from current
	  process</p>
	<p>If process metadata exists for the current process, this
	  function behaves as if it was implemented as follows:</p>
	<code type="erl">
logger:set_process_metadata(maps:merge(logger:get_process_metadata(), Meta)).
	</code>
	<p>If no process metadata exists, the function behaves as
	  <seemfa marker="#set_process_metadata/1">
	    <c>set_process_metadata/1</c>
	  </seemfa>.</p>
      </desc>
    </func>

    <func>
      <name name="update_proxy_config" arity="1" since="OTP 21.3"/>
      <fsummary>Update configuration data for the Logger proxy.</fsummary>
      <desc>
        <p>Update configuration data for the Logger proxy. This function
          behaves as if it was implemented as follows:</p>
	<code type="erl">
Old = logger:get_proxy_config(),
logger:set_proxy_config(maps:merge(Old, Config)).
	</code>
	<p>To overwrite the existing configuration without any merge,
	  use <seemfa marker="#set_proxy_config/1"><c>set_proxy_config/1</c>
	  </seemfa>.</p>
	<p>For more information about the proxy, see
	  section <seeguide marker="logger_chapter#proxy">Logger
	  Proxy</seeguide> in the Kernel User's Guide.</p>
      </desc>
    </func>
  </funcs>

  <funcs>
    <fsdescription>
      <marker id="misc_API"/>
      <title>Miscellaneous API functions</title>
    </fsdescription>
    <func>
      <name name="compare_levels" arity="2" since="OTP 21.0"/>
      <fsummary>Compare the severity of two log levels.</fsummary>
      <desc>
        <p>Compare the severity of two log levels. Returns <c>gt</c>
          if <c>Level1</c> is more severe than
          <c>Level2</c>, <c>lt</c> if <c>Level1</c> is less severe,
          and <c>eq</c> if the levels are equal.</p>
      </desc>
    </func>

    <func>
      <name name="format_report" arity="1" since="OTP 21.0"/>
      <fsummary>Convert a log message on report form to {Format, Args}.</fsummary>
      <desc>
        <p>Convert a log message on report form to <c>{Format,
	  Args}</c>. This is the default report callback used
	  by <seeerl marker="logger_formatter">
	    <c>logger_formatter(3)</c></seeerl> when no custom report
	  callback is found. See
	  section <seeguide marker="logger_chapter#log_message">Log
	    Message</seeguide> in the Kernel User's Guide for
	  information about report callbacks and valid forms of log
	  messages.</p>
	<p>The function produces lines of <c>Key: Value</c> from
	  key-value lists. Strings are printed with <c>~ts</c> and
	  other terms with <c>~tp</c>.</p>
	<p>If <c><anno>Report</anno></c> is a map, it is converted to
	  a key-value list before formatting as such.</p>
      </desc>
    </func>

    <func>
      <name name="timestamp" arity="0" since="OTP 21.3"/>
      <fsummary>Return a timestamp to insert in meta data for a log
	event.</fsummary>
      <desc>
        <p>Return a timestamp that can be inserted as the <c>time</c>
          field in the meta data for a log event. It is produced with
	  <seemfa marker="kernel:os#system_time/1">
            <c>os:system_time(microsecond)</c></seemfa>.</p>
	<p>Notice that Logger automatically inserts a timestamp in the
	  meta data unless it already exists. This function is
	  exported for the rare case when the timestamp must be taken
	  at a different point in time than when the log event is
	  issued.</p>
      </desc>
    </func>

    <func>
      <name name="reconfigure" arity="0" since="OTP 24.2"/>
      <fsummary>Reconfigure Logger.</fsummary>
      <desc>
        <p>Reconfigure Logger using updated <c>kernel</c> configuration
	  that was set after <c>kernel</c> application was loaded.</p>
        <p>Beware, that this is meant to be run only by the build tools,
	  not manually during application lifetime, as this may cause
	  missing log entries.</p>
      </desc>
    </func>

  </funcs>

  <section>
    <title>See Also</title>
    <p>
      <seefile marker="config"><c>config(4)</c></seefile>,
      <seeerl marker="erts:erlang"><c>erlang(3)</c></seeerl>,
      <seeerl marker="stdlib:io"><c>io(3)</c></seeerl>,
      <seeerl marker="logger_disk_log_h"><c>logger_disk_log_h(3)</c></seeerl>,
      <seeerl marker="logger_filters"><c>logger_filters(3)</c></seeerl>,
      <seeerl marker="logger_handler"><c>logger_handler(3)</c></seeerl>,
      <seeerl marker="logger_formatter"><c>logger_formatter(3)</c></seeerl>,
      <seeerl marker="logger_std_h"><c>logger_std_h(3)</c></seeerl>,
      <seeerl marker="stdlib:unicode"><c>unicode(3)</c></seeerl>
    </p>
  </section>
</erlref>
