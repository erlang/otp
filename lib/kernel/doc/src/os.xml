<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1997</year><year>2013</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>os</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module>os</module>
  <modulesummary>Operating System Specific Functions</modulesummary>
  <description>
    <p>The functions in this module are operating system specific.
      Careless use of these functions will result in programs that will
      only run on a specific platform. On the other hand, with careful
      use these functions can be of help in enabling a program to run on
      most platforms.</p>
  </description>
  <funcs>
    <func>
      <name name="cmd" arity="1"/>
      <fsummary>Execute a command in a shell of the target OS</fsummary>
      <desc>
        <p>Executes <c><anno>Command</anno></c> in a command shell of the target OS,
          captures the standard output of the command and returns this
          result as a string. This function is a replacement of
          the previous <c>unix:cmd/1</c>; on a Unix platform they are
          equivalent.</p>
        <p>Examples:</p>
        <code type="none">
LsOut = os:cmd("ls"), % on unix platform
DirOut = os:cmd("dir"), % on Win32 platform</code>
        <p>Note that in some cases, standard output of a command when
          called from another program (for example, <c>os:cmd/1</c>)
          may differ, compared to the standard output of the command
          when called directly from an OS command shell.</p>
      </desc>
    </func>
    <func>
      <name name="find_executable" arity="1"/>
      <name name="find_executable" arity="2"/>
      <fsummary>Absolute filename of a program</fsummary>
      <desc>
        <p>These two functions look up an executable program given its
          name and a search path, in the same way as the underlying
          operating system. <c>find_executable/1</c> uses the current
          execution path (that is, the environment variable PATH on
          Unix and Windows).</p>
        <p><c><anno>Path</anno></c>, if given, should conform to the syntax of
          execution paths on the operating system. The absolute
          filename of the executable program <c><anno>Name</anno></c> is returned,
          or <c>false</c> if the program was not found.</p>
      </desc>
    </func>
    <func>
      <name name="getenv" arity="0"/>
      <fsummary>List all environment variables</fsummary>
      <desc>
        <p>Returns a list of all environment variables.
          Each environment variable is given as a single string on
          the format <c>"VarName=Value"</c>, where <c>VarName</c> is
          the name of the variable and <c>Value</c> its value.</p>
	<p>If Unicode file name encoding is in effect (see the <seealso
	marker="erts:erl#file_name_encoding">erl manual
	page</seealso>), the strings may contain characters with
	codepoints > 255.</p>
      </desc>
    </func>
    <func>
      <name name="getenv" arity="1"/>
      <fsummary>Get the value of an environment variable</fsummary>
      <desc>
        <p>Returns the <c><anno>Value</anno></c> of the environment variable
          <c><anno>VarName</anno></c>, or <c>false</c> if the environment variable
          is undefined.</p>
	<p>If Unicode file name encoding is in effect (see the <seealso
	marker="erts:erl#file_name_encoding">erl manual
	page</seealso>), the strings (both <c><anno>VarName</anno></c> and
	<c><anno>Value</anno></c>) may contain characters with codepoints > 255.</p>
      </desc>
    </func>
    <func>
      <name name="getenv" arity="2"/>
      <fsummary>Get the value of an environment variable</fsummary>
      <desc>
        <p>Returns the <c><anno>Value</anno></c> of the environment variable
          <c><anno>VarName</anno></c>, or <c>DefaultValue</c> if the environment variable
          is undefined.</p>
	<p>If Unicode file name encoding is in effect (see the <seealso
	marker="erts:erl#file_name_encoding">erl manual
	page</seealso>), the strings (both <c><anno>VarName</anno></c> and
	<c><anno>Value</anno></c>) may contain characters with codepoints > 255.</p>
      </desc>
    </func>
    <func>
      <name name="getpid" arity="0"/>
      <fsummary>Return the process identifier of the emulator process</fsummary>
      <desc>
        <p>Returns the process identifier of the current Erlang emulator
          in the format most commonly used by the operating system
          environment. <c><anno>Value</anno></c> is returned as a string containing
          the (usually) numerical identifier for a process. On Unix,
          this is typically the return value of the <c>getpid()</c>
          system call. On Windows,
          the process id as returned by the <c>GetCurrentProcessId()</c>
          system call is used.</p>
      </desc>
    </func>
    <func>
      <name name="putenv" arity="2"/>
      <fsummary>Set a new value for an environment variable</fsummary>
      <desc>
        <p>Sets a new <c><anno>Value</anno></c> for the environment variable
          <c><anno>VarName</anno></c>.</p>
	<p>If Unicode filename encoding is in effect (see the <seealso
	marker="erts:erl#file_name_encoding">erl manual
	page</seealso>), the strings (both <c><anno>VarName</anno></c> and
	<c><anno>Value</anno></c>) may contain characters with codepoints > 255.</p>
	<p>On Unix platforms, the environment will be set using UTF-8 encoding
	if Unicode file name translation is in effect. On Windows the 
	environment is set using wide character interfaces.</p>
      </desc>
    </func>
    <func>
      <name name="system_time" arity="0"/>
      <fsummary>Current OS system time</fsummary>
      <desc>
	<p>Returns current
	<seealso marker="erts:time_correction#OS_System_Time">OS system time</seealso>
	in <c>native</c>
	<seealso marker="erts:erlang#type_time_unit">time unit</seealso>.</p>

	<note><p>This time is <em>not</em> a monotonically increasing time.</p></note>
      </desc>
    </func>
    <func>
      <name name="system_time" arity="1"/>
      <fsummary>Current OS system time</fsummary>
      <desc>
	<p>Returns current
	<seealso marker="erts:time_correction#OS_System_Time">OS system time</seealso>
	converted into the <c><anno>Unit</anno></c> passed as argument.</p>

	<p>Calling <c>os:system_time(<anno>Unit</anno>)</c> is equivalent to: 
	<seealso marker="erts:erlang#convert_time_unit/3"><c>erlang:convert_time_unit</c></seealso><c>(</c><seealso marker="#system_time/0"><c>os:system_time()</c></seealso><c>,
	native, <anno>Unit</anno>)</c>.</p>

	<note><p>This time is <em>not</em> a monotonically increasing time.</p></note>
      </desc>
    </func>
    <func>
      <name name="timestamp" arity="0"/>
      <type_desc variable="Timestamp">Timestamp = {MegaSecs, Secs, MicroSecs}</type_desc>
      <fsummary>Current OS system time on the erlang:timestamp/0 format</fsummary>
      <desc>
      <p>Returns current
	<seealso marker="erts:time_correction#OS_System_Time">OS system time</seealso>
        in the same format as <seealso marker="erts:erlang#timestamp/0">erlang:timestamp/0</seealso>.
	The tuple can be used together with the function
	<seealso marker="stdlib:calendar#now_to_universal_time/1">calendar:now_to_universal_time/1</seealso> 
        or <seealso marker="stdlib:calendar#now_to_local_time/1">calendar:now_to_local_time/1</seealso> to
        get calendar time. Using the calendar time together with the <c>MicroSecs</c> part of the return
        tuple from this function allows you to log timestamps in high resolution and consistent with the
        time in the rest of the operating system.</p>
      <p>Example of code formatting a string in the format &quot;DD Mon YYYY HH:MM:SS.mmmmmm&quot;, where
         DD is the day of month, Mon is the textual month name, YYYY is the year, HH:MM:SS is the time and
         mmmmmm is the microseconds in six positions:</p>
<code>
-module(print_time).
-export([format_utc_timestamp/0]).
format_utc_timestamp() ->
    TS = {_,_,Micro} = os:timestamp(),
    {{Year,Month,Day},{Hour,Minute,Second}} = 
	calendar:now_to_universal_time(TS),
    Mstr = element(Month,{"Jan","Feb","Mar","Apr","May","Jun","Jul",
			  "Aug","Sep","Oct","Nov","Dec"}),
    io_lib:format("~2w ~s ~4w ~2w:~2..0w:~2..0w.~6..0w",
		  [Day,Mstr,Year,Hour,Minute,Second,Micro]).
</code>

       <p>The module above could be used in the following way:</p>
<pre>
1> <input>io:format("~s~n",[print_time:format_utc_timestamp()]).</input>
29 Apr 2009  9:55:30.051711
</pre>
       <p>OS system time can also be retreived by
	<c><seealso marker="#system_time/0"><c>os:system_time/0</c></seealso></c>,
	and <seealso marker="#system_time/1"><c>os:system_time/1</c></seealso>.</p>
      </desc>
    </func>
    <func>
      <name name="type" arity="0"/>
      <fsummary>Return the OS family and, in some cases, OS name of the current operating system</fsummary>
      <desc>
        <p>Returns the <c><anno>Osfamily</anno></c> and, in some cases, <c><anno>Osname</anno></c>
          of the current operating system.</p>
        <p>On Unix, <c><anno>Osname</anno></c> will have same value as
          <c>uname -s</c> returns, but in lower case. For example, on
          Solaris 1 and 2, it will be <c>sunos</c>.</p>
        <p>In Windows, <c><anno>Osname</anno></c> will be either <c>nt</c> (on
          Windows NT), or <c>windows</c> (on Windows 95).</p>
        <note>
          <p>Think twice before using this function. Use the
            <c>filename</c> module if you want to inspect or build
            file names in a portable way.
            Avoid matching on the <c><anno>Osname</anno></c> atom.</p>
        </note>
      </desc>
    </func>
    <func>
      <name name="unsetenv" arity="1"/>
      <fsummary>Delete an environment variable</fsummary>
      <desc>
	<p>Deletes the environment variable <c><anno>VarName</anno></c>.</p>
	<p>If Unicode filename encoding is in effect (see the <seealso
	marker="erts:erl#file_name_encoding">erl manual
	page</seealso>), the string (<c><anno>VarName</anno></c>) may
	contain characters with codepoints > 255.</p>
      </desc>
    </func>
    <func>
      <name name="version" arity="0"/>
      <fsummary>Return the Operating System version</fsummary>
      <desc>
        <p>Returns the operating system version.
          On most systems, this function returns a tuple, but a string
          will be returned instead if the system has versions which
          cannot be expressed as three numbers.</p>
        <note>
          <p>Think twice before using this function. If you still need
            to use it, always <c>call os:type()</c> first.</p>
        </note>
      </desc>
    </func>
  </funcs>
</erlref>

