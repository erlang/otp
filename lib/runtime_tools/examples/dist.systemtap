/* example usage: stap /path/to/dist.systemtap -x <pid> */
/*
 * %CopyrightBegin%
 *
 * Copyright Scott Lystig Fritchie and Andreas Schultz, 2011-2016. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * %CopyrightEnd%
 */
/*
 * Note: This file assumes that you're using the SMP-enabled Erlang
 *       virtual machine, "beam.smp".
 *       Note that other variations of the virtual machine also have
 *       different names, e.g. the debug build of the SMP-enabled VM
 *       is "beam.debug.smp".
 *
 *       To use a different virtual machine, replace each instance of
 *       "beam.smp" with "beam.debug.smp" or the VM name appropriate
 *       to your environment.
 */

probe process("beam.smp").mark("dist-monitor")
{
    printf("monitor: pid %d, who %s, what %s, node %s, type %s, reason %s\n",
           pid(),
           user_string($arg1), user_string($arg2), user_string($arg3), user_string($arg4),
           user_string($arg5));
}

probe process("beam.smp").mark("dist-port_busy")
{
    printf("dist port_busy: node %s, port %s, remote_node %s, blocked pid %s\n",
           user_string($arg1), user_string($arg2), user_string($arg3), user_string($arg4));
    blocked_procs[user_string($arg4)] = local_clock_ns();
}

probe process("beam.smp").mark("dist-port_busy")
{
    printf("dist port_busy: node %s, port %s, remote_node %s, blocked pid %s\n",
           user_string($arg1), user_string($arg2), user_string($arg3), user_string($arg4));
    blocked_procs[user_string($arg4)] = local_clock_ns();
}

probe process("beam.smp").mark("dist-output")
{
    printf("dist output: node %s, port %s, remote_node %s bytes %d\n",
           user_string($arg1), user_string($arg2), user_string($arg3), $arg4);
}

probe process("beam.smp").mark("dist-outputv")
{
    printf("port outputv: node %s, port %s, remote_node %s bytes %d\n",
           user_string($arg1), user_string($arg2), user_string($arg3), $arg4);
}

probe process("beam.smp").mark("process-scheduled")
{
    pidstr = user_string($arg1);
    if (pidstr in blocked_procs) {
	printf("blocked pid %s scheduled now, waited %d microseconds\n",
		pidstr, (local_clock_ns() - blocked_procs[pidstr]) / 1000);
	delete blocked_procs[pidstr];
    }
}

global blocked_procs;
