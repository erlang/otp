/* example usage: stap /path/to/driver1.systemtap -x <pid> */
/*
 * %CopyrightBegin%
 *
 * Copyright Scott Lystig Fritchie and Andreas Schultz, 2011-2012. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * %CopyrightEnd%
 */
/*
 * Note: This file assumes that you're using the non-SMP-enabled Erlang
 *       virtual machine, "beam".  The SMP-enabled VM is called "beam.smp".
 *       Note that other variations of the virtual machine also have
 *       different names, e.g. the debug build of the SMP-enabled VM
 *       is "beam.debug.smp".
 *
 *       To use a different virtual machine, replace each instance of
 *       "beam" with "beam.smp" or the VM name appropriate to your
 *       environment.
 */

probe process("beam").mark("driver-init")
{
    printf("driver init name %s major %d minor %d flags %d\n",
	   user_string($arg1), $arg2, $arg3, $arg4);
}

probe process("beam").mark("driver-start")
{
    printf("driver start pid %s driver name %s port %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-stop")
{
    printf("driver stop pid %s driver name %s port %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-finish")
{
    printf("driver finish driver name %s\n",
           user_string($arg1));
}

probe process("beam").mark("driver-flush")
{
    printf("driver flush pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-output")
{
    printf("driver output pid %s port %s port name %s bytes %d\n",
	   user_string($arg1), user_string($arg2), user_string($arg3), $arg4);
}

probe process("beam").mark("driver-outputv")
{
    printf("driver outputv pid %s port %s port name %s bytes %d\n",
	   user_string($arg1), user_string($arg2), user_string($arg3), $arg4);
}

probe process("beam").mark("driver-control")
{
    printf("driver control pid %s port %s port name %s command %d bytes %d\n",
	   user_string($arg1), user_string($arg2), user_string($arg3), $arg4, $arg5);
}

probe process("beam").mark("driver-call")
{
    printf("driver call pid %s port %s port name %s command %d bytes %d\n",
	   user_string($arg1), user_string($arg2), user_string($arg3), $arg4, $arg5);
}

probe process("beam").mark("driver-event")
{
    printf("driver event pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-ready_input")
{
    printf("driver ready_input pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-ready_output")
{
    printf("driver ready_output pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-timeout")
{
    printf("driver timeout pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-ready_async")
{
    printf("driver ready_async pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-process_exit")
{
    printf("driver process_exit pid %s port %s port name %s\n",
	   user_string($arg1), user_string($arg2), user_string($arg3));
}

probe process("beam").mark("driver-stop_select")
{
    printf("driver stop_select driver name %s\n", user_string($arg1));
}
