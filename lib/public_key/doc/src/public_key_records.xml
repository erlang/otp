<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2008</year>
      <year>2014</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>Public key records</title>
    <prepared>Ingela Anderton Andin</prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2008-02-06</date>
    <rev>A</rev>
    <file>public_key_records.xml</file>
  </header>
    
  <p>This chapter briefly describes Erlang records derived from ASN1
  specifications used to handle public and private keys.
  The intent is to describe the data types
  and not to specify the semantics of each component. For information on the
  semantics, please see the relevant standards and RFCs.</p>

  <p>Use the following include directive to get access to the
  records and constant macros described in the following sections.</p>
  
  <code> -include_lib("public_key/include/public_key.hrl"). </code>

   <section>
     <title>Common Data Types</title>   

    <p>Common non-standard Erlang
    data types used to described the record fields in the
    below sections are defined in <seealso
    marker="public_key">public key reference manual </seealso></p>
  </section>

  <section>
    <title>RSA as defined by the PKCS-1 standard and  <url href="http://www.ietf.org/rfc/rfc3447.txt"> RFC 3447 </url></title>
    
    <code>
#'RSAPublicKey'{
	  modulus,       % integer()
	  publicExponent % integer()
	  }.

#'RSAPrivateKey'{
          version,         % two-prime | multi
	  modulus,         % integer()
	  publicExponent,  % integer()
	  privateExponent, % integer()
	  prime1,          % integer() 
	  prime2,          % integer()
	  exponent1,       % integer()
	  exponent2,       % integer()
	  coefficient,     % integer()
	  otherPrimeInfos  % [#OtherPrimeInfo{}] | asn1_NOVALUE
	 }.

#'OtherPrimeInfo'{
	prime,           % integer()
	exponent,        % integer()
	coefficient      % integer()
 	 }.	 
    </code>

  </section>

  <section>
    <title>DSA as defined by
    <url href="http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf">  Digital Signature Standard (NIST FIPS PUB 186-2) </url>
    </title>
    
    <code>	 
#'DSAPrivateKey',{
	  version,      % integer()
	  p,            % integer()
	  q,            % integer()
	  g,            % integer()
	  y,            % integer()
	  x             % integer()
	  }.

#'Dss-Parms',{
         p,         % integer()
	 q,         % integer()
	 g          % integer()
	 }. 
    </code>
  </section>

  <section>
       <title>ECC (Elliptic Curve) <url href="http://www.ietf.org/rfc/rfc3447.txt"> RFC 5480 </url> 
    </title>
    
    <code>	 
#'ECPrivateKey'{
          version,       % integer()
	  privateKey,    % binary()
	  parameters,    % der_encoded() - {'EcpkParameters', #'ECParameters'{}} |
	                                   {'EcpkParameters', {namedCurve, oid()}} |
	                                   {'EcpkParameters', 'NULL'} % Inherited by CA
	  publicKey      % bitstring()
	  }.
	  
#'ECParameters'{
      version,    % integer()
      fieldID,    % #'FieldID'{}
      curve,      % #'Curve'{}
      base,       % binary()
      order,      % integer()        
      cofactor    % integer()
      }.
      
#'Curve'{
	a,        % binary()
	b,        % binary()
	seed      % bitstring() - optional

	}.

#'FieldID'{
	fieldType,    % oid()
	parameters    % Depending on fieldType
	}.

#'ECPoint'{
      point % binary() - the public key
      }.

    </code>
  </section>

</chapter>
