<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2021</year><year>2023</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>Upcoming Potential Incompatibilities</title>
    <prepared></prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
    <file>upcoming_incompatibilities.xml</file>
  </header>
  <section>
    <title>Introduction</title>
    <p>This document lists planned upcoming potential incompatibilities in
    Erlang/OTP.</p>
  </section>

  <section>
    <title>OTP 27</title>

    <section>
      <marker id="fun_creator_pid"/>
      <title>Fun creator pid will always be local init process</title>
      <p>
        As of OTP 27, the functions
        <seemfa marker="erts:erlang#fun_info/1">
        <c>erlang:fun_info/1,2</c></seemfa> will always say that the local
        <c>init</c> process created all funs, regardless of which process or
        node the fun was originally created on.
      </p>
      <p>
        In OTP 28, the <c>{pid,_}</c>element will be removed altogether.</p>
    </section>

    <section>
      <marker id="maybe_expr"/>
      <title>Feature maybe_expr will be enabled by default</title>
      <p>
	As of OTP 27, the <c>maybe_expr</c> feature will be approved
	and enabled by default. That means that code that uses the
	unquoted atom <c>maybe</c> will fail to compile. All uses of
	<c>maybe</c> as an atom will need to be quoted. Alternatively, as a
	short-term solution, the <c>maybe_expr</c> feature can be
	disabled.
      </p>
      <p>
        It is recommend to quote all uses of the atom <c>maybe</c> as soon as
        possible. The compiler option <c>warn_keywords</c> can be used to emit
        warnings about all occurrences of <c>maybe</c> without quotes.
      </p>
    </section>

    <section>
      <marker id="new_re_engine"/>
      <title>The re module will use a different regular expression engine</title>

      <p>The functionality of module <seeerl
      marker="stdlib:re"><c>re</c></seeerl> is currently provided by
      the PCRE library, which is no longer actively
      maintained. Therefore, in OTP 27, we will switch to a different
      regular expression library.</p>

      <p>The source code for PCRE used by the <c>re</c> module has
      been modified by the OTP team to ensure that a regular
      expression match would yield when matching huge input binaries
      and/or when using demanding (back-tracking) regular
      expressions. Because of the those modifications, moving to a new
      version of PCRE has always been a time-consuming process because
      all of the modifications had to be applied by hand again to the
      updated PCRE source code.</p>

      <p>Most likely, the new regular expression library will be <url
      href="https://github.com/google/re2">RE2</url>. RE2 guarantees
      that the match time is linear in the length of input string, and
      it also eschews recursion to avoid stack overflow. That should
      make it possible to use RE2 without modifying its source
      code. For more information about why RE2 is a good choice, see
      <url
      href="https://github.com/google/re2/wiki/WhyRE2">WhyRE2</url>.</p>

      <p>Some of implications of this change are:</p>

      <list>
        <item><p>We expect that the functions in the <c>re</c> module
        will continue to be supported, although some of the options are likely
        to be dis-continued.</p></item>

        <item><p>It is likely that only pattern matching of UTF8-encoded binaries will be
        supported (not Latin1-encoded binaries).</p></item>

        <item><p>In order to guarantee the linear-time performance,
        RE2 does not support all the constructs in regular expression
        patterns that PCRE do. For example, backreferences and look-around
        assertions are not supported. See <url
        href="https://github.com/google/re2/wiki/Syntax">Syntax</url>
        for a description of what RE2 supports.</p></item>

        <item><p>Compiling a regular expression is likely to be
        slower, and thus more can be gained by explicitly compiling
        the regular expression before matching with it.</p></item>
      </list>
    </section>

    <section>
      <marker id="float_matching"/>
      <title>0.0 and -0.0 will no longer be exactly equal</title>

      <p>Currently, the floating point numbers <c>0.0</c> and <c>-0.0</c>
      have distinct internal representations. That can be seen if they are
      converted to binaries:</p>
      <pre>
1&gt; <input>&lt;&lt;0.0/float&gt;&gt;.</input>
&lt;&lt;0,0,0,0,0,0,0,0&gt;&gt;
2&gt; <input>&lt;&lt;-0.0/float&gt;>.</input>
&lt;&lt;128,0,0,0,0,0,0,0>></pre>

      <p>However, when they are matched against each other or compared
      using the <c>=:=</c> operator, they are considered to be
      equal. Thus, <c>0.0 =:= -0.0</c> currently returns
      <c>true</c>.</p>

      <p>In Erlang/OTP 27, <c>0.0 =:= -0.0</c> will return <c>false</c>, and matching
      <c>0.0</c> against <c>-0.0</c> will fail. When used as map keys, <c>0.0</c> and
      <c>-0.0</c> will be considered to be distinct.</p>

      <p>The <c>==</c> operator will continue to return <c>true</c>
      for <c>0.0 == -0.0</c>.</p>

      <p>To help to find code that might need to be revised, in OTP 27
      there will be a new compiler warning when matching against
      <c>0.0</c> or comparing to that value using the <c>=:=</c>
      operator. The warning can be suppressed by matching against
      <c>+0.0</c> instead of <c>0.0</c>.</p>

      <p>We plan to introduce the same warning in OTP 26.1, but by default it
      will be disabled.</p>
    </section>

    <section>
      <marker id="singleton_typevars"/>
      <title>Singleton type variables will become a compile-time error</title>

      <p>Before Erlang/OTP 26, the compiler would silenty accept the
      following spec:</p>

      <pre>
-spec f(Opts) -> term() when
    Opts :: {ok, Unknown} | {error, Unknown}.
f(_) -> error.</pre>

    <p>In OTP 26, the compiler emits a warning pointing out that the type variable
    <c>Unknown</c> is unbound:</p>

    <pre>
t.erl:6:18: Warning: type variable 'Unknown' is only used once (is unbound)
%    6|     Opts :: {ok, Unknown} | {error, Unknown}.
%     |                  ^</pre>

    <p>In OTP 27, that warning will become an error.</p>
    </section>

    <section>
      <marker id="escripts_will_be_compiled"/>
      <title>Escripts will be compiled by default</title>

      <p>Escripts will be compiled by default instead of interpreted.
      That means that the <c>compiler</c> application must be available.</p>

      <p>The old behavior of interpreting escripts can be restored by adding
      the following line to the script file:</p>
      <pre>
-mode(interpret).</pre>

      <p>In OTP 28, support for interpreting an escript will be removed.</p>
    </section>

    <section>
      <title>-code_path_choice will default to strict</title>
      <p>
        This command line option controls if paths given in the command
        line, boot scripts, and the code server should be interpreted as
        is strict or relaxed.
      </p>
      <p>
        OTP 26 and earlier defaults to <c>relaxed</c>, which means
        <c>-pa myapp/ebin</c> would attempt to load <c>-pa myapp/ebin</c>
        and <c>-pa myapp/myapp/ebin</c>. The option will default to
        strict in OTP 27.
      </p>
    </section>

    <section>
      <title>Archive fallbacks will be removed</title>
      <p>
        OTP 26 and earlier allows an application to have part of its
        directories as regular folders and others as archives.
        This functionality was previously used by reltool but it is
        no longer the case from OTP 26. Support for archive fallbacks
        will be removed from the code server in OTP 27.
      </p>
    </section>

    <section>
      <marker id="triple_quoted_strings"/>
      <title>Triple-Quoted Strings</title>
      <p>
        Before Erlang/OTP 27 a sequence of 3 or more double-quote characters
        was grouped in pairs each meaning the empty string and if there was
        an odd number the last character was the start of a string.
        The empty strings were then concatenated and effectively disappeared.
      </p>
      <p>
        In Erlang/OTP 27; 3 or more double-quote characters
        are interpreted as the start of a "Triple-Quoted String".  See
        <url href="https://www.erlang.org/eeps/eep-0064">EEP 64</url>.
      </p>
      <p>
        Here follows some examples of code that would change meaning.
        Note that all these examples before Erlang/OTP 27.0 was strange
        since there was no sensible reason to write like that.
      </p>
      <pre>
"""String Content"""
%% Was interpreted as
"" "String Content" ""
%% Which becomes
"String Content"
%%
%% In OTP 27 it is instead a syntax error since no text is allowed
%% on the line after an opening triple-quote
      </pre>
      <pre>
"""
String Content
"""
%% Was interpreted as
"" "
String Content
" ""
%% Which becomes
"
String Content
"
%%
%% In OTP 27 it is instead interpreted as a
%% Triple-Quoted String equivalent to
"String Content"
      </pre>
      <pre>
""""
++ foo() ++
""""
%% Became
"" ++ foo() ++ ""
%%
%% In OTP 27 it is instead interpreted as a
%% Triple-Quoted String (triple-or-more) equivalent to
"++ foo() ++"
      </pre>
      <p>
        From Erlang/OTP 26.1 up to 27.0 the compiler issues a warning for
        a sequence of 3 or more double-quote characters
        since that is almost certainly a mistake or
        something like a result of bad automatic code generation.
        If a users gets that warning, the code should be corrected
        for example by inserting appropriate spaces between
        the empty strings, or removing the redundant ones alltogether,
        which will have the same meaning before and after Erlang/OTP 27.
      </p>
    </section>

  </section>

  <section>
    <title>OTP 28</title>

    <section>
      <marker id="fun_creator_pid"/>
      <title>Fun creator pid will be removed</title>
      <p>
        As of OTP 28, the function <seemfa
        marker="erts:erlang#fun_info/1"><c>erlang:fun_info/1</c></seemfa>
        will not include the <c>{pid,_}</c> element and the function
        <seemfa marker="erts:erlang#fun_info/2"><c>erlang:fun_info/2</c></seemfa>
        will no longer accept <c>pid</c> as the second argument.</p>
    </section>

    <section>
      <marker id="escript_interpret_mode_removed"/>
      <title>Support for interpreting escripts will be removed</title>

      <p>Escripts will be compiled, and it will no longer be possible
      to force an escript to be interpreted by using the directive
      <c>-mode(interpret)</c>.</p>
    </section>
  </section>

  <section>
    <title>OTP 29</title>

    <section>
      <title>It will no longer be possible to disable feature maybe_expr</title>
      <p>
	As of OTP 29, the <c>maybe_expr</c> feature will become
	permanent and no longer possible to disable. All uses of
	<c>maybe</c> as an atom will need to be	quoted.
      </p>
      <p>
        It is recommend to quote all uses of the atom <c>maybe</c> as soon as
        possible. The compiler option <c>warn_keywords</c> can be used to emit
        warnings about all occurrences of <c>maybe</c> without quotes.
      </p>
    </section>
  </section>

</chapter>
