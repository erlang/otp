# %CopyrightBegin%
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright Ericsson AB 2023-2025. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# %CopyrightEnd%

name: Build Base Image
description: 'Builds the base testing image (using cache if possible)'

inputs:
  BASE_BRANCH:
    required: true
  TYPE:
    default: '64-bit'
  BUILD_IMAGE:
    default: true
  github_token:
    description: 'GITHUB_TOKEN'
    default: '${{ github.token }}'

runs:
    using: composite
    steps:
      - name: Cleanup GH Runner
        shell: bash
        run: .github/scripts/cleanup_gh_runner.sh

      ## Make sure to invalidate cache once a day so that we don't end up
      ## with a stale cache when kerl och apt-get upgrade updates things
      - name: Get current Erlang releases
        id: date
        shell: bash
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Cache BASE image
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        if: inputs.TYPE == '64-bit' || inputs.TYPE == 'clang'
        with:
            path: otp_docker_base.tar
            key: ${{ runner.os }}-${{ hashFiles('.github/dockerfiles/Dockerfile.ubuntu-base', '.github/scripts/build-base-image.sh') }}-${{ steps.date.outputs.date }}-${{ hashFiles('OTP_VERSION') }}

      - name: Docker login
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ inputs.github_token }}

      - name: Build BASE image
        shell: bash
        run: .github/scripts/build-base-image.sh "${{ inputs.BASE_BRANCH }}" "${{ inputs.TYPE }}"

      - name: Cache pre-built src
        id: cache-src
        if: inputs.BUILD_IMAGE == 'true'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
            path: otp_src.tar.gz
            key: prebuilt-src-${{ github.ref_name }}-${{ github.sha }}

      - name: Download pre-built src
        if: inputs.BUILD_IMAGE == 'true' && steps.cache-src.outputs.cache-hit != 'true'
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # ratchet:actions/download-artifact@v4
        with:
          name: otp_prebuilt

      - name: Cache pre-built binaries
        id: cache-binary
        if: inputs.BUILD_IMAGE == 'true' && steps.cache-src.outputs.cache-hit == 'true'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
            path: otp_cache.tar.gz
            key: prebuilt-cache-${{ inputs.TYPE }}-${{ github.ref_name }}-${{ github.sha }}

      - name: Download pre-built binaries
        if: inputs.BUILD_IMAGE == 'true' && steps.cache-binary.outputs.cache-hit != 'true'
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # ratchet:actions/download-artifact@v4
        with:
          name: otp_prebuilt

      - name: Build image
        if: inputs.BUILD_IMAGE == 'true'
        shell: bash -eo pipefail {0}
        run: |
          .github/scripts/restore-from-prebuilt.sh `pwd` .github/otp.tar.gz
          rm -f otp_{src,cache}.tar.gz
          docker build --tag otp \
            --build-arg MAKEFLAGS=-j$(($(nproc) + 2)) \
            --file ".github/dockerfiles/Dockerfile.${{ inputs.TYPE }}" \
            .github/
