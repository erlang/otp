ARG BASE=ghcr.io/erlang/otp/ubuntu-base
FROM $BASE

ARG MAKEFLAGS=$MAKEFLAGS
ENV MAKEFLAGS=$MAKEFLAGS \
    ERL_TOP=/buildroot/otp \
    PATH="/Erlang ∅⊤℞/bin":/buildroot/otp/bin:$PATH

ARG ARCHIVE=./otp.tar.gz
COPY $ARCHIVE /buildroot/otp.tar.gz
RUN cd /buildroot && tar -xzf ./otp.tar.gz

WORKDIR /buildroot/otp/

ENV CFLAGS="-O2 -g -Werror -DwxSTC_DISABLE_MACRO_DEPRECATIONS=1"
ENV CFLAGS="${CFLAGS} -Wall -Wformat -Wformat=2 -Wno-conversion -Wimplicit-fallthrough \
    -Werror=format-security -Wtrampolines -fsanitize=signed-integer-overflow"
ENV CXXFLAGS="-Wno-maybe-uninitialized"
## OpenSSF recommended CFLAGS, skipped are:
##  -Wconversion -Wextra -Wsign-conversion - As we have way too many of these warnings
##  -fstrict-flex-arrays=3 -Wbidi-chars=any - As gcc 11 does not support it
##  -mbranch-protection=standard - Only on arm
##  -Werror=implicit -Wincompatible-pointer-types -Wint-conversion - As these do not work on c++ code
ENV SKIPPED_OSSF_CFLAGS="-Wconversion -mbranch-protection=standard \
    -Wextra  -Werror=implicit -Werror=incompatible-pointer-types -Werror=int-conversion \
    -Wsign-conversion"
ENV LDFLAGS=""
## OpenSSF recommended LDFLAGS, skipped are:
## -Wl,-z,nodlopen - as opening drivers/nifs needs this
## -fPIE - not needed with gcc 11
## -fPIC -shared - only needed for .so files
ENV SKIPPED_OSSF_LDFLAGS="-Wl,-z,nodlopen -fPIE -fPIC -shared"

## Configure (if not cached), check that no application are disabled and then make
RUN if [ ! -f Makefile ]; then \
      touch README.md && \
      ./configure --prefix="/Erlang ∅⊤℞" --enable-pie && \
      if cat lib/*/CONF_INFO || cat lib/*/SKIP || cat lib/SKIP-APPLICATIONS; then exit 1; fi && \
      find . -type f -newer README.md | xargs tar --transform 's:^./:otp/:' -cf ../otp_cache.tar; \
    fi && \
    make && make docs DOC_TARGETS=chunks && \
    sudo make install install-docs DOC_TARGETS=chunks

## Disable -Werror as testcases do not compile with it on
ENV CFLAGS="-O2 -g"
ENV LDFLAGS=""
ENV CXXFLAGS=""

## Update init.sh with correct env vars
RUN echo "export MAKEFLAGS=$MAKEFLAGS" > /buildroot/env.sh && \
    echo "export ERLC_USE_SERVER=$ERLC_USE_SERVER" >> /buildroot/env.sh && \
    echo "export ERL_TOP=\"$ERL_TOP\"" >> /buildroot/env.sh && \
    echo "export PATH=\"$PATH\"" >> /buildroot/env.sh && \
    echo "export ERL_LIBS=\"$ERL_LIBS\"" >> /buildroot/env.sh
